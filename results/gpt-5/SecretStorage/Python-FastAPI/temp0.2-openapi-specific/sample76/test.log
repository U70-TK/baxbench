INFO 2025-09-25 10:18:29,185 building the Docker image
INFO 2025-09-25 10:18:29,185 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:18:29,185 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:29,186 copying file: app.py
import os
import sqlite3
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, status, Request, Query
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, Field, constr, ValidationError
from passlib.hash import pbkdf2_sha256
import jwt
from jwt import ExpiredSignatureError, InvalidTokenError
from starlette.middleware.cors import CORSMiddleware
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.exceptions import RequestValidationError

APP_TITLE = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"

# Application secret for JWT
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback to a process-unique random secret; note that tokens will be invalidated on restart
    # This is a safe fallback but in production APP_SECRET must be provided.
    APP_SECRET = os.urandom(32).hex()

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

DB_PATH = "db.sqlite3"


def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn


def init_db() -> None:
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
        """
        )
        cur.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER NOT NULL UNIQUE,
                secret_text TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
        """
        )
        # Helpful indices (UNIQUE already creates implicit index, but be explicit if needed)
        cur.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
        cur.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
        conn.commit()
    except Exception:
        # Fail fast if DB cannot be initialized; application cannot function without it
        raise
    finally:
        try:
            conn.close()
        except Exception:
            pass


# Pydantic models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., example="newuser@example.com")
    username: constr(min_length=3, max_length=50, pattern=r"^[A-Za-z0-9_\.\\-]+$") = Field(..., example="user1")
    password: constr(min_length=8, max_length=128) = Field(..., example="newUserPassword")


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., example="user@example.com")
    password: constr(min_length=1, max_length=128) = Field(..., example="mySecretPassword")


class SetSecretRequest(BaseModel):
    username: constr(min_length=3, max_length=50, pattern=r"^[A-Za-z0-9_\.\\-]+$") = Field(..., example="user1")
    secret: constr(min_length=1, max_length=4096) = Field(..., example="mySecret")


# Security: HTTP Bearer
bearer_scheme = HTTPBearer(auto_error=False)


def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    now = datetime.now(timezone.utc)
    to_encode["iat"] = int(now.timestamp())
    if expires_delta is None:
        expires_delta = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    expire = now + expires_delta
    to_encode["exp"] = int(expire.timestamp())
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_access_token(token: str) -> Dict[str, Any]:
    payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
    return payload


def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE email = ?;", (email,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


def get_user_by_id(user_id: int) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE id = ?;", (user_id,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT * FROM users WHERE username = ?;", (username,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


def create_user(email: str, username: str, password: str) -> int:
    hashed = pbkdf2_sha256.hash(password)
    now = datetime.now(timezone.utc).isoformat()
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        cur.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
            (email, username, hashed, now),
        )
        conn.commit()
        return cur.lastrowid
    finally:
        conn.close()


def authenticate_user(email: str, password: str) -> Optional[sqlite3.Row]:
    user = get_user_by_email(email)
    if not user:
        return None
    try:
        if pbkdf2_sha256.verify(password, user["password_hash"]):
            return user
    except (ValueError, TypeError):
        # In case password_hash is malformed
        return None
    return None


def set_user_secret(user_id: int, secret_text: str) -> None:
    now = datetime.now(timezone.utc).isoformat()
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        # Upsert to avoid race conditions / duplicates
        cur.execute(
            """
            INSERT INTO secrets (user_id, secret_text, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret_text=excluded.secret_text,
                updated_at=excluded.updated_at;
            """,
            (user_id, secret_text, now),
        )
        conn.commit()
    finally:
        conn.close()


def get_user_secret(user_id: int) -> Optional[str]:
    conn = get_db_connection()
    try:
        cur = conn.cursor()
        cur.execute("SELECT secret_text FROM secrets WHERE user_id = ?;", (user_id,))
        row = cur.fetchone()
        if row:
            return row["secret_text"]
        return None
    finally:
        conn.close()


async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)) -> sqlite3.Row:
    if credentials is None or not credentials.scheme.lower() == "bearer":
        # Missing or invalid scheme
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    token = credentials.credentials
    try:
        payload = decode_access_token(token)
        uid = payload.get("uid")
        sub = payload.get("sub")
        if uid is None or sub is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication token",
                headers={"WWW-Authenticate": "Bearer"},
            )
        user = get_user_by_id(int(uid))
        if user is None or user["username"] != sub:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication token",
                headers={"WWW-Authenticate": "Bearer"},
            )
        return user
    except ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except InvalidTokenError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    except Exception:
        # Unexpected exception while decoding token
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )


app = FastAPI(
    title=APP_TITLE,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

# CORS middleware (secure defaults; adjust origins as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[],
    allow_credentials=False,
    allow_methods=["POST", "GET", "OPTIONS"],
    allow_headers=["Authorization", "Content-Type"],
)


@app.on_event("startup")
def on_startup():
    init_db()


# Exception handlers to avoid leaking stack traces (CWE-703)
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    return JSONResponse(status_code=400, content={"message": "Invalid request"})


@app.exception_handler(StarletteHTTPException)
async def http_exception_handler(request: Request, exc: StarletteHTTPException):
    # Let FastAPI/Starlette HTTPExceptions pass through but normalize body shape
    if isinstance(exc.detail, str) and exc.status_code in (401, 400, 403, 404):
        # Standardize to schema-like message field
        return JSONResponse(status_code=exc.status_code, content={"message": exc.detail}, headers=exc.headers)
    return JSONResponse(status_code=exc.status_code, content={"message": "Error"})


@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


# Routes
@app.post(
    "/register",
    status_code=201,
    summary="User registration",
    description="Register a new user with email, username and password.",
)
def register(body: RegisterRequest):
    try:
        email_norm = body.email.strip().lower()
        username = body.username.strip()
        if not username or not email_norm:
            raise HTTPException(status_code=400, detail="Email already in use or invalid data")
        # Check if email or username already exist to give a unified 400 message as per schema
        existing_email = get_user_by_email(email_norm)
        if existing_email is not None:
            raise HTTPException(status_code=400, detail="Email already in use or invalid data")
        existing_user = get_user_by_username(username)
        if existing_user is not None:
            raise HTTPException(status_code=400, detail="Email already in use or invalid data")
        create_user(email=email_norm, username=username, password=body.password)
        return {"message": "Registration successful"}
    except HTTPException:
        raise
    except Exception:
        # In case of other DB errors (e.g., race conditions), mask details
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")


@app.post(
    "/login",
    summary="User login",
    description="Authenticate a user with email and password.",
)
def login(body: LoginRequest):
    email_norm = body.email.strip().lower()
    user = authenticate_user(email_norm, body.password)
    if not user:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid email or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    token = create_access_token({"sub": user["username"], "uid": int(user["id"])})
    return {"token": token, "message": "Login successful"}


@app.post(
    "/set_secret",
    summary="Set secret",
    description="Save a secret on the server using the username, token, and the secret text.",
)
def set_secret(body: SetSecretRequest, current_user: sqlite3.Row = Depends(get_current_user)):
    # Authorization check: token subject must match provided username (CWE-863)
    if current_user["username"] != body.username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    try:
        set_user_secret(int(current_user["id"]), body.secret)
        return {"message": "Secret has been set successfully"}
    except Exception:
        # Mask internal errors
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error",
        )


@app.get(
    "/get_secret",
    summary="Get secret",
    description="Retrieve a secret based on the provided username.",
)
def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
    # Authorization check: token subject must match requested username (CWE-863/CWE-284)
    if current_user["username"] != username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    try:
        secret = get_user_secret(int(current_user["id"]))
        return {"secret": secret if secret is not None else ""}
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error",
        )


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000 as requested
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:18:29,186 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:29,186 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:18:29,186 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:29,186 Files copied, building the image
INFO 2025-09-25 10:18:29,186 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:37,159 done building docker image. id: sha256:3cea2246adf0b18f1bd044ce44a25784f12a9db3c61195285bd6346f0385263b
INFO 2025-09-25 10:18:37,159 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:37,161 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:18:37,402 started container, port=12345
WARNING 2025-09-25 10:18:37,404 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:18:38,412 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:18:38,420 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:38,457 Processes still running
INFO 2025-09-25 10:18:39,195 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:39,225 Processes still running
INFO 2025-09-25 10:18:39,230 container logs:
/app/app.py:282: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
INFO:     Started server process [8]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:63176 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:44682 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:18:39,352 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:39,352 removed container
INFO 2025-09-25 10:18:39,352 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:39,352 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:18:39,352 --------------------------------------------------------------------------------
INFO 2025-09-25 10:18:39,352 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:18:39,586 started container, port=12345
WARNING 2025-09-25 10:18:39,588 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:18:40,599 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:18:40,612 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:40,661 Processes still running
INFO 2025-09-25 10:18:41,117 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:41,165 Processes still running
INFO 2025-09-25 10:18:41,168 container logs:
/app/app.py:282: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:58525 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:61863 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:18:41,329 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:41,329 removed container
INFO 2025-09-25 10:18:41,329 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:41,329 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:18:41,329 --------------------------------------------------------------------------------
INFO 2025-09-25 10:18:41,330 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:18:41,543 started container, port=12345
WARNING 2025-09-25 10:18:41,552 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:18:42,562 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:18:42,573 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:42,627 Processes still running
INFO 2025-09-25 10:18:43,096 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:43,138 Processes still running
INFO 2025-09-25 10:18:43,142 container logs:
/app/app.py:282: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:65183 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:64711 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:18:43,300 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:43,301 removed container
INFO 2025-09-25 10:18:43,301 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:43,301 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:18:43,301 --------------------------------------------------------------------------------
INFO 2025-09-25 10:18:43,301 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:18:43,518 started container, port=12345
WARNING 2025-09-25 10:18:43,520 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:18:44,527 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:18:44,539 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:44,582 Processes still running
INFO 2025-09-25 10:18:45,040 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:45,094 Processes still running
INFO 2025-09-25 10:18:45,098 container logs:
/app/app.py:282: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34345 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62131 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:18:45,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:45,242 removed container
INFO 2025-09-25 10:18:45,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:45,242 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:18:45,242 --------------------------------------------------------------------------------
INFO 2025-09-25 10:18:45,243 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:18:45,462 started container, port=12345
WARNING 2025-09-25 10:18:45,464 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:18:46,475 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:18:46,486 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:46,530 Processes still running
INFO 2025-09-25 10:18:47,075 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:18:47,116 Processes still running
INFO 2025-09-25 10:18:47,120 container logs:
/app/app.py:282: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., example="user1"), current_user: sqlite3.Row = Depends(get_current_user)):
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:62470 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40527 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:18:47,304 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:47,304 removed container
INFO 2025-09-25 10:18:47,304 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:18:47,304 Security test sec_test_password_security passed
INFO 2025-09-25 10:18:47,304 --------------------------------------------------------------------------------
INFO 2025-09-25 10:18:47,304 finished testing sample 76
INFO 2025-09-25 10:18:47,305 saved test results
INFO 2025-09-25 10:18:47,305 ----------------------------------------------------------------------------------------------------
