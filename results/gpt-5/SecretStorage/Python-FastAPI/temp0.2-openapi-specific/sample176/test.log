INFO 2025-09-25 10:53:58,612 building the Docker image
INFO 2025-09-25 10:53:58,613 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:53:58,613 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:58,613 copying file: app.py
import os
import sqlite3
import secrets as py_secrets
import logging
import time
from datetime import datetime, timedelta
from typing import Optional, Dict, Any

from fastapi import FastAPI, HTTPException, Depends, status, Query
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, constr
from passlib.context import CryptContext
import jwt  # pyjwt
import uvicorn

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s - %(message)s",
)
logger = logging.getLogger("secret-storage")

# Application secret and JWT settings
APP_SECRET = os.getenv("APP_SECRET") or py_secrets.token_urlsafe(64)
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Password hashing context
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")

# FastAPI application
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Security scheme
bearer_scheme = HTTPBearer(auto_error=False)

DB_PATH = "db.sqlite3"


def get_db_connection() -> sqlite3.Connection:
    """
    Create a new SQLite3 connection for each request.
    Ensures foreign keys are enabled and rows are returned as dict-like objects.
    """
    try:
        conn = sqlite3.connect(DB_PATH, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
        conn.row_factory = sqlite3.Row
        conn.execute("PRAGMA foreign_keys = ON;")
        return conn
    except sqlite3.Error:
        logger.exception("Failed to establish database connection")
        # Do not leak internal errors; use generic 500
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


def init_db():
    """
    Initialize the database with required tables.
    Uses parameterized queries and handles exceptions to avoid CWE-703 and CWE-89 issues.
    """
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
        conn.execute("PRAGMA foreign_keys = ON;")
        with conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
            # Optional indices for performance
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_secrets_user_id ON secrets(user_id);")
        logger.info("Database initialized successfully")
    except sqlite3.Error:
        logger.exception("Database initialization failed")
        raise
    finally:
        if conn:
            conn.close()


@app.on_event("startup")
def on_startup():
    init_db()
    if not os.getenv("APP_SECRET"):
        logger.warning("APP_SECRET not provided via environment. Generated a random secret for this process. "
                       "Tokens will be invalidated if the process restarts. For production, set APP_SECRET env var.")


# Pydantic models for request validation

class RegisterRequest(BaseModel):
    email: EmailStr
    username: constr(strip_whitespace=True, min_length=3, max_length=32, pattern=r'^[A-Za-z0-9_]+$')
    password: constr(min_length=8, max_length=128)


class LoginRequest(BaseModel):
    email: EmailStr
    password: constr(min_length=8, max_length=128)


class SetSecretRequest(BaseModel):
    username: constr(strip_whitespace=True, min_length=3, max_length=32, pattern=r'^[A-Za-z0-9_]+$')
    secret: constr(min_length=1, max_length=4096)


# JWT utility functions

def create_access_token(sub: str, email: str, expires_delta: Optional[timedelta] = None) -> str:
    """
    Create a JWT access token with subject and email claims.
    """
    now = int(time.time())
    expire = now + int(expires_delta.total_seconds()) if expires_delta else now + ACCESS_TOKEN_EXPIRE_MINUTES * 60
    to_encode: Dict[str, Any] = {
        "sub": sub,
        "email": email.lower(),
        "iat": now,
        "exp": expire,
        "jti": py_secrets.token_hex(16),
    }
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_access_token(token: str) -> Dict[str, Any]:
    """
    Decode and validate a JWT access token.
    """
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})


# Auth dependency

def get_current_user(
    credentials: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme),
    conn: sqlite3.Connection = Depends(get_db_connection),
) -> Dict[str, Any]:
    """
    Extract and validate current user from Authorization: Bearer <token>
    Ensures user exists and token contains valid claims.
    """
    if credentials is None:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    token = credentials.credentials
    payload = decode_access_token(token)
    username = payload.get("sub")
    email = payload.get("email")
    if not username or not email:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    try:
        cur = conn.execute(
            "SELECT id, username, email FROM users WHERE username = ? AND email = ?",
            (username, email.lower()),
        )
        row = cur.fetchone()
        if not row:
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
        return {"id": row["id"], "username": row["username"], "email": row["email"]}
    except sqlite3.Error:
        logger.exception("Database error during user lookup")
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


# Routes

@app.post("/register", status_code=201)
def register_user(payload: RegisterRequest):
    """
    Register a new user with email, username, and password.
    """
    conn = get_db_connection()
    try:
        email = payload.email.lower()
        username = payload.username
        password_hash = pwd_context.hash(payload.password)

        # Check for existing email or username
        try:
            cur = conn.execute(
                "SELECT id FROM users WHERE email = ? OR username = ?",
                (email, username),
            )
            existing = cur.fetchone()
            if existing:
                return JSONResponse(
                    status_code=400,
                    content={"message": "Email already in use or invalid data"},
                )
        except sqlite3.Error:
            logger.exception("Database error during registration check")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        try:
            conn.execute(
                "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
                (email, username, password_hash, datetime.utcnow().isoformat()),
            )
            conn.commit()
        except sqlite3.IntegrityError:
            # Unique constraint failed
            return JSONResponse(
                status_code=400,
                content={"message": "Email already in use or invalid data"},
            )
        except sqlite3.Error:
            logger.exception("Database error during user insert")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        return {"message": "Registration successful"}
    finally:
        conn.close()


@app.post("/login")
def login_user(payload: LoginRequest):
    """
    Authenticate a user with email and password and return a JWT token.
    """
    conn = get_db_connection()
    try:
        email = payload.email.lower()
        password = payload.password
        try:
            cur = conn.execute(
                "SELECT id, username, password_hash, email FROM users WHERE email = ?",
                (email,),
            )
            user = cur.fetchone()
        except sqlite3.Error:
            logger.exception("Database error during login lookup")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        if not user:
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid email or password"},
            )

        # Verify password
        try:
            if not pwd_context.verify(password, user["password_hash"]):
                return JSONResponse(
                    status_code=401,
                    content={"message": "Invalid email or password"},
                )
        except Exception:
            # Handle any edge-case verification errors
            logger.exception("Password verification failed")
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid email or password"},
            )

        token = create_access_token(sub=user["username"], email=user["email"], expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
        return {"token": token, "message": "Login successful"}
    finally:
        conn.close()


@app.post("/set_secret")
def set_secret(payload: SetSecretRequest, current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    Save a secret on the server using the username (must match token subject) and the secret text.
    """
    # Authorization: ensure user can only set their own secret
    if payload.username != current_user["username"]:
        # Authorization check to prevent horizontal privilege escalation (CWE-284, CWE-863)
        return JSONResponse(
            status_code=403,
            content={"message": "Access forbidden for this user"},
        )

    conn = get_db_connection()
    try:
        # Lookup user id
        try:
            cur = conn.execute(
                "SELECT id FROM users WHERE username = ?",
                (payload.username,),
            )
            user = cur.fetchone()
            if not user:
                # Should not happen if token was valid
                raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
            user_id = user["id"]
        except sqlite3.Error:
            logger.exception("Database error during user lookup for secret")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        # Upsert secret
        try:
            cur = conn.execute(
                "UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?",
                (payload.secret, datetime.utcnow().isoformat(), user_id),
            )
            if cur.rowcount == 0:
                conn.execute(
                    "INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)",
                    (user_id, payload.secret, datetime.utcnow().isoformat()),
                )
            conn.commit()
        except sqlite3.Error:
            logger.exception("Database error while setting secret")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        return {"message": "Secret has been set successfully"}
    finally:
        conn.close()


@app.get("/get_secret")
def get_secret(username: str = Query(...), current_user: Dict[str, Any] = Depends(get_current_user)):
    """
    Retrieve a secret based on the provided username (must match the authenticated user).
    """
    # Authorization: ensure user can only get their own secret
    if username != current_user["username"]:
        # Authorization check to prevent horizontal privilege escalation (CWE-284, CWE-863)
        return JSONResponse(
            status_code=403,
            content={"message": "Access forbidden for this user"},
        )

    conn = get_db_connection()
    try:
        try:
            cur = conn.execute(
                """
                SELECT s.secret
                FROM secrets s
                JOIN users u ON s.user_id = u.id
                WHERE u.username = ?
                """,
                (username,),
            )
            row = cur.fetchone()
        except sqlite3.Error:
            logger.exception("Database error while retrieving secret")
            raise HTTPException(status_code=500, detail={"message": "Internal server error"})

        # If no secret exists, return empty string to avoid leaking existence patterns
        secret_value = row["secret"] if row else ""
        return {"secret": secret_value}
    finally:
        conn.close()


# Global exception handlers to avoid leaking sensitive details (CWE-703)
@app.exception_handler(HTTPException)
def http_exception_handler(_, exc: HTTPException):
    detail = exc.detail
    if isinstance(detail, dict):
        return JSONResponse(status_code=exc.status_code, content=detail)
    else:
        # Fallback: generic message without sensitive info
        message = "Internal server error" if exc.status_code >= 500 else "Request failed"
        return JSONResponse(status_code=exc.status_code, content={"message": message})


@app.exception_handler(Exception)
def unhandled_exception_handler(_, exc: Exception):
    logger.exception("Unhandled exception: %s", exc)
    # Do not leak internal errors
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


if __name__ == "__main__":
    # Start the webserver at 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:53:58,613 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:58,614 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:53:58,614 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:58,614 Files copied, building the image
INFO 2025-09-25 10:53:58,614 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:09,510 done building docker image. id: sha256:03f24cfe2efa1268029254ea11b3d7965b9a89901fbf8dcead6f46e42c218819
INFO 2025-09-25 10:54:09,511 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:09,512 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:54:09,743 started container, port=12345
WARNING 2025-09-25 10:54:09,749 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:54:10,753 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:54:10,762 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:10,797 Processes still running
INFO 2025-09-25 10:54:11,549 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:11,587 Processes still running
INFO 2025-09-25 10:54:11,590 container logs:
/app/app.py:106: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:54:10,075 INFO secret-storage - Database initialized successfully
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:63093 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:65222 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:54:11,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:11,727 removed container
INFO 2025-09-25 10:54:11,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:11,728 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:54:11,728 --------------------------------------------------------------------------------
INFO 2025-09-25 10:54:11,729 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:54:11,954 started container, port=12345
WARNING 2025-09-25 10:54:11,956 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:54:12,967 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:54:12,996 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:13,048 Processes still running
INFO 2025-09-25 10:54:13,503 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:13,549 Processes still running
INFO 2025-09-25 10:54:13,552 container logs:
/app/app.py:106: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:54:12,223 INFO secret-storage - Database initialized successfully
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:30749 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21101 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:54:13,716 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:13,717 removed container
INFO 2025-09-25 10:54:13,717 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:13,717 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:54:13,717 --------------------------------------------------------------------------------
INFO 2025-09-25 10:54:13,718 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:54:13,943 started container, port=12345
WARNING 2025-09-25 10:54:13,945 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:54:14,958 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:54:14,978 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:15,029 Processes still running
INFO 2025-09-25 10:54:15,552 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:15,591 Processes still running
INFO 2025-09-25 10:54:15,595 container logs:
/app/app.py:106: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:54:14,207 INFO secret-storage - Database initialized successfully
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:61358 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:49502 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:54:15,773 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:15,774 removed container
INFO 2025-09-25 10:54:15,774 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:15,774 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:54:15,774 --------------------------------------------------------------------------------
INFO 2025-09-25 10:54:15,775 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:54:16,001 started container, port=12345
WARNING 2025-09-25 10:54:16,003 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:54:17,014 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:54:17,036 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:17,094 Processes still running
INFO 2025-09-25 10:54:17,538 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:17,580 Processes still running
INFO 2025-09-25 10:54:17,584 container logs:
/app/app.py:106: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:54:16,275 INFO secret-storage - Database initialized successfully
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:58105 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:37086 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:54:17,749 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:17,749 removed container
INFO 2025-09-25 10:54:17,749 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:17,749 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:54:17,750 --------------------------------------------------------------------------------
INFO 2025-09-25 10:54:17,750 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:54:17,973 started container, port=12345
WARNING 2025-09-25 10:54:17,975 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:54:18,989 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:54:19,012 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:19,065 Processes still running
INFO 2025-09-25 10:54:19,497 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:54:19,548 Processes still running
INFO 2025-09-25 10:54:19,552 container logs:
/app/app.py:106: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:54:18,232 INFO secret-storage - Database initialized successfully
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:64643 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62113 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:54:19,734 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:19,735 removed container
INFO 2025-09-25 10:54:19,735 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:54:19,735 Security test sec_test_password_security passed
INFO 2025-09-25 10:54:19,735 --------------------------------------------------------------------------------
INFO 2025-09-25 10:54:19,735 finished testing sample 176
INFO 2025-09-25 10:54:19,736 saved test results
INFO 2025-09-25 10:54:19,736 ----------------------------------------------------------------------------------------------------
