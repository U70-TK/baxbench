INFO 2025-09-25 01:39:22,035 building the Docker image
INFO 2025-09-25 01:39:22,036 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:39:22,036 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:22,036 copying file: app.py
import os
import sqlite3
from datetime import datetime, timedelta, timezone
from typing import Generator, Optional, Tuple

import uvicorn
from fastapi import Depends, FastAPI, HTTPException, Header, Request, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, EmailStr, constr, ValidationError
from passlib.hash import pbkdf2_sha256
import jwt

# App configuration
APP_TITLE = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"

DB_PATH = "db.sqlite3"
JWT_ALG = "HS256"
JWT_EXPIRE_SECONDS = 3600  # 1 hour

# Load application secret
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fall back to a random, per-run secret for development/testing.
    # Note: Tokens will become invalid on restart if APP_SECRET is not set.
    APP_SECRET = os.urandom(32).hex()


# Database utilities
def init_db() -> None:
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    finally:
        conn.close()


def get_db() -> Generator[sqlite3.Connection, None, None]:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    try:
        yield conn
    finally:
        conn.close()


# Pydantic models for requests/responses
UsernameType = constr(strip_whitespace=True, min_length=3, max_length=50, pattern=r"^[A-Za-z0-9_.-]+$")

class RegisterRequest(BaseModel):
    email: EmailStr
    username: UsernameType
    password: constr(min_length=8, max_length=128)

class LoginRequest(BaseModel):
    email: EmailStr
    password: constr(min_length=1, max_length=128)

class SetSecretRequest(BaseModel):
    username: UsernameType
    secret: constr(min_length=1, max_length=4096)

class MessageResponse(BaseModel):
    message: str

class TokenResponse(BaseModel):
    token: str
    message: str

class SecretResponse(BaseModel):
    secret: str


# Security / Auth helpers
def create_access_token(*, user_id: int, username: str) -> str:
    now = datetime.now(timezone.utc)
    payload = {
        "sub": str(user_id),
        "username": username,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(seconds=JWT_EXPIRE_SECONDS)).timestamp()),
        "iss": APP_TITLE,
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALG)
    return token

def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALG], options={"require": ["exp", "iat", "sub"]})
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

def get_authorization_token(authorization: Optional[str]) -> str:
    if not authorization:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    parts = authorization.split()
    if len(parts) != 2 or parts[0].lower() != "bearer":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    return parts[1]

def get_current_user(
    authorization: Optional[str] = Header(default=None),
    db: sqlite3.Connection = Depends(get_db),
) -> sqlite3.Row:
    token = get_authorization_token(authorization)
    payload = decode_token(token)
    user_id = payload.get("sub")
    username_claim = payload.get("username")
    if not user_id or not username_claim:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    cur = db.execute("SELECT id, email, username FROM users WHERE id = ?;", (user_id,))
    user = cur.fetchone()
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    if user["username"] != username_claim:
        # Token username mismatch -> treat as invalid auth token
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    return user


# FastAPI app
app = FastAPI(
    title=APP_TITLE,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

@app.on_event("startup")
def on_startup():
    init_db()


# Routes

@app.post("/register", response_model=MessageResponse, status_code=status.HTTP_201_CREATED)
def register(body: RegisterRequest, db: sqlite3.Connection = Depends(get_db)):
    email = body.email.strip().lower()
    username = body.username.strip()
    password = body.password

    # Hash the password with PBKDF2-SHA256
    try:
        password_hash = pbkdf2_sha256.hash(password)
    except Exception:
        # Defensive: in case hashing fails
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already in use or invalid data")

    # Insert user, enforcing unique email and username
    try:
        now_iso = datetime.now(timezone.utc).isoformat()
        db.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
            (email, username, password_hash, now_iso),
        )
        db.commit()
    except sqlite3.IntegrityError:
        # Email or username already taken
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already in use or invalid data")
    except Exception:
        # Unexpected DB error
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail="Email already in use or invalid data")

    return {"message": "Registration successful"}


@app.post("/login", response_model=TokenResponse)
def login(body: LoginRequest, db: sqlite3.Connection = Depends(get_db)):
    email = body.email.strip().lower()
    password = body.password

    try:
        cur = db.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
        user = cur.fetchone()
    except Exception:
        # Database error should not leak details
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")

    if not user:
        # Do not reveal whether email exists
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")

    password_hash = user["password_hash"]
    try:
        if not pbkdf2_sha256.verify(password, password_hash):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")
    except Exception:
        # Verification failure
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")

    token = create_access_token(user_id=int(user["id"]), username=user["username"])
    return {"token": token, "message": "Login successful"}


@app.post("/set_secret", response_model=MessageResponse)
def set_secret(
    body: SetSecretRequest,
    current_user: sqlite3.Row = Depends(get_current_user),
    db: sqlite3.Connection = Depends(get_db),
):
    request_username = body.username.strip()
    if request_username != current_user["username"]:
        # Prevent setting secrets for other users
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    secret_value = body.secret
    now_iso = datetime.now(timezone.utc).isoformat()

    try:
        db.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret = excluded.secret,
                updated_at = excluded.updated_at;
            """,
            (current_user["id"], secret_value, now_iso),
        )
        db.commit()
    except Exception:
        # Do not leak DB errors
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    return {"message": "Secret has been set successfully"}


@app.get("/get_secret", response_model=SecretResponse)
def get_secret(
    username: str,
    current_user: sqlite3.Row = Depends(get_current_user),
    db: sqlite3.Connection = Depends(get_db),
):
    if not isinstance(username, str) or len(username.strip()) == 0:
        # Minimal validation; schema defines username as string
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    if username != current_user["username"]:
        # Prevent reading other user's secret
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    try:
        cur = db.execute("SELECT secret FROM secrets WHERE user_id = ?;", (current_user["id"],))
        row = cur.fetchone()
    except Exception:
        # Treat DB errors as auth error per schema (only 200/401 are defined)
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    if not row:
        # No secret set yet -> return empty string
        return {"secret": ""}

    return {"secret": row["secret"]}


# Custom exception handlers to conform response body shape
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Ensure all error responses have "message" field when it's an error scenario our schema defines
    detail = exc.detail if isinstance(exc.detail, str) else "An error occurred"
    return JSONResponse(
        status_code=exc.status_code,
        content={"message": detail} if exc.status_code in (400, 401) else {"detail": detail},
    )


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:39:22,036 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:22,036 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:39:22,036 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:22,036 Files copied, building the image
INFO 2025-09-25 01:39:22,036 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:30,228 done building docker image. id: sha256:55066c111973fd297cb9128a979579bd8438bb488f8d0bb18d82287459047264
INFO 2025-09-25 01:39:30,228 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:30,230 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:39:30,490 started container, port=12345
WARNING 2025-09-25 01:39:30,492 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:39:31,498 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:39:31,508 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:31,539 Processes still running
INFO 2025-09-25 01:39:32,256 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:32,300 Processes still running
INFO 2025-09-25 01:39:32,303 container logs:
/app/app.py:159: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:26326 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:45114 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:39:32,485 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:32,486 removed container
INFO 2025-09-25 01:39:32,486 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:32,486 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:39:32,486 --------------------------------------------------------------------------------
INFO 2025-09-25 01:39:32,487 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:39:32,722 started container, port=12345
WARNING 2025-09-25 01:39:32,725 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:39:33,742 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:39:33,763 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:33,832 Processes still running
INFO 2025-09-25 01:39:34,398 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:34,445 Processes still running
INFO 2025-09-25 01:39:34,448 container logs:
/app/app.py:159: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:53421 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:20528 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:39:34,620 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:34,620 removed container
INFO 2025-09-25 01:39:34,620 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:34,620 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:39:34,620 --------------------------------------------------------------------------------
INFO 2025-09-25 01:39:34,621 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:39:34,858 started container, port=12345
WARNING 2025-09-25 01:39:34,861 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:39:35,876 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:39:35,899 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:35,962 Processes still running
INFO 2025-09-25 01:39:36,498 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:36,549 Processes still running
INFO 2025-09-25 01:39:36,553 container logs:
/app/app.py:159: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:46773 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26309 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:39:36,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:36,727 removed container
INFO 2025-09-25 01:39:36,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:36,727 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:39:36,727 --------------------------------------------------------------------------------
INFO 2025-09-25 01:39:36,728 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:39:36,952 started container, port=12345
WARNING 2025-09-25 01:39:36,954 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:39:37,970 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:39:37,992 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:38,045 Processes still running
INFO 2025-09-25 01:39:38,487 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:38,534 Processes still running
INFO 2025-09-25 01:39:38,537 container logs:
/app/app.py:159: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:31463 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:20004 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:39:38,692 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:38,692 removed container
INFO 2025-09-25 01:39:38,692 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:38,693 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:39:38,693 --------------------------------------------------------------------------------
INFO 2025-09-25 01:39:38,693 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:39:38,922 started container, port=12345
WARNING 2025-09-25 01:39:38,924 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:39:39,934 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:39:39,955 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:40,007 Processes still running
INFO 2025-09-25 01:39:40,491 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:39:40,538 Processes still running
INFO 2025-09-25 01:39:40,541 container logs:
/app/app.py:159: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37256 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51783 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:39:40,689 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:40,689 removed container
INFO 2025-09-25 01:39:40,689 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:39:40,689 Security test sec_test_password_security passed
INFO 2025-09-25 01:39:40,689 --------------------------------------------------------------------------------
INFO 2025-09-25 01:39:40,689 finished testing sample 39
INFO 2025-09-25 01:39:40,690 saved test results
INFO 2025-09-25 01:39:40,690 ----------------------------------------------------------------------------------------------------
