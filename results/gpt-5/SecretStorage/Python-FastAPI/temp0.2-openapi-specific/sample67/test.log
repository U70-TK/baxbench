INFO 2025-09-25 10:15:38,588 building the Docker image
INFO 2025-09-25 10:15:38,588 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:15:38,589 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:38,589 copying file: app.py
import os
import re
import sqlite3
import time
from datetime import datetime, timedelta
from typing import Optional

from fastapi import FastAPI, Depends, HTTPException, Request, status
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field, ValidationError
from email_validator import validate_email, EmailNotValidError
from passlib.hash import pbkdf2_sha256
import jwt
import uvicorn

# Application configuration
APP_TITLE = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"
DB_PATH = "db.sqlite3"
TOKEN_EXPIRE_SECONDS = 60 * 60  # 1 hour

# Load application secret
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Generate a random ephemeral secret if none provided (tokens will be invalid across restarts)
    APP_SECRET = os.urandom(32).hex()

# FastAPI application
app = FastAPI(title=APP_TITLE, description=APP_DESCRIPTION, version=APP_VERSION)

# Security - Bearer Token
bearer_scheme = HTTPBearer(auto_error=True)

# Regex for allowed usernames
USERNAME_REGEX = re.compile(r"^[A-Za-z0-9_.-]{3,64}$")


def get_db_conn() -> sqlite3.Connection:
    """
    Creates a new database connection for each request.
    Ensures foreign keys are enforced and rows are returned as dict-like objects.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, isolation_level=None)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys = ON")
    except sqlite3.Error:
        # If PRAGMA fails, we continue but still return the connection
        pass
    return conn


def init_db():
    """
    Initialize the database with required tables and constraints.
    Uses safe SQL with parameters and handles rare exceptions gracefully.
    """
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    try:
        conn.execute("PRAGMA foreign_keys = ON")
        try:
            # Enable WAL for better concurrency (best effort)
            conn.execute("PRAGMA journal_mode = WAL")
        except sqlite3.Error:
            pass

        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            )
            """
        )
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email)")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username)")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_secrets_user_id ON secrets(user_id)")
        conn.commit()
    except sqlite3.Error:
        # In case of unexpected DB error during initialization, ensure DB is at least created.
        pass
    finally:
        try:
            conn.close()
        except Exception:
            pass


init_db()


def create_token(user_id: int, username: str, email: str) -> str:
    now = datetime.utcnow()
    payload = {
        "sub": str(user_id),
        "username": username,
        "email": email,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(seconds=TOKEN_EXPIRE_SECONDS)).timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm="HS256")
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=["HS256"])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})


class RegisterRequest(BaseModel):
    email: str = Field(..., min_length=5, max_length=254)
    username: str = Field(..., min_length=3, max_length=64)
    password: str = Field(..., min_length=8, max_length=128)

    def normalized_email(self) -> str:
        try:
            v = validate_email(self.email, check_deliverability=False)
            return v.email.lower()
        except EmailNotValidError:
            # Raise a generic error message to avoid user enumeration
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"}
            )

    def validate_username(self) -> str:
        uname = self.username.strip()
        if not USERNAME_REGEX.match(uname):
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"}
            )
        return uname


class LoginRequest(BaseModel):
    email: str = Field(..., min_length=5, max_length=254)
    password: str = Field(..., min_length=8, max_length=128)

    def normalized_email(self) -> str:
        try:
            v = validate_email(self.email, check_deliverability=False)
            return v.email.lower()
        except EmailNotValidError:
            # Do not reveal specifics
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"}
            )


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=64)
    secret: str = Field(..., min_length=1, max_length=4096)

    def validate_username(self) -> str:
        uname = self.username.strip()
        if not USERNAME_REGEX.match(uname):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"}
            )
        return uname


def get_current_user(
    credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme),
    conn: sqlite3.Connection = Depends(get_db_conn),
):
    token = credentials.credentials
    payload = decode_token(token)
    sub = payload.get("sub")
    if not sub:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    try:
        user_id = int(sub)
    except (TypeError, ValueError):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    try:
        cur = conn.execute("SELECT id, email, username FROM users WHERE id = ?", (user_id,))
        row = cur.fetchone()
    except sqlite3.Error:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})

    if not row:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    return {"id": row["id"], "email": row["email"], "username": row["username"]}


@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Ensure response JSON matches schema expectations: messages or secrets
    detail = exc.detail
    if isinstance(detail, dict):
        return JSONResponse(status_code=exc.status_code, content=detail)
    return JSONResponse(status_code=exc.status_code, content={"message": str(detail)})


@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    # Generic handler to avoid leaking internal details (CWE-703)
    return JSONResponse(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, content={"message": "Internal server error"})


@app.post("/register", openapi_extra={"security": []})
def register(req: RegisterRequest, conn: sqlite3.Connection = Depends(get_db_conn)):
    email_norm = req.normalized_email()
    username_norm = req.validate_username()

    # Hash the password securely (CWE-522)
    try:
        password_hash = pbkdf2_sha256.hash(req.password)
    except Exception:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})

    try:
        now = datetime.utcnow().isoformat()
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email_norm, username_norm, password_hash, now),
        )
        return JSONResponse(status_code=status.HTTP_201_CREATED, content={"message": "Registration successful"})
    except sqlite3.IntegrityError:
        # Handle duplicates generically to avoid user enumeration
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    except sqlite3.Error:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})


@app.post("/login", openapi_extra={"security": []})
def login(req: LoginRequest, conn: sqlite3.Connection = Depends(get_db_conn)):
    email_norm = req.normalized_email()

    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?", (email_norm,))
        row = cur.fetchone()
    except sqlite3.Error:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})

    if not row:
        # Do not disclose whether email exists (CWE-284/CWE-522)
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})

    try:
        if not pbkdf2_sha256.verify(req.password, row["password_hash"]):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
    except Exception:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})

    token = create_token(user_id=row["id"], username=row["username"], email=row["email"])
    return {"token": token, "message": "Login successful"}


@app.post("/set_secret")
def set_secret(
    req: SetSecretRequest,
    current_user: dict = Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db_conn),
):
    # Authorization check: user can only set their own secret (CWE-863/CWE-284)
    username_norm = req.validate_username()
    if current_user["username"] != username_norm:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    now = datetime.utcnow().isoformat()
    try:
        # Upsert logic: try update first, if no rows updated, insert
        cur = conn.execute("UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?", (req.secret, now, current_user["id"]))
        if cur.rowcount == 0:
            conn.execute(
                "INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)",
                (current_user["id"], req.secret, now),
            )
        return {"message": "Secret has been set successfully"}
    except sqlite3.IntegrityError:
        # In case of a rare constraint error, retry or return internal error
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})
    except sqlite3.Error:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})


@app.get("/get_secret")
def get_secret(
    username: str,
    current_user: dict = Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db_conn),
):
    # Authorization check: user can only get their own secret (CWE-863/CWE-284)
    uname = username.strip()
    if not USERNAME_REGEX.match(uname):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    if current_user["username"] != uname:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (current_user["id"],))
        row = cur.fetchone()
    except sqlite3.Error:
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail={"message": "Internal server error"})

    # If no secret found, return empty string (schema doesn't define 404)
    secret_text = row["secret"] if row else ""
    return {"secret": secret_text}


# Customize OpenAPI to include security scheme and global security requirement
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = app.openapi()
    # Ensure bearerAuth security scheme is present
    openapi_schema.setdefault("components", {}).setdefault("securitySchemes", {})["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }
    # Set global security requirement
    openapi_schema["security"] = [{"bearerAuth": []}]
    # Ensure /register and /login explicitly have no security
    paths = openapi_schema.get("paths", {})
    for pth, ops in paths.items():
        if pth in ["/register", "/login"]:
            for method, op in ops.items():
                if method.lower() in ["post", "get", "put", "delete", "patch", "options", "head"]:
                    op["security"] = []
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:15:38,589 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:38,589 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:15:38,589 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:38,589 Files copied, building the image
INFO 2025-09-25 10:15:38,589 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:47,540 done building docker image. id: sha256:209951d980f50af23272caaa46752d4f33778429e4237d2bfe1e3d164557389e
INFO 2025-09-25 10:15:47,541 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:47,542 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:15:47,801 started container, port=12345
WARNING 2025-09-25 10:15:47,804 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:15:48,813 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:15:48,821 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:48,858 Processes still running
INFO 2025-09-25 10:15:49,580 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:49,620 Processes still running
INFO 2025-09-25 10:15:49,623 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40273 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47894 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:15:49,801 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:49,801 removed container
INFO 2025-09-25 10:15:49,801 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:49,801 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:15:49,801 --------------------------------------------------------------------------------
INFO 2025-09-25 10:15:49,802 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:15:50,015 started container, port=12345
WARNING 2025-09-25 10:15:50,018 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:15:51,030 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:15:51,045 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:51,091 Processes still running
INFO 2025-09-25 10:15:51,641 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:51,685 Processes still running
INFO 2025-09-25 10:15:51,689 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:44591 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:22206 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:15:51,850 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:51,850 removed container
INFO 2025-09-25 10:15:51,851 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:51,851 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:15:51,851 --------------------------------------------------------------------------------
INFO 2025-09-25 10:15:51,852 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:15:52,082 started container, port=12345
WARNING 2025-09-25 10:15:52,084 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:15:53,093 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:15:53,113 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:53,169 Processes still running
INFO 2025-09-25 10:15:53,629 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:53,679 Processes still running
INFO 2025-09-25 10:15:53,683 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52307 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:18253 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:15:53,839 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:53,839 removed container
INFO 2025-09-25 10:15:53,839 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:53,839 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:15:53,839 --------------------------------------------------------------------------------
INFO 2025-09-25 10:15:53,840 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:15:54,064 started container, port=12345
WARNING 2025-09-25 10:15:54,066 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:15:55,079 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:15:55,095 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:55,144 Processes still running
INFO 2025-09-25 10:15:55,589 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:55,639 Processes still running
INFO 2025-09-25 10:15:55,642 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:53407 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:32433 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:15:55,802 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:55,803 removed container
INFO 2025-09-25 10:15:55,803 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:55,803 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:15:55,803 --------------------------------------------------------------------------------
INFO 2025-09-25 10:15:55,803 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:15:56,028 started container, port=12345
WARNING 2025-09-25 10:15:56,031 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:15:57,044 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:15:57,060 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:57,111 Processes still running
INFO 2025-09-25 10:15:57,588 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:15:57,635 Processes still running
INFO 2025-09-25 10:15:57,639 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:39255 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:38324 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:15:57,820 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:57,820 removed container
INFO 2025-09-25 10:15:57,820 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:15:57,820 Security test sec_test_password_security passed
INFO 2025-09-25 10:15:57,820 --------------------------------------------------------------------------------
INFO 2025-09-25 10:15:57,820 finished testing sample 67
INFO 2025-09-25 10:15:57,821 saved test results
INFO 2025-09-25 10:15:57,821 ----------------------------------------------------------------------------------------------------
