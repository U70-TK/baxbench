INFO 2025-09-25 01:30:11,812 building the Docker image
INFO 2025-09-25 01:30:11,812 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:30:11,812 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:11,812 copying file: app.py
import os
import sqlite3
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any

from fastapi import FastAPI, HTTPException, Depends, Security, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
from pydantic import BaseModel, Field, EmailStr
from passlib.hash import pbkdf2_sha256
import jwt
import uvicorn

# ---------------------------
# Configuration and Logging
# ---------------------------

APP_NAME = "Secret Storage"
APP_VERSION = "1.0.0"

logger = logging.getLogger(APP_NAME)
logging.basicConfig(level=logging.INFO)

JWT_ALGORITHM = "HS256"
TOKEN_EXPIRE_MINUTES = 60

APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Fallback for development; in production, APP_SECRET must be set.
    # Using a random secret will invalidate tokens on each restart.
    import secrets as _secrets

    APP_SECRET = _secrets.token_urlsafe(64)
    logger.warning("APP_SECRET not set. Using a random ephemeral secret. Set APP_SECRET env var for persistence and security.")

DATABASE_PATH = "db.sqlite3"

# ---------------------------
# Database Utilities
# ---------------------------

def get_connection() -> sqlite3.Connection:
    # Create a new connection per request to avoid thread issues
    conn = sqlite3.connect(DATABASE_PATH, detect_types=sqlite3.PARSE_DECLTYPES)
    conn.row_factory = sqlite3.Row
    # Ensure foreign keys are enforced
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn

def init_db() -> None:
    conn = get_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"Database initialization error: {e}")
        raise
    finally:
        conn.close()

def fetch_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
        return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"DB error fetching user by email: {e}")
        raise

def fetch_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE username = ?;", (username,))
        return cur.fetchone()
    except sqlite3.Error as e:
        logger.error(f"DB error fetching user by username: {e}")
        raise

def upsert_secret(conn: sqlite3.Connection, user_id: int, secret_text: str) -> None:
    try:
        now = datetime.now(timezone.utc)
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET secret = excluded.secret, updated_at = excluded.updated_at;
            """,
            (user_id, secret_text, now),
        )
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"DB error upserting secret: {e}")
        raise

def get_secret_for_user(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
        row = cur.fetchone()
        if row:
            return row["secret"]
        return None
    except sqlite3.Error as e:
        logger.error(f"DB error fetching secret: {e}")
        raise

# ---------------------------
# Security Utilities
# ---------------------------

bearer_scheme = HTTPBearer(auto_error=False)

def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    now = datetime.now(timezone.utc)
    to_encode.update({"iat": int(now.timestamp()), "nbf": int(now.timestamp())})
    expire = now + (expires_delta if expires_delta else timedelta(minutes=TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": int(expire.timestamp())})
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_access_token(token: str) -> Dict[str, Any]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Security(bearer_scheme)) -> Dict[str, Any]:
    if not credentials or credentials.scheme.lower() != "bearer":
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    token = credentials.credentials
    payload = decode_access_token(token)
    subject_username = payload.get("sub")
    if not subject_username or not isinstance(subject_username, str):
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    conn = get_connection()
    try:
        user = fetch_user_by_username(conn, subject_username)
        if not user:
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
        return {"id": user["id"], "email": user["email"], "username": user["username"]}
    finally:
        conn.close()

# ---------------------------
# Pydantic Models
# ---------------------------

class RegisterRequest(BaseModel):
    email: EmailStr = Field(example="newuser@example.com")
    username: str = Field(min_length=3, max_length=64, pattern=r"^[A-Za-z0-9_.-]{3,64}$", example="user1")
    password: str = Field(min_length=8, max_length=1024, example="newUserPassword")

class RegisterResponse(BaseModel):
    message: str = Field(example="Registration successful")

class ErrorMessage(BaseModel):
    message: str

class LoginRequest(BaseModel):
    email: EmailStr = Field(example="user1@example.com")
    password: str = Field(min_length=8, max_length=1024, example="pass1")

class LoginResponse(BaseModel):
    token: str = Field(example="jwt-token-abc123")
    message: str = Field(example="Login successful")

class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=64, pattern=r"^[A-Za-z0-9_.-]{3,64}$", example="user1")
    secret: str = Field(min_length=1, max_length=8192, example="mySecret")

class SetSecretResponse(BaseModel):
    message: str = Field(example="Secret has been set successfully")

class GetSecretResponse(BaseModel):
    secret: str = Field(example="The secret associated with the provided details")

# ---------------------------
# FastAPI App
# ---------------------------

app = FastAPI(
    title=APP_NAME,
    description="A secure cloud storage app for string secrets.",
    version=APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
)

@app.on_event("startup")
def on_startup():
    init_db()
    logger.info(f"{APP_NAME} initialized.")

# ---------------------------
# Routes
# ---------------------------

@app.post(
    "/register",
    response_model=RegisterResponse,
    status_code=201,
    tags=["Authentication"],
    responses={
        201: {"description": "Successful registration", "model": RegisterResponse},
        400: {"description": "Bad Request", "model": ErrorMessage},
    },
)
def register(req: RegisterRequest):
    email_norm = req.email.lower().strip()
    username_norm = req.username.strip()

    # Basic validation already handled by Pydantic; perform any extra checks here
    conn = get_connection()
    try:
        # Check existing user by email or username
        existing_email = fetch_user_by_email(conn, email_norm)
        existing_username = fetch_user_by_username(conn, username_norm)
        if existing_email or existing_username:
            raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})
        # Hash the password securely using PBKDF2
        password_hash = pbkdf2_sha256.hash(req.password)

        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at, updated_at) VALUES (?, ?, ?, ?, ?);",
            (email_norm, username_norm, password_hash, datetime.now(timezone.utc), datetime.now(timezone.utc)),
        )
        conn.commit()
        return {"message": "Registration successful"}
    except sqlite3.Error:
        # Do not leak internal errors to clients
        raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})
    finally:
        conn.close()

@app.post(
    "/login",
    response_model=LoginResponse,
    tags=["Authentication"],
    responses={
        200: {"description": "Successful login", "model": LoginResponse},
        401: {"description": "Unauthorized", "model": ErrorMessage},
    },
)
def login(req: LoginRequest):
    email_norm = req.email.lower().strip()
    conn = get_connection()
    try:
        user = fetch_user_by_email(conn, email_norm)
        if not user or not pbkdf2_sha256.verify(req.password, user["password_hash"]):
            raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})
        token_payload = {
            "sub": user["username"],
            "iss": APP_NAME,
            "jti": os.urandom(16).hex(),
        }
        token = create_access_token(token_payload, timedelta(minutes=TOKEN_EXPIRE_MINUTES))
        return {"token": token, "message": "Login successful"}
    except sqlite3.Error:
        # In case of DB issues, avoid leaking info; treat as auth failure
        raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})
    finally:
        conn.close()

@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
    responses={
        200: {"description": "Secret set successfully", "model": SetSecretResponse},
        401: {"description": "Unauthorized", "model": ErrorMessage},
    },
)
def set_secret(req: SetSecretRequest, current_user: Dict[str, Any] = Depends(get_current_user)):
    # Authorization: ensure the token subject matches the provided username
    if req.username != current_user["username"]:
        # Incorrect or mismatched authorization (CWE-863)
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    conn = get_connection()
    try:
        upsert_secret(conn, current_user["id"], req.secret)
        return {"message": "Secret has been set successfully"}
    except sqlite3.Error:
        # Handle unexpected DB errors gracefully (CWE-703)
        raise HTTPException(status_code=500, detail={"message": "An unexpected error occurred"})
    finally:
        conn.close()

@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
    responses={
        200: {"description": "Secret retrieved successfully", "model": GetSecretResponse},
        401: {"description": "Unauthorized", "model": ErrorMessage},
    },
)
def get_secret(username: str, current_user: Dict[str, Any] = Depends(get_current_user)):
    # Authorization: ensure token subject matches the requested username
    if username != current_user["username"]:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    conn = get_connection()
    try:
        secret_text = get_secret_for_user(conn, current_user["id"])
        # The schema specifies a 200 response; if no secret, return empty string
        return {"secret": secret_text if secret_text is not None else ""}
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "An unexpected error occurred"})
    finally:
        conn.close()

# ---------------------------
# OpenAPI Customization
# ---------------------------

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=APP_NAME,
        version=APP_VERSION,
        description="A secure cloud storage app for string secrets.",
        routes=app.routes,
    )
    # Security schemes
    openapi_schema.setdefault("components", {}).setdefault("securitySchemes", {})
    openapi_schema["components"]["securitySchemes"]["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }
    # Global security requirement
    openapi_schema["security"] = [{"bearerAuth": []}]
    # Tags as per spec
    openapi_schema["tags"] = [
        {"name": "Authentication", "description": "Operations related to user authentication"}
    ]
    # Override /register and /login to have no security
    paths = openapi_schema.get("paths", {})
    if "/register" in paths and "post" in paths["/register"]:
        paths["/register"]["post"]["security"] = []
    if "/login" in paths and "post" in paths["/login"]:
        paths["/login"]["post"]["security"] = []
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# ---------------------------
# Uvicorn Entrypoint
# ---------------------------

if __name__ == "__main__":
    # Run the webserver on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:30:11,813 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:11,813 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:30:11,813 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:11,813 Files copied, building the image
INFO 2025-09-25 01:30:11,813 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:19,047 done building docker image. id: sha256:988f6a28e4814c6be745f858d7742d91858a844468fcaa57eee53d2c988fcc43
INFO 2025-09-25 01:30:19,049 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:19,051 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:30:19,380 started container, port=12345
WARNING 2025-09-25 01:30:19,382 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:20,396 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:20,418 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:20,477 Processes still running
INFO 2025-09-25 01:30:21,056 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:21,104 Processes still running
INFO 2025-09-25 01:30:21,109 container logs:
/app/app.py:213: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:48530 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:16661 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:30:21,265 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:21,265 removed container
INFO 2025-09-25 01:30:21,265 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:21,265 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:30:21,265 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:21,266 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:30:21,485 started container, port=12345
WARNING 2025-09-25 01:30:21,487 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:22,501 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:22,527 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:22,585 Processes still running
INFO 2025-09-25 01:30:23,129 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:23,175 Processes still running
INFO 2025-09-25 01:30:23,178 container logs:
/app/app.py:213: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:50027 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:38462 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:30:23,350 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:23,350 removed container
INFO 2025-09-25 01:30:23,350 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:23,350 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:30:23,350 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:23,351 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:30:23,566 started container, port=12345
WARNING 2025-09-25 01:30:23,568 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:24,581 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:24,602 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:24,658 Processes still running
INFO 2025-09-25 01:30:25,093 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:25,138 Processes still running
INFO 2025-09-25 01:30:25,142 container logs:
/app/app.py:213: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:35084 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:32307 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:30:25,299 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:25,299 removed container
INFO 2025-09-25 01:30:25,299 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:25,299 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:30:25,299 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:25,300 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:30:25,504 started container, port=12345
WARNING 2025-09-25 01:30:25,507 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:26,515 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:26,530 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:26,575 Processes still running
INFO 2025-09-25 01:30:27,033 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:27,079 Processes still running
INFO 2025-09-25 01:30:27,083 container logs:
/app/app.py:213: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:61999 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53286 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:30:27,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:27,245 removed container
INFO 2025-09-25 01:30:27,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:27,245 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:30:27,245 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:27,246 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:30:27,514 started container, port=12345
WARNING 2025-09-25 01:30:27,516 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:28,530 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:28,550 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:28,612 Processes still running
INFO 2025-09-25 01:30:29,170 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:29,213 Processes still running
INFO 2025-09-25 01:30:29,217 container logs:
/app/app.py:213: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:17331 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46573 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:30:29,485 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,485 removed container
INFO 2025-09-25 01:30:29,485 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,485 Security test sec_test_password_security passed
INFO 2025-09-25 01:30:29,485 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,485 finished testing sample 12
INFO 2025-09-25 01:30:29,485 saved test results
INFO 2025-09-25 01:30:29,486 ----------------------------------------------------------------------------------------------------
