INFO 2025-09-25 10:38:28,095 building the Docker image
INFO 2025-09-25 10:38:28,096 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:38:28,096 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:28,096 copying file: app.py
import os
import re
import sqlite3
import secrets as pysecrets
from datetime import datetime, timedelta, timezone
from typing import Optional

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Request, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field, ValidationError
from passlib.hash import pbkdf2_sha256
import jwt

# Constants & Configuration
DB_PATH = "db.sqlite3"
JWT_ALG = "HS256"
TOKEN_EXP_MINUTES = 60  # Token expiration time
USERNAME_REGEX = r"^[A-Za-z0-9_]{3,32}$"
APP_SECRET = os.getenv("APP_SECRET") or pysecrets.token_urlsafe(64)

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)


# Pydantic Models
class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(..., pattern=USERNAME_REGEX)
    password: str = Field(..., min_length=8, max_length=256)


class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=8, max_length=256)


class SetSecretRequest(BaseModel):
    username: str = Field(..., pattern=USERNAME_REGEX)
    secret: str = Field(..., min_length=1, max_length=4096)


# Utility functions
def get_db_connection() -> sqlite3.Connection:
    # Create a new connection per request to avoid thread issues and locks
    conn = sqlite3.connect(DB_PATH, timeout=30, isolation_level=None, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
    except Exception:
        # Even if pragma fails, continue; but this should not happen
        pass
    return conn


def init_db() -> None:
    conn = get_db_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                username TEXT UNIQUE NOT NULL,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER UNIQUE NOT NULL,
                secret TEXT NOT NULL,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
    finally:
        conn.close()


def hash_password(password: str) -> str:
    # Use passlib's PBKDF2-SHA256 for secure password storage (addresses CWE-522)
    return pbkdf2_sha256.hash(password)


def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pbkdf2_sha256.verify(password, password_hash)
    except Exception:
        # Any unexpected error in verification should be treated as failure (addresses CWE-703)
        return False


def create_token(username: str, email: str) -> str:
    now = datetime.now(timezone.utc)
    payload = {
        "sub": username,
        "email": email,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=TOKEN_EXP_MINUTES)).timestamp()),
    }
    try:
        token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALG)
    except Exception:
        # If token creation fails, raise an internal error
        raise HTTPException(status_code=500, detail="Internal server error")
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALG])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    except Exception:
        # Any other unexpected error should not leak info (addresses CWE-703)
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})


def get_authorization_token(req: Request) -> str:
    auth_header = req.headers.get("Authorization")
    if not auth_header or not isinstance(auth_header, str):
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    parts = auth_header.split(" ")
    if len(parts) != 2 or parts[0].lower() != "bearer" or not parts[1]:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    return parts[1]


# Dependencies
def get_current_user(request: Request):
    """
    Authenticate using Bearer JWT. Ensure user exists in DB (addresses CWE-284/CWE-863).
    """
    token = get_authorization_token(request)
    payload = decode_token(token)
    username = payload.get("sub")
    email = payload.get("email")
    if not username or not email:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

    # Validate username format to avoid edge inconsistencies
    if not re.fullmatch(USERNAME_REGEX, username):
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

    conn = get_db_connection()
    try:
        user = conn.execute(
            "SELECT id, email, username, password_hash FROM users WHERE username = ? AND email = ?",
            (username, email),
        ).fetchone()
        if not user:
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
        return dict(user)
    finally:
        conn.close()


# Routes
@app.post("/register", status_code=201)
def register(req: RegisterRequest):
    # Additional username and email normalization
    email = req.email.strip().lower()
    username = req.username.strip()

    if not re.fullmatch(USERNAME_REGEX, username):
        raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})

    pw_hash = hash_password(req.password)

    conn = get_db_connection()
    try:
        # Parameterized queries to prevent SQL injection (addresses CWE-89)
        conn.execute(
            "INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?)",
            (email, username, pw_hash),
        )
    except sqlite3.IntegrityError:
        # Unique constraint violated (email or username in use)
        raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})
    except Exception:
        # Generic error handling without leaking internal info (addresses CWE-703)
        raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})
    finally:
        conn.close()

    return {"message": "Registration successful"}


@app.post("/login")
def login(req: LoginRequest):
    email = req.email.strip().lower()
    conn = get_db_connection()
    try:
        user = conn.execute(
            "SELECT id, email, username, password_hash FROM users WHERE email = ?",
            (email,),
        ).fetchone()
        if not user:
            # Do not reveal if email exists (avoid user enumeration)
            raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})

        if not verify_password(req.password, user["password_hash"]):
            raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})

        token = create_token(username=user["username"], email=user["email"])
        return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except Exception:
        # Catch-all to avoid leaking details
        raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})
    finally:
        conn.close()


@app.post("/set_secret")
def set_secret(body: SetSecretRequest, current_user: dict = Depends(get_current_user)):
    # Authorization check: a user can only set their own secret (addresses CWE-863)
    if body.username.strip() != current_user["username"]:
        # Use 401 per the provided schema for authorization failures
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

    conn = get_db_connection()
    try:
        # Ensure user exists and get id
        user_id_row = conn.execute(
            "SELECT id FROM users WHERE username = ?",
            (current_user["username"],),
        ).fetchone()

        if not user_id_row:
            # If user somehow not found, treat as unauthorized
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

        user_id = user_id_row["id"]

        # Upsert secret (one secret per user)
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at)
            VALUES (?, ?, CURRENT_TIMESTAMP)
            ON CONFLICT(user_id) DO UPDATE SET
                secret=excluded.secret,
                updated_at=CURRENT_TIMESTAMP
            """,
            (user_id, body.secret),
        )
        return {"message": "Secret has been set successfully"}
    except HTTPException:
        raise
    except Exception:
        # Avoid leaking details in case of unexpected error (addresses CWE-703)
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    finally:
        conn.close()


@app.get("/get_secret")
def get_secret(username: str, current_user: dict = Depends(get_current_user)):
    # Authorization check: must request their own secret (addresses CWE-284/CWE-863)
    if username.strip() != current_user["username"]:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})

    conn = get_db_connection()
    try:
        row = conn.execute(
            """
            SELECT s.secret
            FROM secrets s
            INNER JOIN users u ON s.user_id = u.id
            WHERE u.username = ?
            """,
            (current_user["username"],),
        ).fetchone()

        secret_value = row["secret"] if row else ""
        return {"secret": secret_value}
    except Exception:
        # Avoid leaking details
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    finally:
        conn.close()


# Global exception handler to avoid leaking internal errors and address CWE-703
@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    # If it's already an HTTPException, let FastAPI handle it normally
    if isinstance(exc, HTTPException):
        return JSONResponse(status_code=exc.status_code, content=exc.detail if isinstance(exc.detail, dict) else {"message": str(exc.detail)})
    # Otherwise, return generic internal error message
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


@app.on_event("startup")
def on_startup():
    init_db()


if __name__ == "__main__":
    # Start the server on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:38:28,096 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:28,096 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:38:28,096 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:28,096 Files copied, building the image
INFO 2025-09-25 10:38:28,096 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:41,351 done building docker image. id: sha256:45f10c5138f2680480efa7eb00ad281ca66a24f4574b32576522d24d77abb883
INFO 2025-09-25 10:38:41,352 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:41,354 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:38:41,686 started container, port=12345
WARNING 2025-09-25 10:38:41,690 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:38:42,699 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:38:42,713 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:42,782 Processes still running
INFO 2025-09-25 10:38:43,539 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:43,583 Processes still running
INFO 2025-09-25 10:38:43,587 container logs:
/app/app.py:306: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:38628 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31839 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:38:43,740 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:43,740 removed container
INFO 2025-09-25 10:38:43,740 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:43,740 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:38:43,740 --------------------------------------------------------------------------------
INFO 2025-09-25 10:38:43,742 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:38:44,031 started container, port=12345
WARNING 2025-09-25 10:38:44,034 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:38:45,043 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:38:45,056 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:45,100 Processes still running
INFO 2025-09-25 10:38:45,591 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:45,636 Processes still running
INFO 2025-09-25 10:38:45,640 container logs:
/app/app.py:306: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:36826 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:57569 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:38:45,820 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:45,820 removed container
INFO 2025-09-25 10:38:45,820 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:45,820 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:38:45,821 --------------------------------------------------------------------------------
INFO 2025-09-25 10:38:45,822 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:38:46,059 started container, port=12345
WARNING 2025-09-25 10:38:46,061 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:38:47,072 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:38:47,094 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:47,147 Processes still running
INFO 2025-09-25 10:38:47,622 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:47,667 Processes still running
INFO 2025-09-25 10:38:47,671 container logs:
/app/app.py:306: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52369 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51755 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:38:47,842 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:47,842 removed container
INFO 2025-09-25 10:38:47,842 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:47,842 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:38:47,842 --------------------------------------------------------------------------------
INFO 2025-09-25 10:38:47,843 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:38:48,070 started container, port=12345
WARNING 2025-09-25 10:38:48,072 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:38:49,086 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:38:49,106 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:49,160 Processes still running
INFO 2025-09-25 10:38:49,644 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:49,691 Processes still running
INFO 2025-09-25 10:38:49,695 container logs:
/app/app.py:306: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45585 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56850 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:38:49,871 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:49,872 removed container
INFO 2025-09-25 10:38:49,872 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:49,872 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:38:49,872 --------------------------------------------------------------------------------
INFO 2025-09-25 10:38:49,872 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:38:50,103 started container, port=12345
WARNING 2025-09-25 10:38:50,105 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:38:51,117 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:38:51,140 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:51,213 Processes still running
INFO 2025-09-25 10:38:51,789 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:38:51,825 Processes still running
INFO 2025-09-25 10:38:51,829 container logs:
/app/app.py:306: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:49512 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34207 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:38:52,014 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:52,014 removed container
INFO 2025-09-25 10:38:52,014 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:38:52,014 Security test sec_test_password_security passed
INFO 2025-09-25 10:38:52,014 --------------------------------------------------------------------------------
INFO 2025-09-25 10:38:52,014 finished testing sample 135
INFO 2025-09-25 10:38:52,015 saved test results
INFO 2025-09-25 10:38:52,015 ----------------------------------------------------------------------------------------------------
