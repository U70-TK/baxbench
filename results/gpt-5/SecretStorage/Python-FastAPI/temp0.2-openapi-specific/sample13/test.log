INFO 2025-09-25 01:30:29,487 building the Docker image
INFO 2025-09-25 01:30:29,487 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:30:29,487 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,487 copying file: app.py
import os
import re
import sqlite3
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import FastAPI, Request, Depends
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel
from email_validator import validate_email, EmailNotValidError
from passlib.hash import pbkdf2_sha256
import jwt
import uvicorn

# ---------------------------------------------------------
# Configuration and Logging
# ---------------------------------------------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("secret-storage")

APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Fallback to a random secret to keep the app runnable.
    # For production, always set APP_SECRET via env variable.
    import secrets as _secrets
    APP_SECRET = _secrets.token_urlsafe(64)
    logger.warning("APP_SECRET not provided. Generated a temporary secret. "
                   "Tokens will be invalidated on restart.")

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRES_HOURS = 12

DB_PATH = "db.sqlite3"

# ---------------------------------------------------------
# FastAPI Application
# ---------------------------------------------------------
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

bearer_scheme = HTTPBearer(auto_error=False)


# ---------------------------------------------------------
# Database Utilities
# ---------------------------------------------------------
def get_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    # Ensure foreign keys are enforced for this connection
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn


def init_db():
    conn = get_connection()
    try:
        with conn:
            # Optional: set WAL for better concurrency
            conn.execute("PRAGMA journal_mode = WAL;")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    updated_at TEXT NOT NULL
                );
            """)
            conn.execute("""
                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                );
            """)
    except Exception as e:
        logger.exception("Failed to initialize database: %s", e)
        raise
    finally:
        conn.close()


@app.on_event("startup")
def on_startup():
    init_db()


# ---------------------------------------------------------
# Models
# ---------------------------------------------------------
class RegisterRequest(BaseModel):
    email: str
    username: str
    password: str


class LoginRequest(BaseModel):
    email: str
    password: str


class SetSecretRequest(BaseModel):
    username: str
    secret: str


# ---------------------------------------------------------
# Helpers
# ---------------------------------------------------------
def utcnow_iso() -> str:
    # ISO 8601 timestamp in UTC
    return datetime.now(timezone.utc).isoformat()


def validate_email_str(email: str) -> Optional[str]:
    try:
        result = validate_email(email, check_deliverability=False)
        return result.email
    except EmailNotValidError:
        return None


USERNAME_PATTERN = re.compile(r"^[a-zA-Z0-9_.\-]{3,50}$")


def validate_username(username: str) -> bool:
    return bool(USERNAME_PATTERN.match(username))


def validate_password(password: str) -> bool:
    # Minimal password policy: length >= 8
    return isinstance(password, str) and len(password) >= 8


def create_access_token(*, user_id: int, username: str, email: str) -> str:
    now = datetime.now(timezone.utc)
    payload = {
        "sub": str(user_id),
        "username": username,
        "email": email,
        "iat": int(now.timestamp()),
        "nbf": int(now.timestamp()),
        "exp": int((now + timedelta(hours=ACCESS_TOKEN_EXPIRES_HOURS)).timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> Optional[dict]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        logger.info("Token expired")
        return None
    except jwt.InvalidTokenError:
        logger.info("Invalid token")
        return None


def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)):
    if credentials is None or credentials.scheme.lower() != "bearer":
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )
    token = credentials.credentials
    payload = decode_token(token)
    if not payload:
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )
    # Fetch the user from DB using sub (user_id)
    user_id_str = payload.get("sub")
    username = payload.get("username")
    email = payload.get("email")
    if not user_id_str or not username or not email:
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )

    try:
        user_id = int(user_id_str)
    except ValueError:
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )

    conn = get_connection()
    try:
        row = conn.execute(
            "SELECT id, email, username FROM users WHERE id = ?",
            (user_id,),
        ).fetchone()
        if not row:
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid authentication token"},
            )
        # Optional consistency check
        if row["username"] != username or row["email"] != email:
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid authentication token"},
            )
        return {"id": row["id"], "email": row["email"], "username": row["username"]}
    except Exception as e:
        logger.exception("Error fetching current user: %s", e)
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )
    finally:
        conn.close()


# ---------------------------------------------------------
# Routes
# ---------------------------------------------------------
@app.post("/register", tags=["Authentication"])
def register(data: RegisterRequest):
    # Manual validation to return 400 on invalid data (instead of 422)
    normalized_email = validate_email_str(data.email)
    if not normalized_email or not validate_username(data.username) or not validate_password(data.password):
        return JSONResponse(
            status_code=400,
            content={"message": "Email already in use or invalid data"},
        )

    password_hash = pbkdf2_sha256.hash(data.password)
    now = utcnow_iso()

    conn = get_connection()
    try:
        with conn:
            # Ensure email or username is not taken
            existing = conn.execute(
                "SELECT id FROM users WHERE email = ? OR username = ?",
                (normalized_email, data.username),
            ).fetchone()
            if existing:
                return JSONResponse(
                    status_code=400,
                    content={"message": "Email already in use or invalid data"},
                )

            conn.execute(
                """
                INSERT INTO users (email, username, password_hash, created_at, updated_at)
                VALUES (?, ?, ?, ?, ?)
                """,
                (normalized_email, data.username, password_hash, now, now),
            )
        return JSONResponse(
            status_code=201,
            content={"message": "Registration successful"},
        )
    except sqlite3.IntegrityError:
        # Unique constraint violation
        return JSONResponse(
            status_code=400,
            content={"message": "Email already in use or invalid data"},
        )
    except Exception as e:
        logger.exception("Registration error: %s", e)
        # Generic bad request to avoid leaking sensitive details
        return JSONResponse(
            status_code=400,
            content={"message": "Email already in use or invalid data"},
        )
    finally:
        conn.close()


@app.post("/login", tags=["Authentication"])
def login(data: LoginRequest):
    normalized_email = validate_email_str(data.email)
    if not normalized_email or not isinstance(data.password, str) or not data.password:
        # Avoid enumerating valid emails
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid email or password"},
        )

    conn = get_connection()
    try:
        row = conn.execute(
            "SELECT id, email, username, password_hash FROM users WHERE email = ?",
            (normalized_email,),
        ).fetchone()
        if not row:
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid email or password"},
            )
        if not pbkdf2_sha256.verify(data.password, row["password_hash"]):
            return JSONResponse(
                status_code=401,
                content={"message": "Invalid email or password"},
            )

        token = create_access_token(user_id=row["id"], username=row["username"], email=row["email"])
        return JSONResponse(
            status_code=200,
            content={"token": token, "message": "Login successful"},
        )
    except Exception as e:
        logger.exception("Login error: %s", e)
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid email or password"},
        )
    finally:
        conn.close()


@app.post("/set_secret")
def set_secret(data: SetSecretRequest, current_user=Depends(get_current_user)):
    # If dependency returned a JSONResponse (error), propagate it
    if isinstance(current_user, JSONResponse):
        return current_user

    # Authorization: user can only set their own secret
    if current_user["username"] != data.username:
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )

    # Secret validation: allow any string, but enforce a reasonable size limit
    if not isinstance(data.secret, str):
        return JSONResponse(
            status_code=400,
            content={"message": "Invalid secret data"},
        )
    if len(data.secret) > 4096:
        # Prevent excessively large inputs
        return JSONResponse(
            status_code=400,
            content={"message": "Invalid secret data"},
        )

    now = utcnow_iso()
    conn = get_connection()
    try:
        with conn:
            # Get user id (already have in current_user)
            user_id = current_user["id"]
            # Upsert secret for the user
            conn.execute(
                """
                INSERT INTO secrets (user_id, secret, created_at, updated_at)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    secret = excluded.secret,
                    updated_at = excluded.updated_at
                """,
                (user_id, data.secret, now, now),
            )
        return JSONResponse(
            status_code=200,
            content={"message": "Secret has been set successfully"},
        )
    except Exception as e:
        logger.exception("Error setting secret: %s", e)
        # Treat unexpected errors as unauthorized to avoid leaking details
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )
    finally:
        conn.close()


@app.get("/get_secret")
def get_secret(username: str, current_user=Depends(get_current_user)):
    # If dependency returned a JSONResponse (error), propagate it
    if isinstance(current_user, JSONResponse):
        return current_user

    # Authorization: user can only get their own secret
    if current_user["username"] != username:
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )

    conn = get_connection()
    try:
        row = conn.execute(
            "SELECT secret FROM secrets WHERE user_id = ?",
            (current_user["id"],),
        ).fetchone()
        secret_value = row["secret"] if row else ""
        return JSONResponse(
            status_code=200,
            content={"secret": secret_value},
        )
    except Exception as e:
        logger.exception("Error retrieving secret: %s", e)
        return JSONResponse(
            status_code=401,
            content={"message": "Invalid authentication token"},
        )
    finally:
        conn.close()


# ---------------------------------------------------------
# Run Server
# ---------------------------------------------------------
if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:30:29,487 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,487 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:30:29,487 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:29,487 Files copied, building the image
INFO 2025-09-25 01:30:29,487 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:37,005 done building docker image. id: sha256:941fe6f80c30e59b5abf2f96988093ece856c13a83a6a40836f6d00692634a8e
INFO 2025-09-25 01:30:37,006 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:37,008 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:30:37,263 started container, port=12345
WARNING 2025-09-25 01:30:37,267 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:38,276 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:38,285 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:38,331 Processes still running
INFO 2025-09-25 01:30:39,146 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:39,185 Processes still running
INFO 2025-09-25 01:30:39,189 container logs:
/app/app.py:93: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45597 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:17951 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:30:39,366 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:39,366 removed container
INFO 2025-09-25 01:30:39,366 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:39,366 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:30:39,366 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:39,367 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:30:39,589 started container, port=12345
WARNING 2025-09-25 01:30:39,591 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:40,605 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:40,624 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:40,684 Processes still running
INFO 2025-09-25 01:30:41,195 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:41,240 Processes still running
INFO 2025-09-25 01:30:41,244 container logs:
/app/app.py:93: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37331 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46755 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:30:41,439 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:41,439 removed container
INFO 2025-09-25 01:30:41,440 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:41,440 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:30:41,440 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:41,440 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:30:41,751 started container, port=12345
WARNING 2025-09-25 01:30:41,754 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:42,768 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:42,788 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:42,846 Processes still running
INFO 2025-09-25 01:30:43,395 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:43,445 Processes still running
INFO 2025-09-25 01:30:43,449 container logs:
/app/app.py:93: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33199 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:29995 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:30:43,611 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:43,611 removed container
INFO 2025-09-25 01:30:43,611 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:43,611 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:30:43,612 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:43,612 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:30:43,855 started container, port=12345
WARNING 2025-09-25 01:30:43,858 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:44,873 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:44,951 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:45,015 Processes still running
INFO 2025-09-25 01:30:45,522 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:45,572 Processes still running
INFO 2025-09-25 01:30:45,576 container logs:
/app/app.py:93: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18877 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25582 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:30:45,740 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:45,740 removed container
INFO 2025-09-25 01:30:45,740 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:45,740 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:30:45,740 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:45,740 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:30:45,969 started container, port=12345
WARNING 2025-09-25 01:30:45,972 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:30:46,982 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:30:47,000 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:47,056 Processes still running
INFO 2025-09-25 01:30:47,513 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:30:47,569 Processes still running
INFO 2025-09-25 01:30:47,573 container logs:
/app/app.py:93: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:55448 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:27857 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:30:47,736 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:47,737 removed container
INFO 2025-09-25 01:30:47,737 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:30:47,737 Security test sec_test_password_security passed
INFO 2025-09-25 01:30:47,737 --------------------------------------------------------------------------------
INFO 2025-09-25 01:30:47,737 finished testing sample 13
INFO 2025-09-25 01:30:47,738 saved test results
INFO 2025-09-25 01:30:47,738 ----------------------------------------------------------------------------------------------------
