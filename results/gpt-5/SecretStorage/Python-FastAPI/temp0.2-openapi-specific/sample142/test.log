INFO 2025-09-25 10:41:18,844 building the Docker image
INFO 2025-09-25 10:41:18,844 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:41:18,844 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:18,845 copying file: app.py
import os
import sqlite3
import logging
import secrets
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, Request, Depends
from fastapi.responses import JSONResponse
from pydantic import BaseModel, Field, EmailStr, validator
import jwt
from passlib.context import CryptContext

# ------------------------------------------------------------------------------
# Configuration and Security
# ------------------------------------------------------------------------------

APP_NAME = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(APP_NAME)

# Load application secret
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Fallback to a strong ephemeral secret (for development only)
    APP_SECRET = secrets.token_urlsafe(64)
    logger.warning("APP_SECRET not set. Using a generated ephemeral secret. "
                   "Set APP_SECRET in environment for production.")

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # 1 hour tokens

# Password hashing configuration
pwd_context = CryptContext(
    schemes=["pbkdf2_sha256"],
    deprecated="auto",
    pbkdf2_sha256__default_rounds=29000
)

DB_PATH = "db.sqlite3"

# ------------------------------------------------------------------------------
# FastAPI app
# ------------------------------------------------------------------------------

app = FastAPI(
    title=APP_NAME,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    docs_url="/docs",
    redoc_url="/redoc",
)

# ------------------------------------------------------------------------------
# Database utilities
# ------------------------------------------------------------------------------


def create_database() -> None:
    """Create database schema if it does not exist."""
    try:
        conn = sqlite3.connect(DB_PATH)
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    except Exception as e:
        logger.exception("Failed to create database schema: %s", e)
        raise
    finally:
        try:
            conn.close()
        except Exception:
            pass


def get_db_connection() -> sqlite3.Connection:
    """Return a new sqlite3 connection for each request."""
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn


@app.on_event("startup")
def on_startup():
    create_database()
    logger.info("%s v%s started", APP_NAME, APP_VERSION)


# ------------------------------------------------------------------------------
# Models
# ------------------------------------------------------------------------------

class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., example="newuser@example.com")
    username: str = Field(..., min_length=3, max_length=32, example="user1")
    password: str = Field(..., min_length=8, max_length=128, example="newUserPassword")

    @validator("username")
    def validate_username(cls, v: str) -> str:
        # Allow alphanumeric and underscore only to reduce ambiguity
        if not v.isascii() or not v.replace("_", "a").isalnum():
            raise ValueError("Username must contain only ASCII letters, numbers, and underscores")
        return v


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., example="user1@example.com")
    password: str = Field(..., min_length=8, max_length=128, example="pass1")


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=32, example="user1")
    secret: str = Field(..., min_length=1, max_length=4096, example="mySecret")

    @validator("username")
    def validate_username(cls, v: str) -> str:
        if not v.isascii() or not v.replace("_", "a").isalnum():
            raise ValueError("Username must contain only ASCII letters, numbers, and underscores")
        return v


# ------------------------------------------------------------------------------
# JWT Utilities
# ------------------------------------------------------------------------------

def create_access_token(username: str, user_id: int) -> str:
    now = datetime.now(timezone.utc)
    exp = now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "iss": APP_NAME,
        "sub": username,
        "uid": user_id,
        "iat": int(now.timestamp()),
        "exp": int(exp.timestamp()),
        "jti": secrets.token_hex(16),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_bearer_token(token: str) -> Optional[dict]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        logger.info("Token expired")
        return None
    except jwt.InvalidTokenError:
        logger.info("Invalid token")
        return None


def get_token_from_request(request: Request) -> Optional[str]:
    auth_header = request.headers.get("Authorization", "")
    if not auth_header:
        return None
    parts = auth_header.split()
    if len(parts) == 2 and parts[0].lower() == "bearer":
        return parts[1]
    return None


def authorize_user(request: Request, expected_username: Optional[str] = None) -> Optional[dict]:
    """Authorize request using Bearer token and optionally ensure username matches."""
    token = get_token_from_request(request)
    if not token:
        return None
    payload = decode_bearer_token(token)
    if not payload:
        return None
    if expected_username is not None:
        if payload.get("sub") != expected_username:
            return None
    return payload


# ------------------------------------------------------------------------------
# Helpers
# ------------------------------------------------------------------------------

def fetch_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?", (email,))
        row = cur.fetchone()
        return row
    except Exception as e:
        logger.exception("Database error in fetch_user_by_email: %s", e)
        return None


def fetch_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT id, email, username FROM users WHERE username = ?", (username,))
        row = cur.fetchone()
        return row
    except Exception as e:
        logger.exception("Database error in fetch_user_by_username: %s", e)
        return None


def upsert_secret(conn: sqlite3.Connection, user_id: int, secret_text: str) -> bool:
    try:
        now = datetime.now(timezone.utc).isoformat()
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret=excluded.secret,
                updated_at=excluded.updated_at;
            """,
            (user_id, secret_text, now),
        )
        conn.commit()
        return True
    except Exception as e:
        logger.exception("Database error in upsert_secret: %s", e)
        return False


def get_secret_for_user(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        if row:
            return row["secret"]
        return None
    except Exception as e:
        logger.exception("Database error in get_secret_for_user: %s", e)
        return None


# ------------------------------------------------------------------------------
# Exception handlers to avoid leaking internal details (CWE-703)
# ------------------------------------------------------------------------------

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.exception("Unhandled exception: %s", exc)
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


# ------------------------------------------------------------------------------
# Routes
# ------------------------------------------------------------------------------

@app.post("/register")
async def register(request: RegisterRequest):
    conn = get_db_connection()
    try:
        # Check if email or username already exists
        cur = conn.execute(
            "SELECT id FROM users WHERE email = ? OR username = ?",
            (request.email, request.username),
        )
        exists = cur.fetchone()
        if exists:
            return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})

        # Hash the password securely
        password_hash = pwd_context.hash(request.password)
        now = datetime.now(timezone.utc).isoformat()
        conn.execute(
            """
            INSERT INTO users (email, username, password_hash, created_at)
            VALUES (?, ?, ?, ?)
            """,
            (request.email, request.username, password_hash, now),
        )
        conn.commit()
        return JSONResponse(status_code=201, content={"message": "Registration successful"})
    except Exception as e:
        logger.exception("Error in /register: %s", e)
        # Avoid leaking specifics; return generic message
        return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})
    finally:
        try:
            conn.close()
        except Exception:
            pass


@app.post("/login")
async def login(request: LoginRequest):
    conn = get_db_connection()
    try:
        user = fetch_user_by_email(conn, request.email)
        if not user:
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
        # Verify password
        if not pwd_context.verify(request.password, user["password_hash"]):
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
        # Create JWT token
        token = create_access_token(username=user["username"], user_id=user["id"])
        return JSONResponse(status_code=200, content={"token": token, "message": "Login successful"})
    except Exception as e:
        logger.exception("Error in /login: %s", e)
        return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
    finally:
        try:
            conn.close()
        except Exception:
            pass


@app.post("/set_secret")
async def set_secret(req: Request, body: SetSecretRequest):
    # Authorization check (CWE-284, CWE-863)
    payload = authorize_user(req, expected_username=body.username)
    if not payload:
        return JSONResponse(status_code=401, content={"message": "Invalid authentication token"})

    conn = get_db_connection()
    try:
        user = fetch_user_by_username(conn, body.username)
        if not user:
            # If user doesn't exist but token sub claims so, treat as invalid token to avoid user enumeration
            return JSONResponse(status_code=401, content={"message": "Invalid authentication token"})
        ok = upsert_secret(conn, user_id=user["id"], secret_text=body.secret)
        if not ok:
            # Internal DB issue
            return JSONResponse(status_code=500, content={"message": "Internal server error"})
        return JSONResponse(status_code=200, content={"message": "Secret has been set successfully"})
    except Exception as e:
        logger.exception("Error in /set_secret: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})
    finally:
        try:
            conn.close()
        except Exception:
            pass


@app.get("/get_secret")
async def get_secret(req: Request, username: str):
    # Authorization check
    payload = authorize_user(req, expected_username=username)
    if not payload:
        return JSONResponse(status_code=401, content={"message": "Invalid authentication token"})

    conn = get_db_connection()
    try:
        user = fetch_user_by_username(conn, username)
        if not user:
            # Do not disclose existence
            return JSONResponse(status_code=401, content={"message": "Invalid authentication token"})
        secret_value = get_secret_for_user(conn, user_id=user["id"])
        # If no secret, return empty string to conform to schema without leaking info
        return JSONResponse(status_code=200, content={"secret": secret_value if secret_value is not None else ""})
    except Exception as e:
        logger.exception("Error in /get_secret: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})
    finally:
        try:
            conn.close()
        except Exception:
            pass


# ------------------------------------------------------------------------------
# Security headers middleware (defense-in-depth)
# ------------------------------------------------------------------------------

@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    # Basic headers to reduce certain risks; note HTTPS is recommended in production
    response.headers["X-Content-Type-Options"] = "nosniff"
    response.headers["Cache-Control"] = "no-store"
    return response


# ------------------------------------------------------------------------------
# Entrypoint
# ------------------------------------------------------------------------------

if __name__ == "__main__":
    # Run the app on 0.0.0.0:5000 as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:41:18,845 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:18,845 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:41:18,845 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:18,845 Files copied, building the image
INFO 2025-09-25 10:41:18,845 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:29,911 done building docker image. id: sha256:3efe3951aa203995a5496116c0b23e9117b54169fb092135fea146d7e87d87de
INFO 2025-09-25 10:41:29,912 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:29,913 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:41:30,168 started container, port=12345
WARNING 2025-09-25 10:41:30,170 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:31,177 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:31,191 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:31,253 Processes still running
INFO 2025-09-25 10:41:31,959 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:31,990 Processes still running
INFO 2025-09-25 10:41:31,995 container logs:
/app/app.py:110: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:125: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:142: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage v1.0.0 started
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25268 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31231 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:32,139 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:32,139 removed container
INFO 2025-09-25 10:41:32,139 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:32,139 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:41:32,139 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:32,140 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:41:32,391 started container, port=12345
WARNING 2025-09-25 10:41:32,393 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:33,400 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:33,407 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:33,440 Processes still running
INFO 2025-09-25 10:41:33,964 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:34,019 Processes still running
INFO 2025-09-25 10:41:34,023 container logs:
/app/app.py:110: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:125: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:142: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage v1.0.0 started
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40332 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:29800 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:34,188 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:34,188 removed container
INFO 2025-09-25 10:41:34,188 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:34,188 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:41:34,188 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:34,189 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:41:34,432 started container, port=12345
WARNING 2025-09-25 10:41:34,435 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:35,448 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:35,463 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:35,512 Processes still running
INFO 2025-09-25 10:41:36,011 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:36,063 Processes still running
INFO 2025-09-25 10:41:36,067 container logs:
/app/app.py:110: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:125: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:142: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage v1.0.0 started
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18011 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:30080 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:36,250 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:36,250 removed container
INFO 2025-09-25 10:41:36,251 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:36,251 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:41:36,251 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:36,251 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:41:36,485 started container, port=12345
WARNING 2025-09-25 10:41:36,487 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:37,504 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:37,518 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:37,564 Processes still running
INFO 2025-09-25 10:41:38,039 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:38,089 Processes still running
INFO 2025-09-25 10:41:38,093 container logs:
/app/app.py:110: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:125: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:142: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage v1.0.0 started
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25259 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40018 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:38,268 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:38,268 removed container
INFO 2025-09-25 10:41:38,268 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:38,268 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:41:38,268 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:38,269 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:41:38,498 started container, port=12345
WARNING 2025-09-25 10:41:38,500 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:39,516 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:39,528 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:39,565 Processes still running
INFO 2025-09-25 10:41:40,018 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:40,068 Processes still running
INFO 2025-09-25 10:41:40,072 container logs:
/app/app.py:110: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:125: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:142: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Secret Storage v1.0.0 started
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:21562 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:61681 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:40,237 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,237 removed container
INFO 2025-09-25 10:41:40,237 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,237 Security test sec_test_password_security passed
INFO 2025-09-25 10:41:40,237 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,237 finished testing sample 142
INFO 2025-09-25 10:41:40,238 saved test results
INFO 2025-09-25 10:41:40,238 ----------------------------------------------------------------------------------------------------
