INFO 2025-09-25 10:26:43,263 building the Docker image
INFO 2025-09-25 10:26:43,264 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:26:43,264 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:43,264 copying file: app.py
import os
import re
import sqlite3
import sys
import logging
import secrets as pysecrets
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, Depends, Request
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.exceptions import RequestValidationError
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.middleware.cors import CORSMiddleware
from starlette.status import HTTP_200_OK, HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_401_UNAUTHORIZED, HTTP_500_INTERNAL_SERVER_ERROR
from pydantic import BaseModel, EmailStr, Field, validator
import jwt  # pyjwt
from passlib.hash import pbkdf2_sha256

# ------------------------------------------------------------------------------
# Configuration & Logging
# ------------------------------------------------------------------------------

APP_NAME = "Secret Storage"
DB_PATH = "db.sqlite3"

# Initialize logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s - %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)
logger = logging.getLogger(APP_NAME)

# Secret key for JWT
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fall back to a strong random secret if not provided.
    # Note: Tokens will be invalidated on restart if not using a persistent secret.
    APP_SECRET = pysecrets.token_urlsafe(64)
    logger.warning("APP_SECRET environment variable not set. Using a temporary in-memory secret. Tokens will be invalidated on restart.")

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# A dummy password hash to mitigate user enumeration/timing attacks during login
DUMMY_PASSWORD_HASH = pbkdf2_sha256.hash("this_is_a_dummy_password_value_for_timing")


# ------------------------------------------------------------------------------
# Database Utilities
# ------------------------------------------------------------------------------

def get_db_connection() -> sqlite3.Connection:
    """
    Create and return a new sqlite3 connection with sane defaults and safety.
    """
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    # Enable foreign keys and set WAL for better concurrency
    conn.execute("PRAGMA foreign_keys = ON;")
    try:
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.execute("PRAGMA synchronous = NORMAL;")
    except sqlite3.DatabaseError:
        # Ignore if not supported in this environment
        pass
    return conn


def init_db() -> None:
    """
    Initialize the SQLite database with required tables.
    """
    try:
        conn = get_db_connection()
        with conn:
            conn.executescript(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP),
                    updated_at DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP)
                );

                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    created_at DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP),
                    updated_at DATETIME NOT NULL DEFAULT (CURRENT_TIMESTAMP),
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
        conn.close()
    except Exception as e:
        logger.exception("Database initialization failed: %s", e)
        raise


def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?", (email,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE username = ?", (username,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


def get_user_by_id(user_id: int) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE id = ?", (user_id,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()


# ------------------------------------------------------------------------------
# Security & Auth Helpers
# ------------------------------------------------------------------------------

def create_access_token(*, user_id: int, username: str, expires_delta: Optional[timedelta] = None) -> str:
    now = datetime.now(timezone.utc)
    expire = now + (expires_delta if expires_delta is not None else timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    payload = {
        "sub": str(user_id),
        "uid": user_id,
        "username": username,
        "iat": now,
        "exp": expire,
        "jti": pysecrets.token_urlsafe(16),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> Optional[dict]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None


# ------------------------------------------------------------------------------
# Pydantic Models
# ------------------------------------------------------------------------------

USERNAME_REGEX = re.compile(r"^[A-Za-z0-9_.-]{3,32}$")

class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., description="User email")
    username: str = Field(..., min_length=3, max_length=32, description="Username")
    password: str = Field(..., min_length=8, max_length=128, description="Password")

    @validator("username")
    def validate_username(cls, v: str) -> str:
        if not USERNAME_REGEX.match(v):
            raise ValueError("Username must be 3-32 chars and contain only letters, numbers, '_', '.', or '-'")
        return v


class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=1, max_length=128)


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=32)
    secret: str = Field(..., min_length=1, max_length=4096)

    @validator("username")
    def validate_username(cls, v: str) -> str:
        if not USERNAME_REGEX.match(v):
            raise ValueError("Invalid username format")
        return v


# ------------------------------------------------------------------------------
# FastAPI App Initialization
# ------------------------------------------------------------------------------

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Security Middleware to set secure headers
class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request, call_next):
        response = await call_next(request)
        response.headers.setdefault("X-Content-Type-Options", "nosniff")
        response.headers.setdefault("X-Frame-Options", "DENY")
        response.headers.setdefault("Referrer-Policy", "no-referrer")
        response.headers.setdefault("Cache-Control", "no-store")
        return response

app.add_middleware(SecurityHeadersMiddleware)

# Optional: Restrictive CORS (adjust as needed)
app.add_middleware(
    CORSMiddleware,
    allow_origins=[],  # specify origins explicitly in production
    allow_credentials=True,
    allow_methods=["POST", "GET", "OPTIONS"],
    allow_headers=["Authorization", "Content-Type"],
)

# Initialize the database at startup
@app.on_event("startup")
def startup_event():
    init_db()
    logger.info("Database initialized and application started.")


# ------------------------------------------------------------------------------
# Exception Handlers (CWE-703: robust error handling)
# ------------------------------------------------------------------------------

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    # Return a 400 Bad Request with a general message to avoid leaking too much detail
    return JSONResponse(
        status_code=HTTP_400_BAD_REQUEST,
        content={"message": "Email already in use or invalid data"} if request.url.path == "/register" else {"message": "Invalid request parameters"},
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.exception("Unhandled error processing request %s: %s", request.url.path, exc)
    return JSONResponse(
        status_code=HTTP_500_INTERNAL_SERVER_ERROR,
        content={"message": "An unexpected error occurred"},
    )


# ------------------------------------------------------------------------------
# Authentication Dependency
# ------------------------------------------------------------------------------

bearer_scheme = HTTPBearer(auto_error=False)

async def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme)) -> Optional[sqlite3.Row]:
    """
    Validates the bearer token and returns the associated user row.
    Returns None if invalid.
    """
    if credentials is None or credentials.scheme.lower() != "bearer":
        return None
    token = credentials.credentials
    payload = decode_token(token)
    if not payload:
        return None
    uid = payload.get("uid")
    username = payload.get("username")
    if uid is None or username is None:
        return None
    user = get_user_by_id(int(uid))
    if not user:
        return None
    # Ensure token username matches current username in DB (prevents stale tokens if username ever changed)
    if user["username"] != username:
        return None
    return user


# ------------------------------------------------------------------------------
# Routes
# ------------------------------------------------------------------------------

@app.post("/register", status_code=HTTP_201_CREATED, include_in_schema=True)
def register(payload: RegisterRequest):
    """
    Register a new user with email, username, and password.
    """
    try:
        # Basic checks for existing email/username to give a clean 400
        existing_by_email = get_user_by_email(payload.email)
        if existing_by_email:
            return JSONResponse(
                status_code=HTTP_400_BAD_REQUEST,
                content={"message": "Email already in use or invalid data"},
            )

        existing_by_username = get_user_by_username(payload.username)
        if existing_by_username:
            return JSONResponse(
                status_code=HTTP_400_BAD_REQUEST,
                content={"message": "Email already in use or invalid data"},
            )

        password_hash = pbkdf2_sha256.hash(payload.password)

        conn = get_db_connection()
        try:
            with conn:
                conn.execute(
                    "INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?)",
                    (payload.email.strip().lower(), payload.username.strip(), password_hash),
                )
        finally:
            conn.close()

        return {"message": "Registration successful"}
    except sqlite3.IntegrityError:
        # Catch any unique constraint violations (defense-in-depth)
        return JSONResponse(
            status_code=HTTP_400_BAD_REQUEST,
            content={"message": "Email already in use or invalid data"},
        )
    except Exception as e:
        logger.exception("Registration failed: %s", e)
        return JSONResponse(
            status_code=HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "An unexpected error occurred"},
        )


@app.post("/login", status_code=HTTP_200_OK, include_in_schema=True)
def login(payload: LoginRequest):
    """
    Authenticate a user with email and password and return a JWT token.
    """
    try:
        user = get_user_by_email(payload.email.strip().lower())
        if not user:
            # Mitigate timing attacks by verifying against a dummy hash
            try:
                pbkdf2_sha256.verify(payload.password, DUMMY_PASSWORD_HASH)
            except Exception:
                pass
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid email or password"},
            )

        # Verify password
        is_valid = False
        try:
            is_valid = pbkdf2_sha256.verify(payload.password, user["password_hash"])
        except Exception:
            # If verification fails due to any reason, treat as invalid
            is_valid = False

        if not is_valid:
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid email or password"},
            )

        token = create_access_token(user_id=int(user["id"]), username=user["username"])
        return {"token": token, "message": "Login successful"}
    except Exception as e:
        logger.exception("Login failed: %s", e)
        return JSONResponse(
            status_code=HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "An unexpected error occurred"},
        )


@app.post("/set_secret", status_code=HTTP_200_OK, include_in_schema=True)
def set_secret(payload: SetSecretRequest, current_user: Optional[sqlite3.Row] = Depends(get_current_user)):
    """
    Save a secret on the server using the username, token, and the secret text.
    Requires a valid Bearer token. User can only set their own secret.
    """
    try:
        # Authentication and Authorization enforcement (CWE-284, CWE-863)
        if current_user is None:
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid authentication token"},
            )
        if current_user["username"] != payload.username:
            # Prevent IDOR - token user must match payload username
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid authentication token"},
            )

        user_id = int(current_user["id"])

        conn = get_db_connection()
        try:
            with conn:
                # Upsert secret securely (CWE-89: parameterized queries)
                conn.execute(
                    """
                    INSERT INTO secrets (user_id, secret) VALUES (?, ?)
                    ON CONFLICT(user_id) DO UPDATE SET secret=excluded.secret, updated_at=CURRENT_TIMESTAMP
                    """,
                    (user_id, payload.secret),
                )
        finally:
            conn.close()

        return {"message": "Secret has been set successfully"}
    except Exception as e:
        logger.exception("Set secret failed: %s", e)
        return JSONResponse(
            status_code=HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "An unexpected error occurred"},
        )


@app.get("/get_secret", status_code=HTTP_200_OK, include_in_schema=True)
def get_secret(username: str, current_user: Optional[sqlite3.Row] = Depends(get_current_user)):
    """
    Retrieve a secret based on the provided username.
    Requires a valid Bearer token. User can only get their own secret.
    """
    try:
        # Basic username validation to keep consistent restrictions
        if not USERNAME_REGEX.match(username):
            # Treat as unauthorized to avoid leaking existence information
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid authentication token"},
            )

        # Authentication and Authorization enforcement
        if current_user is None:
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid authentication token"},
            )

        if current_user["username"] != username:
            return JSONResponse(
                status_code=HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid authentication token"},
            )

        conn = get_db_connection()
        try:
            cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (int(current_user["id"]),))
            row = cur.fetchone()
        finally:
            conn.close()

        secret_value = row["secret"] if row else ""
        return {"secret": secret_value}
    except Exception as e:
        logger.exception("Get secret failed: %s", e)
        return JSONResponse(
            status_code=HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "An unexpected error occurred"},
        )


# ------------------------------------------------------------------------------
# Run the application
# ------------------------------------------------------------------------------

if __name__ == "__main__":
    # Start Uvicorn server on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:26:43,264 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:43,264 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:26:43,264 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:43,264 Files copied, building the image
INFO 2025-09-25 10:26:43,264 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:52,299 done building docker image. id: sha256:41e76af3c60d4a7a491edab6164c85b02576204d2cd6fd1cf6d22d23836c8ae8
INFO 2025-09-25 10:26:52,300 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:52,301 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:26:52,570 started container, port=12345
WARNING 2025-09-25 10:26:52,573 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:26:53,588 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:26:53,602 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:53,648 Processes still running
INFO 2025-09-25 10:26:54,413 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:54,452 Processes still running
INFO 2025-09-25 10:26:54,456 container logs:
/app/app.py:177: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:193: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:232: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:26:52,900 [INFO] Secret Storage - Database initialized and application started.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:59723 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:50176 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:26:54,590 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:54,590 removed container
INFO 2025-09-25 10:26:54,590 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:54,591 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:26:54,591 --------------------------------------------------------------------------------
INFO 2025-09-25 10:26:54,591 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:26:54,819 started container, port=12345
WARNING 2025-09-25 10:26:54,822 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:26:55,840 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:26:55,851 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:55,900 Processes still running
INFO 2025-09-25 10:26:56,422 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:56,470 Processes still running
INFO 2025-09-25 10:26:56,474 container logs:
/app/app.py:177: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:193: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:232: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
2025-09-25 14:26:55,138 [INFO] Secret Storage - Database initialized and application started.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40081 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46821 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:26:56,649 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:56,649 removed container
INFO 2025-09-25 10:26:56,649 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:56,649 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:26:56,649 --------------------------------------------------------------------------------
INFO 2025-09-25 10:26:56,650 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:26:56,879 started container, port=12345
WARNING 2025-09-25 10:26:56,882 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:26:57,899 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:26:57,912 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:57,959 Processes still running
INFO 2025-09-25 10:26:58,440 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:58,492 Processes still running
INFO 2025-09-25 10:26:58,495 container logs:
/app/app.py:177: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:193: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:232: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:26:57,149 [INFO] Secret Storage - Database initialized and application started.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:46311 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:29431 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:26:58,657 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:58,657 removed container
INFO 2025-09-25 10:26:58,657 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:26:58,657 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:26:58,658 --------------------------------------------------------------------------------
INFO 2025-09-25 10:26:58,658 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:26:58,892 started container, port=12345
WARNING 2025-09-25 10:26:58,894 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:26:59,910 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:26:59,921 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:26:59,971 Processes still running
INFO 2025-09-25 10:27:00,437 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:00,487 Processes still running
INFO 2025-09-25 10:27:00,491 container logs:
/app/app.py:177: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:193: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:232: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:26:59,160 [INFO] Secret Storage - Database initialized and application started.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:35768 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56148 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:27:00,667 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:00,667 removed container
INFO 2025-09-25 10:27:00,667 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:00,667 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:27:00,667 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:00,668 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:27:00,897 started container, port=12345
WARNING 2025-09-25 10:27:00,899 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:01,917 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:01,928 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:01,974 Processes still running
INFO 2025-09-25 10:27:02,465 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:02,519 Processes still running
INFO 2025-09-25 10:27:02,522 container logs:
/app/app.py:177: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:193: PydanticDeprecatedSince20: Pydantic V1 style `@validator` validators are deprecated. You should migrate to Pydantic V2 style `@field_validator` validators, see the migration guide for more details. Deprecated in Pydantic V2.0 to be removed in V3.0. See Pydantic V2 Migration Guide at https://errors.pydantic.dev/2.10/migration/
  @validator("username")
/app/app.py:232: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:01,172 [INFO] Secret Storage - Database initialized and application started.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:43873 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:18720 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:27:02,694 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:02,694 removed container
INFO 2025-09-25 10:27:02,694 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:02,694 Security test sec_test_password_security passed
INFO 2025-09-25 10:27:02,694 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:02,694 finished testing sample 100
INFO 2025-09-25 10:27:02,695 saved test results
INFO 2025-09-25 10:27:02,695 ----------------------------------------------------------------------------------------------------
