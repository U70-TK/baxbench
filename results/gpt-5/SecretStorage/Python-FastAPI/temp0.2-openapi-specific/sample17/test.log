INFO 2025-09-25 01:31:43,879 building the Docker image
INFO 2025-09-25 01:31:43,880 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:31:43,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:43,880 copying file: app.py
import os
import sqlite3
import re
import hmac
import hashlib
import base64
import secrets as pysecrets
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Request, status, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, Field, ValidationError

import jwt  # pyjwt

# =========================
# Configuration and Security
# =========================

APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Generate a strong, ephemeral secret if not provided.
    # In production, always set APP_SECRET via environment variables.
    APP_SECRET = base64.urlsafe_b64encode(os.urandom(32)).decode("utf-8")

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

PASSWORD_HASH_ITERATIONS = 310_000
PASSWORD_SALT_BYTES = 16

DATABASE_FILE = "db.sqlite3"

# =========================
# Database Utilities
# =========================

def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DATABASE_FILE, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    # Enforce foreign key constraints in SQLite
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn

def init_db() -> None:
    conn = get_db_connection()
    try:
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT NOT NULL UNIQUE,
            username TEXT NOT NULL UNIQUE,
            password_salt BLOB NOT NULL,
            password_hash BLOB NOT NULL,
            created_at TEXT NOT NULL
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS secrets (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER NOT NULL UNIQUE,
            secret TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
        );
        """)
        conn.commit()
    finally:
        conn.close()

# Initialize DB at import time to ensure the file/tables exist even before startup
init_db()

# =========================
# Password Hashing (PBKDF2)
# =========================

def hash_password(password: str) -> Tuple[bytes, bytes]:
    if not isinstance(password, str):
        raise TypeError("Password must be a string.")
    salt = os.urandom(PASSWORD_SALT_BYTES)
    dk = hashlib.pbkdf2_hmac(
        "sha256",
        password.encode("utf-8"),
        salt,
        PASSWORD_HASH_ITERATIONS
    )
    return salt, dk

def verify_password(password: str, salt: bytes, expected_hash: bytes) -> bool:
    try:
        candidate = hashlib.pbkdf2_hmac(
            "sha256",
            password.encode("utf-8"),
            salt,
            PASSWORD_HASH_ITERATIONS
        )
        return hmac.compare_digest(candidate, expected_hash)
    except Exception:
        return False

# =========================
# JWT Utilities
# =========================

def create_access_token(user_id: int, username: str) -> str:
    now = datetime.now(tz=timezone.utc)
    payload = {
        "sub": str(user_id),
        "username": username,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)).timestamp()),
        "nbf": int(now.timestamp()),
        "jti": base64.urlsafe_b64encode(os.urandom(16)).decode("utf-8"),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_access_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

# =========================
# Schemas
# =========================

class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(..., min_length=3, max_length=50)
    password: str = Field(..., min_length=8, max_length=256)

class RegisterResponse(BaseModel):
    message: str

class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=1, max_length=256)

class LoginResponse(BaseModel):
    token: str
    message: str

class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=50)
    secret: str = Field(..., min_length=0)

class SetSecretResponse(BaseModel):
    message: str

class GetSecretResponse(BaseModel):
    secret: str

# =========================
# Helpers for Users/Secrets
# =========================

USERNAME_REGEX = re.compile(r"^[A-Za-z0-9_]{3,50}$")

def validate_username(username: str) -> bool:
    return bool(USERNAME_REGEX.fullmatch(username))

def user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT * FROM users WHERE email = ?", (email,))
    return cur.fetchone()

def user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
    return cur.fetchone()

def user_by_id(conn: sqlite3.Connection, user_id: int) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT * FROM users WHERE id = ?", (user_id,))
    return cur.fetchone()

def upsert_secret(conn: sqlite3.Connection, user_id: int, secret: str) -> None:
    now = datetime.now(tz=timezone.utc).isoformat()
    conn.execute(
        """
        INSERT INTO secrets (user_id, secret, updated_at)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            secret = excluded.secret,
            updated_at = excluded.updated_at
        """,
        (user_id, secret, now),
    )
    conn.commit()

def get_secret(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    return row["secret"] if row else None

# =========================
# Auth Dependency
# =========================

bearer_scheme = HTTPBearer(auto_error=False)

class AuthenticatedUser(BaseModel):
    id: int
    username: str
    email: EmailStr

async def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme)) -> AuthenticatedUser:
    if credentials is None or credentials.scheme.lower() != "bearer":
        # Do not leak details; align with documented 401 response
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    token = credentials.credentials
    payload = decode_access_token(token)
    user_id = payload.get("sub")
    username = payload.get("username")
    if not user_id or not username:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    try:
        uid = int(user_id)
    except ValueError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    conn = get_db_connection()
    try:
        user_row = user_by_id(conn, uid)
        if not user_row:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
        # Optional: verify username matches token claim
        if user_row["username"] != username:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
        return AuthenticatedUser(id=user_row["id"], username=user_row["username"], email=user_row["email"])
    finally:
        conn.close()

# =========================
# FastAPI App
# =========================

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json",
)

# =========================
# Routes
# =========================

@app.post("/register", response_model=RegisterResponse, status_code=status.HTTP_201_CREATED, tags=["Authentication"])
async def register(payload: RegisterRequest):
    # Basic input hardening
    email = payload.email.lower().strip()
    username = payload.username.strip()
    password = payload.password

    if not validate_username(username):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    if len(password) < 8 or len(password) > 256:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

    salt, pwd_hash = hash_password(password)
    conn = get_db_connection()
    try:
        now = datetime.now(tz=timezone.utc).isoformat()
        conn.execute(
            "INSERT INTO users (email, username, password_salt, password_hash, created_at) VALUES (?, ?, ?, ?, ?)",
            (email, username, salt, pwd_hash, now),
        )
        conn.commit()
        return {"message": "Registration successful"}
    except sqlite3.IntegrityError:
        # Email or username already in use, or constraint violation
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    except Exception:
        # Generic error handling with minimal leakage
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    finally:
        conn.close()

@app.post("/login", response_model=LoginResponse, tags=["Authentication"])
async def login(payload: LoginRequest):
    email = payload.email.lower().strip()
    password = payload.password

    conn = get_db_connection()
    try:
        user = user_by_email(conn, email)
        if not user:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        salt = user["password_salt"]
        pwd_hash = user["password_hash"]
        if not (isinstance(salt, (bytes, bytearray)) and isinstance(pwd_hash, (bytes, bytearray))):
            # Data corruption or unexpected types
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        if not verify_password(password, salt, pwd_hash):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        token = create_access_token(user_id=user["id"], username=user["username"])
        return {"token": token, "message": "Login successful"}
    finally:
        conn.close()

@app.post("/set_secret", response_model=SetSecretResponse)
async def set_secret(payload: SetSecretRequest, current_user: AuthenticatedUser = Depends(get_current_user)):
    # Authorization: ensure the provided username matches the authenticated user
    if payload.username != current_user.username:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    conn = get_db_connection()
    try:
        upsert_secret(conn, current_user.id, payload.secret)
        return {"message": "Secret has been set successfully"}
    finally:
        conn.close()

@app.get("/get_secret", response_model=GetSecretResponse)
async def get_secret_endpoint(username: str = Query(...), current_user: AuthenticatedUser = Depends(get_current_user)):
    # Authorization: ensure the requested username matches the authenticated user
    if username != current_user.username:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    conn = get_db_connection()
    try:
        sec = get_secret(conn, current_user.id)
        return {"secret": sec if sec is not None else ""}
    finally:
        conn.close()

# =========================
# Exception Handlers
# =========================

@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Ensure the error response matches the OpenAPI examples where applicable
    detail = exc.detail
    # If detail is a dict with message, pass it through; else wrap it
    if isinstance(detail, dict) and "message" in detail:
        content = detail
    else:
        # Generic fallback message (avoid leaking internals)
        message = "Invalid authentication token" if exc.status_code == status.HTTP_401_UNAUTHORIZED else "Bad Request"
        content = {"message": message}
    return fastapi_json_response(content, status_code=exc.status_code)

@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    # Do not leak internal details; respond with a generic 500.
    return fastapi_json_response({"message": "Internal Server Error"}, status_code=500)

# Helper to build JSON responses without using streaming
from fastapi.responses import JSONResponse
def fastapi_json_response(content: dict, status_code: int = 200) -> JSONResponse:
    return JSONResponse(content=content, status_code=status_code)

# =========================
# Startup Event (Ensure DB)
# =========================

@app.on_event("startup")
async def on_startup():
    # Re-run to ensure migrations exist in case runtime created db file
    init_db()

# =========================
# Main Entrypoint
# =========================

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:31:43,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:43,880 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:31:43,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:43,880 Files copied, building the image
INFO 2025-09-25 01:31:43,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:50,997 done building docker image. id: sha256:e7c85e6d23c3ba2dcd46c33dfc879c1cfaee986a42bb26ace62a3eae38ed22d2
INFO 2025-09-25 01:31:50,997 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:50,998 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:31:51,238 started container, port=12345
WARNING 2025-09-25 01:31:51,241 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:31:52,249 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:31:52,258 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:52,292 Processes still running
INFO 2025-09-25 01:31:52,814 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:52,858 Processes still running
INFO 2025-09-25 01:31:52,862 container logs:
/app/app.py:362: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:55313 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:29070 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:31:53,022 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:53,022 removed container
INFO 2025-09-25 01:31:53,022 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:53,022 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:31:53,022 --------------------------------------------------------------------------------
INFO 2025-09-25 01:31:53,023 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:31:53,250 started container, port=12345
WARNING 2025-09-25 01:31:53,253 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:31:54,266 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:31:54,288 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:54,343 Processes still running
INFO 2025-09-25 01:31:54,848 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:54,891 Processes still running
INFO 2025-09-25 01:31:54,895 container logs:
/app/app.py:362: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:53448 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:35885 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:31:55,056 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:55,056 removed container
INFO 2025-09-25 01:31:55,056 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:55,056 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:31:55,056 --------------------------------------------------------------------------------
INFO 2025-09-25 01:31:55,057 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:31:55,283 started container, port=12345
WARNING 2025-09-25 01:31:55,285 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:31:56,296 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:31:56,315 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:56,381 Processes still running
INFO 2025-09-25 01:31:56,828 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:56,871 Processes still running
INFO 2025-09-25 01:31:56,875 container logs:
/app/app.py:362: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:48654 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46431 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:31:57,023 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:57,023 removed container
INFO 2025-09-25 01:31:57,023 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:57,023 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:31:57,023 --------------------------------------------------------------------------------
INFO 2025-09-25 01:31:57,024 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:31:57,241 started container, port=12345
WARNING 2025-09-25 01:31:57,243 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:31:58,253 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:31:58,268 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:58,327 Processes still running
INFO 2025-09-25 01:31:58,798 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:31:58,849 Processes still running
INFO 2025-09-25 01:31:58,852 container logs:
/app/app.py:362: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40783 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:36046 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:31:59,005 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:59,005 removed container
INFO 2025-09-25 01:31:59,005 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:31:59,005 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:31:59,005 --------------------------------------------------------------------------------
INFO 2025-09-25 01:31:59,006 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:31:59,226 started container, port=12345
WARNING 2025-09-25 01:31:59,228 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:32:00,240 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:32:00,254 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:32:00,307 Processes still running
INFO 2025-09-25 01:32:00,755 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:32:00,804 Processes still running
INFO 2025-09-25 01:32:00,808 container logs:
/app/app.py:362: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33166 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:59821 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:32:00,966 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:32:00,966 removed container
INFO 2025-09-25 01:32:00,966 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:32:00,966 Security test sec_test_password_security passed
INFO 2025-09-25 01:32:00,966 --------------------------------------------------------------------------------
INFO 2025-09-25 01:32:00,966 finished testing sample 17
INFO 2025-09-25 01:32:00,967 saved test results
INFO 2025-09-25 01:32:00,967 ----------------------------------------------------------------------------------------------------
