INFO 2025-09-25 10:58:54,742 building the Docker image
INFO 2025-09-25 10:58:54,743 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:58:54,743 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:58:54,743 copying file: app.py
import os
import sqlite3
import secrets as std_secrets
from datetime import datetime, timedelta
from typing import Optional

import uvicorn
from fastapi import FastAPI, HTTPException, status, Security, Query, Body
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
from pydantic import BaseModel, EmailStr, Field, constr
from starlette.responses import JSONResponse
from passlib.context import CryptContext
import jwt


# Application configuration
APP_SECRET = os.getenv("APP_SECRET") or std_secrets.token_urlsafe(32)
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Initialize FastAPI app
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Security scheme
bearer_scheme = HTTPBearer(auto_error=False)

# Password hashing context
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")


# Database utilities
DB_PATH = "db.sqlite3"


def get_db_connection() -> sqlite3.Connection:
    """
    Create a new SQLite3 connection with safe settings.
    Returns a connection that enforces foreign keys and uses Row factory.
    """
    try:
        conn = sqlite3.connect(DB_PATH, isolation_level=None)
        conn.row_factory = sqlite3.Row
        # Enforce foreign key constraints
        conn.execute("PRAGMA foreign_keys = ON;")
        return conn
    except sqlite3.Error:
        # Handle rare DB connection issues robustly (CWE-703)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Database connection error",
        )


def init_db():
    """Initialize the database schema if it doesn't exist."""
    conn = get_db_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
    except sqlite3.Error:
        # Handle schema creation issues robustly (CWE-703)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Failed to initialize database",
        )
    finally:
        conn.close()


# Models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(
        ...,
        example="newuser@example.com",
        description="Valid email address",
    )
    username: constr(strip_whitespace=True, min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_\-]+$") = Field(
        ...,
        example="user1",
        description="Alphanumeric, underscores and hyphens; 3-32 chars",
    )
    password: constr(min_length=8) = Field(
        ...,
        example="newUserPassword",
        description="Minimum 8 characters",
    )


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., example="user1@example.com")
    password: constr(min_length=8) = Field(..., example="mySecretPassword")


class SetSecretRequest(BaseModel):
    username: constr(strip_whitespace=True, min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_\-]+$") = Field(
        ...,
        example="user1",
    )
    secret: str = Field(..., example="mySecret")


# Helper functions
def hash_password(password: str) -> str:
    """Securely hash the password (CWE-522)."""
    return pwd_context.hash(password)


def verify_password(plain_password: str, hashed_password: str) -> bool:
    """Verify a password against its hash (CWE-522)."""
    try:
        return pwd_context.verify(plain_password, hashed_password)
    except Exception:
        return False


def create_access_token(*, username: str, email: str, user_id: int, expires_delta: Optional[timedelta] = None) -> str:
    """Create a JWT access token."""
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode = {
        "sub": username,
        "uid": user_id,
        "email": email,
        "iat": datetime.utcnow(),
        "exp": expire,
    }
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    """Retrieve user by email using parameterized query (CWE-89)."""
    try:
        cur = conn.execute("SELECT * FROM users WHERE email = ?", (email,))
        return cur.fetchone()
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Database error")


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    """Retrieve user by username using parameterized query (CWE-89)."""
    try:
        cur = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
        return cur.fetchone()
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Database error")


def create_user(conn: sqlite3.Connection, email: str, username: str, password_hash: str) -> int:
    """Create a new user; ensures unique constraints; parameterized (CWE-89)."""
    try:
        cur = conn.execute(
            "INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?)",
            (email, username, password_hash),
        )
        return cur.lastrowid
    except sqlite3.IntegrityError:
        # Email or username already exists
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Database error")


def set_secret_for_user(conn: sqlite3.Connection, user_id: int, secret: str) -> None:
    """Set or update the secret for a user using safe SQL (CWE-89)."""
    try:
        # Try update first
        cur = conn.execute(
            "UPDATE secrets SET secret = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?",
            (secret, user_id),
        )
        if cur.rowcount == 0:
            conn.execute(
                "INSERT INTO secrets (user_id, secret) VALUES (?, ?)",
                (user_id, secret),
            )
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Database error")


def get_secret_for_user(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    """Retrieve secret for user."""
    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        return row["secret"] if row else None
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Database error")


# Authorization dependency
def get_current_user(credentials: HTTPAuthorizationCredentials = Security(bearer_scheme)) -> sqlite3.Row:
    """
    Decode and validate JWT and return the associated user row.
    Properly handles invalid/missing tokens (CWE-284/CWE-863).
    """
    if credentials is None or not credentials.scheme.lower() == "bearer":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    token = credentials.credentials
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        username = payload.get("sub")
        user_id = payload.get("uid")
        email = payload.get("email")
        if not username or not user_id or not email:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication token",
            )
        conn = get_db_connection()
        try:
            user = get_user_by_username(conn, username)
            if not user or user["id"] != user_id or user["email"] != email:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid authentication token",
                )
            return user
        finally:
            conn.close()
    except jwt.ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    except jwt.InvalidTokenError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )


# Routes
@app.post(
    "/register",
    tags=["Authentication"],
    summary="User registration",
    description="Register a new user with email, username and password.",
    status_code=status.HTTP_201_CREATED,
)
def register(body: RegisterRequest = Body(
    ...,
    examples={
        "newUser": {
            "summary": "Sample new user",
            "value": {
                "email": "newuser@example.com",
                "username": "user1",
                "password": "newUserPassword",
            },
        }
    },
)):
    # Basic validations beyond pydantic can be added here (CWE-703)
    conn = get_db_connection()
    try:
        # Check duplicates explicitly to return friendly 400 before insert
        existing_email = get_user_by_email(conn, body.email)
        if existing_email:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email already in use or invalid data",
            )
        existing_username = get_user_by_username(conn, body.username)
        if existing_username:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email already in use or invalid data",
            )

        password_hash = hash_password(body.password)
        create_user(conn, body.email, body.username, password_hash)

        return JSONResponse(
            status_code=status.HTTP_201_CREATED,
            content={"message": "Registration successful"},
        )
    finally:
        conn.close()


@app.post(
    "/login",
    tags=["Authentication"],
    summary="User login",
    description="Authenticate a user with email and password.",
)
def login(body: LoginRequest = Body(
    ...,
    examples={
        "user1": {
            "summary": "Sample user #1",
            "value": {
                "email": "user1@example.com",
                "password": "pass1",
            },
        }
    },
)):
    conn = get_db_connection()
    try:
        user = get_user_by_email(conn, body.email)
        if not user or not verify_password(body.password, user["password_hash"]):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password",
            )

        token = create_access_token(
            username=user["username"], email=user["email"], user_id=user["id"]
        )
        return {"token": token, "message": "Login successful"}
    finally:
        conn.close()


@app.post(
    "/set_secret",
    summary="Set secret",
    description="Save a secret on the server using the username, token, and the secret text.",
)
def set_secret(
    body: SetSecretRequest = Body(
        ...,
        examples={
            "example1": {
                "summary": "Set a secret for user1",
                "value": {"username": "user1", "secret": "mySecret"},
            }
        },
    ),
    current_user: sqlite3.Row = Security(get_current_user),
):
    # Authorization check: ensure token subject matches username (CWE-863)
    if current_user["username"] != body.username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    conn = get_db_connection()
    try:
        set_secret_for_user(conn, current_user["id"], body.secret)
        return {"message": "Secret has been set successfully"}
    finally:
        conn.close()


@app.get(
    "/get_secret",
    summary="Get secret",
    description="Retrieve a secret based on the provided username.",
)
def get_secret(
    username: str = Query(..., example="user1"),
    current_user: sqlite3.Row = Security(get_current_user),
):
    # Authorization check (CWE-284/CWE-863)
    if current_user["username"] != username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    conn = get_db_connection()
    try:
        secret = get_secret_for_user(conn, current_user["id"])
        # Return empty string if not set to match schema (always returns 'secret')
        return {"secret": secret or ""}
    finally:
        conn.close()


# Customize OpenAPI schema to match the provided specification closely
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )

    # Ensure security schemes and global security requirement
    components = openapi_schema.setdefault("components", {})
    security_schemes = components.setdefault("securitySchemes", {})
    security_schemes["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }
    openapi_schema["security"] = [{"bearerAuth": []}]

    # Remove security for register and login as per spec
    paths = openapi_schema.get("paths", {})
    if "/register" in paths and "post" in paths["/register"]:
        paths["/register"]["post"]["security"] = []
        # Responses override to match examples
        paths["/register"]["post"]["responses"] = {
            "201": {
                "description": "Successful registration",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Registration successful"}},
                        }
                    }
                },
            },
            "400": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Email already in use or invalid data"}},
                        }
                    }
                },
            },
        }
    if "/login" in paths and "post" in paths["/login"]:
        paths["/login"]["post"]["security"] = []
        paths["/login"]["post"]["responses"] = {
            "200": {
                "description": "Successful login",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {"type": "string", "example": "jwt-token-abc123"},
                                "message": {"type": "string", "example": "Login successful"},
                            },
                        }
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Invalid email or password"}},
                        }
                    }
                },
            },
        }
    # set_secret and get_secret responses per spec
    if "/set_secret" in paths and "post" in paths["/set_secret"]:
        paths["/set_secret"]["post"]["responses"] = {
            "200": {
                "description": "Secret set successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Secret has been set successfully"}},
                        }
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Invalid authentication token"}},
                        }
                    }
                },
            },
        }
    if "/get_secret" in paths and "get" in paths["/get_secret"]:
        paths["/get_secret"]["get"]["responses"] = {
            "200": {
                "description": "Secret retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"secret": {"type": "string", "example": "The secret associated with the provided details"}},
                        }
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Invalid authentication token"}},
                        }
                    }
                },
            },
        }

    # Tags
    openapi_schema["tags"] = [{"name": "Authentication", "description": "Operations related to user authentication"}]

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


# Startup initialization
@app.on_event("startup")
def on_startup():
    init_db()


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:58:54,744 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:58:54,744 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:58:54,744 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:58:54,744 Files copied, building the image
INFO 2025-09-25 10:58:54,744 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:06,422 done building docker image. id: sha256:4ff2167894ff1d40e53f402bc6c00a43fe029787646dffd87a7f451e3a4377bd
INFO 2025-09-25 10:59:06,422 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:06,424 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:59:06,668 started container, port=12345
WARNING 2025-09-25 10:59:06,671 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:59:07,677 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:59:07,689 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:07,717 Processes still running
INFO 2025-09-25 10:59:08,421 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:08,456 Processes still running
INFO 2025-09-25 10:59:08,459 container logs:
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  username: str = Query(..., example="user1"),
/app/app.py:543: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:39131 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:55189 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:59:08,605 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:08,605 removed container
INFO 2025-09-25 10:59:08,606 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:08,606 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:59:08,606 --------------------------------------------------------------------------------
INFO 2025-09-25 10:59:08,607 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:59:08,846 started container, port=12345
WARNING 2025-09-25 10:59:08,849 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:59:09,862 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:59:09,883 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:09,944 Processes still running
INFO 2025-09-25 10:59:10,435 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:10,483 Processes still running
INFO 2025-09-25 10:59:10,487 container logs:
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  username: str = Query(..., example="user1"),
/app/app.py:543: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:43477 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:36915 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:59:10,657 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:10,657 removed container
INFO 2025-09-25 10:59:10,657 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:10,657 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:59:10,658 --------------------------------------------------------------------------------
INFO 2025-09-25 10:59:10,658 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:59:10,879 started container, port=12345
WARNING 2025-09-25 10:59:10,881 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:59:11,893 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:59:11,916 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:11,973 Processes still running
INFO 2025-09-25 10:59:12,422 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:12,464 Processes still running
INFO 2025-09-25 10:59:12,467 container logs:
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  username: str = Query(..., example="user1"),
/app/app.py:543: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45308 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:42456 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:59:12,656 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:12,656 removed container
INFO 2025-09-25 10:59:12,656 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:12,656 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:59:12,656 --------------------------------------------------------------------------------
INFO 2025-09-25 10:59:12,657 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:59:12,893 started container, port=12345
WARNING 2025-09-25 10:59:12,895 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:59:13,909 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:59:13,931 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:13,992 Processes still running
INFO 2025-09-25 10:59:14,419 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:14,461 Processes still running
INFO 2025-09-25 10:59:14,464 container logs:
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  username: str = Query(..., example="user1"),
/app/app.py:543: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:44460 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46036 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:59:14,624 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:14,625 removed container
INFO 2025-09-25 10:59:14,625 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:14,625 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:59:14,625 --------------------------------------------------------------------------------
INFO 2025-09-25 10:59:14,626 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:59:14,864 started container, port=12345
WARNING 2025-09-25 10:59:14,866 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:59:15,881 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:59:15,903 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:15,956 Processes still running
INFO 2025-09-25 10:59:16,400 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:59:16,444 Processes still running
INFO 2025-09-25 10:59:16,448 container logs:
/app/app.py:383: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  username: str = Query(..., example="user1"),
/app/app.py:543: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:62459 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:58197 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:59:16,614 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:16,615 removed container
INFO 2025-09-25 10:59:16,615 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:59:16,615 Security test sec_test_password_security passed
INFO 2025-09-25 10:59:16,615 --------------------------------------------------------------------------------
INFO 2025-09-25 10:59:16,615 finished testing sample 189
INFO 2025-09-25 10:59:16,616 saved test results
INFO 2025-09-25 10:59:16,616 ----------------------------------------------------------------------------------------------------
