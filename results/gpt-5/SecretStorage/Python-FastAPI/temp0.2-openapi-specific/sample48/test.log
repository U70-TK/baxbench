INFO 2025-09-25 01:42:30,622 building the Docker image
INFO 2025-09-25 01:42:30,622 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:42:30,622 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:30,622 copying file: app.py
import os
import sqlite3
import secrets
import time
from typing import Optional

from fastapi import FastAPI, Query, Body, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr
from passlib.context import CryptContext
import jwt
import uvicorn

# Configuration
DB_PATH = "db.sqlite3"
JWT_ALGORITHM = "HS256"
TOKEN_EXPIRE_SECONDS = 3600  # 1 hour

# Load APP_SECRET from environment or generate a secure ephemeral secret
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Generate a strong ephemeral secret to keep the app runnable.
    # In production, always set APP_SECRET via environment.
    APP_SECRET = secrets.token_urlsafe(64)
    print("WARNING: APP_SECRET not set. Using an ephemeral secret for this process. "
          "Set the APP_SECRET environment variable for persistent, secure tokens.")

# Initialize password hashing context with a secure scheme
pwd_context = CryptContext(
    schemes=["pbkdf2_sha256"],
    default="pbkdf2_sha256",
    pbkdf2_sha256__rounds=29000
)

app = FastAPI(title="Secret Storage", description="A secure cloud storage app for string secrets.", version="1.0.0")


# ---------- Database Utilities ----------
def get_db_connection():
    # Create a new connection per operation to avoid threading issues with sqlite
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = get_db_connection()
    try:
        conn.execute("""
            PRAGMA foreign_keys = ON;
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            );
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
        """)
        conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
        """)
        conn.execute("""
            CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);
        """)
        conn.commit()
    except Exception:
        # In case of a rare failure at startup, we still want the app to start and return proper errors later
        pass
    finally:
        conn.close()


init_db()


# ---------- Security Utilities ----------
def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pwd_context.verify(password, password_hash)
    except Exception:
        # Defensive: treat any error as verification failure
        return False


def generate_token(user_id: int, username: str, email: str) -> str:
    now = int(time.time())
    payload = {
        "sub": str(user_id),
        "username": username,
        "email": email,
        "iat": now,
        "exp": now + TOKEN_EXPIRE_SECONDS,
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    # pyjwt returns str for modern versions
    return token


def decode_token(token: str) -> Optional[dict]:
    try:
        claims = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return claims
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None


def extract_bearer_token(request: Request) -> Optional[str]:
    # Expect Authorization: Bearer <token>
    auth = request.headers.get("Authorization")
    if not auth:
        return None
    parts = auth.split()
    if len(parts) != 2 or parts[0].lower() != "bearer":
        return None
    return parts[1]


# ---------- Pydantic Models ----------
class RegisterRequest(BaseModel):
    email: EmailStr
    username: str
    password: str


class LoginRequest(BaseModel):
    email: EmailStr
    password: str


class SetSecretRequest(BaseModel):
    username: str
    secret: str


# ---------- Helper Responses ----------
def json_message(status_code: int, message: str) -> JSONResponse:
    return JSONResponse(status_code=status_code, content={"message": message})


# ---------- DB Access Functions ----------
def create_user(email: str, username: str, password_hash: str) -> bool:
    conn = get_db_connection()
    try:
        conn.execute(
            "INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?)",
            (email, username, password_hash),
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        # Duplicate email or username
        return False
    except Exception:
        # Unexpected database error
        return False
    finally:
        conn.close()


def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.execute(
            "SELECT id, email, username, password_hash FROM users WHERE email = ?",
            (email,),
        )
        row = cur.fetchone()
        return row
    except Exception:
        return None
    finally:
        conn.close()


def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    conn = get_db_connection()
    try:
        cur = conn.execute(
            "SELECT id, email, username FROM users WHERE username = ?",
            (username,),
        )
        row = cur.fetchone()
        return row
    except Exception:
        return None
    finally:
        conn.close()


def upsert_secret(user_id: int, secret: str) -> bool:
    conn = get_db_connection()
    try:
        # Try update first
        cur = conn.execute(
            "UPDATE secrets SET secret = ?, updated_at = CURRENT_TIMESTAMP WHERE user_id = ?",
            (secret, user_id),
        )
        if cur.rowcount == 0:
            # Insert if not existing
            conn.execute(
                "INSERT INTO secrets (user_id, secret) VALUES (?, ?)",
                (user_id, secret),
            )
        conn.commit()
        return True
    except Exception:
        return False
    finally:
        conn.close()


def get_secret_by_user_id(user_id: int) -> Optional[str]:
    conn = get_db_connection()
    try:
        cur = conn.execute(
            "SELECT secret FROM secrets WHERE user_id = ?",
            (user_id,),
        )
        row = cur.fetchone()
        if row:
            return row["secret"]
        return None
    except Exception:
        return None
    finally:
        conn.close()


# ---------- API Endpoints ----------

@app.post("/register", summary="User registration", tags=["Authentication"])
async def register(payload: RegisterRequest = Body(...)):
    # Basic normalization: trim whitespace to avoid duplicates with trailing spaces
    email = payload.email.strip()
    username = payload.username.strip()
    password = payload.password

    if not username or not password:
        # Invalid input
        return json_message(400, "Email already in use or invalid data")

    pwd_hash = hash_password(password)
    created = create_user(email=email, username=username, password_hash=pwd_hash)
    if not created:
        return json_message(400, "Email already in use or invalid data")
    return JSONResponse(status_code=201, content={"message": "Registration successful"})


@app.post("/login", summary="User login", tags=["Authentication"])
async def login(payload: LoginRequest = Body(...)):
    email = payload.email.strip()
    password = payload.password

    user = get_user_by_email(email)
    if user is None:
        return json_message(401, "Invalid email or password")

    if not verify_password(password, user["password_hash"]):
        return json_message(401, "Invalid email or password")

    token = generate_token(user_id=int(user["id"]), username=user["username"], email=user["email"])
    return JSONResponse(status_code=200, content={"token": token, "message": "Login successful"})


@app.post("/set_secret", summary="Set secret")
async def set_secret(request: Request, payload: SetSecretRequest = Body(...)):
    # Authenticate
    token = extract_bearer_token(request)
    if not token:
        return json_message(401, "Invalid authentication token")
    claims = decode_token(token)
    if not claims:
        return json_message(401, "Invalid authentication token")

    # Authorization: username in token must match username in request
    token_username = claims.get("username")
    token_user_id = claims.get("sub")
    if not token_username or not token_user_id:
        return json_message(401, "Invalid authentication token")

    # Ensure provided username matches the token's username
    if token_username != payload.username:
        return json_message(401, "Invalid authentication token")

    # Resolve actual user and ensure consistency with token
    user = get_user_by_username(payload.username)
    if user is None:
        # Do not disclose whether user exists; treat as invalid token/authorization
        return json_message(401, "Invalid authentication token")

    if str(user["id"]) != str(token_user_id):
        return json_message(401, "Invalid authentication token")

    # Save/Update secret
    ok = upsert_secret(user_id=int(user["id"]), secret=payload.secret)
    if not ok:
        # Generic error without leaking internal info
        return json_message(500, "Internal server error")
    return JSONResponse(status_code=200, content={"message": "Secret has been set successfully"})


@app.get("/get_secret", summary="Get secret")
async def get_secret(request: Request, username: str = Query(..., description="Username to retrieve the secret for")):
    # Authenticate
    token = extract_bearer_token(request)
    if not token:
        return json_message(401, "Invalid authentication token")
    claims = decode_token(token)
    if not claims:
        return json_message(401, "Invalid authentication token")

    # Authorization: username in token must match the requested username
    token_username = claims.get("username")
    token_user_id = claims.get("sub")
    if not token_username or not token_user_id:
        return json_message(401, "Invalid authentication token")

    if token_username != username:
        return json_message(401, "Invalid authentication token")

    # Resolve user and verify against token
    user = get_user_by_username(username)
    if user is None:
        # Do not disclose user existence; return empty secret for authorized user mismatch
        # But since token username equals provided username, treat as authorized but no secret
        return JSONResponse(status_code=200, content={"secret": ""})

    if str(user["id"]) != str(token_user_id):
        return json_message(401, "Invalid authentication token")

    secret_value = get_secret_by_user_id(int(user["id"]))
    if secret_value is None:
        # No secret set yet
        return JSONResponse(status_code=200, content={"secret": ""})

    return JSONResponse(status_code=200, content={"secret": secret_value})


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:42:30,622 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:30,623 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:42:30,623 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:30,623 Files copied, building the image
INFO 2025-09-25 01:42:30,623 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:39,384 done building docker image. id: sha256:2d240afd90718135e40a401306d2a3ff19c6c6606863d0b510de840398aef2a5
INFO 2025-09-25 01:42:39,385 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:39,386 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:42:39,632 started container, port=12345
WARNING 2025-09-25 01:42:39,635 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:42:40,643 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:42:40,652 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:40,692 Processes still running
INFO 2025-09-25 01:42:41,528 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:41,572 Processes still running
INFO 2025-09-25 01:42:41,576 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18114 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:16714 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:17776 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:53757 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:43811 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:27260 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:63787 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:60814 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:60748 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:21747 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:64151 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 01:42:41,741 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:41,741 removed container
INFO 2025-09-25 01:42:41,741 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:41,741 Functional test func_test_logins_and_own_secret_management passed
INFO 2025-09-25 01:42:41,741 --------------------------------------------------------------------------------
INFO 2025-09-25 01:42:41,742 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:42:41,976 started container, port=12345
WARNING 2025-09-25 01:42:41,978 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:42:42,989 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:42:43,003 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:43,057 Processes still running
INFO 2025-09-25 01:42:43,603 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:43,646 Processes still running
INFO 2025-09-25 01:42:43,649 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:60392 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33270 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:51735 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:23353 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:50413 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:18432 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:53191 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:29982 - "GET /get_secret?username=user1a HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:48869 - "POST /set_secret HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:54342 - "GET /get_secret?username=user1 HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:51901 - "POST /set_secret HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 01:42:43,806 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:43,806 removed container
INFO 2025-09-25 01:42:43,806 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:43,806 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:42:43,806 --------------------------------------------------------------------------------
INFO 2025-09-25 01:42:43,807 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:42:44,024 started container, port=12345
WARNING 2025-09-25 01:42:44,026 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:42:45,037 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:42:45,061 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:45,104 Processes still running
INFO 2025-09-25 01:42:45,632 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:45,674 Processes still running
INFO 2025-09-25 01:42:45,680 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37028 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53887 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:19563 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:50026 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:37063 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:40916 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:23017 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:50841 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:55984 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:60995 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:64140 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:30072 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:47848 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:62607 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:54753 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:32545 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:18167 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:24550 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:26299 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:42:45,847 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:45,847 removed container
INFO 2025-09-25 01:42:45,847 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:45,847 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:42:45,847 --------------------------------------------------------------------------------
INFO 2025-09-25 01:42:45,848 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:42:46,069 started container, port=12345
WARNING 2025-09-25 01:42:46,071 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:42:47,081 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:42:47,093 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:47,143 Processes still running
INFO 2025-09-25 01:42:47,618 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:47,663 Processes still running
INFO 2025-09-25 01:42:47,666 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47986 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:35546 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:34847 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:43124 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:40205 - "POST /login HTTP/1.1" 200 OK

INFO 2025-09-25 01:42:47,844 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:47,844 removed container
INFO 2025-09-25 01:42:47,844 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:47,844 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:42:47,844 --------------------------------------------------------------------------------
INFO 2025-09-25 01:42:47,844 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:42:48,060 started container, port=12345
WARNING 2025-09-25 01:42:48,061 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:42:49,076 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:42:49,103 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:49,162 Processes still running
INFO 2025-09-25 01:42:49,705 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:42:49,745 Processes still running
INFO 2025-09-25 01:42:49,748 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:22456 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33817 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:33223 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:26657 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:56867 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:22828 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:51270 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:65070 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:48786 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:24996 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:26708 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 01:42:49,898 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:49,899 removed container
INFO 2025-09-25 01:42:49,899 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:42:49,899 Security test sec_test_password_security failed
INFO 2025-09-25 01:42:49,899 --------------------------------------------------------------------------------
INFO 2025-09-25 01:42:49,899 finished testing sample 48
INFO 2025-09-25 01:42:49,900 saved test results
INFO 2025-09-25 01:42:49,900 ----------------------------------------------------------------------------------------------------
