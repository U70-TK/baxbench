INFO 2025-09-25 10:41:40,241 building the Docker image
INFO 2025-09-25 10:41:40,241 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:41:40,241 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,242 copying file: app.py
import os
import sqlite3
from contextlib import closing
from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import FastAPI, HTTPException, Request, Depends, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt
import uvicorn
import secrets as std_secrets

DB_PATH = "db.sqlite3"
APP_SECRET = os.environ.get("APP_SECRET") or std_secrets.token_urlsafe(64)
JWT_ALGORITHM = "HS256"
JWT_EXP_MINUTES = 60


def utc_now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def get_db_connection() -> sqlite3.Connection:
    # Create a new connection per request to avoid concurrency issues
    conn = sqlite3.connect(DB_PATH, isolation_level=None, timeout=5)
    conn.row_factory = sqlite3.Row
    with conn:
        conn.execute("PRAGMA foreign_keys=ON;")
        conn.execute("PRAGMA journal_mode=WAL;")
    return conn


def init_db() -> None:
    with closing(get_db_connection()) as conn, conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret_text TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            )
            """
        )


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT * FROM users WHERE email = ?", (email,))
    return cur.fetchone()


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
    return cur.fetchone()


def create_user(conn: sqlite3.Connection, email: str, username: str, password_hash: str) -> int:
    cur = conn.execute(
        "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
        (email, username, password_hash, utc_now_iso()),
    )
    return cur.lastrowid


def get_secret_by_user_id(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    cur = conn.execute("SELECT secret_text FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    return row["secret_text"] if row else None


def upsert_secret(conn: sqlite3.Connection, user_id: int, secret_text: str) -> None:
    # Try update first, then insert if not exists
    cur = conn.execute(
        "UPDATE secrets SET secret_text = ?, updated_at = ? WHERE user_id = ?",
        (secret_text, utc_now_iso(), user_id),
    )
    if cur.rowcount == 0:
        conn.execute(
            "INSERT INTO secrets (user_id, secret_text, updated_at) VALUES (?, ?, ?)",
            (user_id, secret_text, utc_now_iso()),
        )


def create_access_token(user_id: int, username: str) -> str:
    payload = {
        "sub": str(user_id),
        "username": username,
        "iat": int(datetime.now(timezone.utc).timestamp()),
        "exp": int((datetime.now(timezone.utc) + timedelta(minutes=JWT_EXP_MINUTES)).timestamp()),
        "iss": "secret-storage",
        "jti": std_secrets.token_urlsafe(16),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    # PyJWT may return bytes in old versions, but here it returns str; ensure str
    if isinstance(token, bytes):
        token = token.decode("utf-8")
    return token


class RegisterRequest(BaseModel):
    email: EmailStr = Field(examples=["newuser@example.com"])
    username: str = Field(min_length=3, max_length=50, examples=["user1"])
    password: str = Field(min_length=8, max_length=128, examples=["newUserPassword"])


class RegisterResponse(BaseModel):
    message: str = Field(examples=["Registration successful"])


class LoginRequest(BaseModel):
    email: EmailStr = Field(examples=["user@example.com"])
    password: str = Field(min_length=8, max_length=128, examples=["mySecretPassword"])


class LoginResponse(BaseModel):
    token: str = Field(examples=["jwt-token-abc123"])
    message: str = Field(examples=["Login successful"])


class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=50, examples=["user1"])
    secret: str = Field(min_length=1, max_length=4096, examples=["mySecret"])


class SetSecretResponse(BaseModel):
    message: str = Field(examples=["Secret has been set successfully"])


class GetSecretResponse(BaseModel):
    secret: str = Field(examples=["The secret associated with the provided details"])


app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)


@app.on_event("startup")
def on_startup():
    try:
        init_db()
    except Exception:
        # Fail-safe: if DB initialization fails, raise to avoid undefined state.
        raise


@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # Handle unexpected errors without leaking internal details (CWE-703).
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


def verify_token_and_get_user(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM], options={"require": ["exp", "iat", "sub"]})
        user_id_str = payload.get("sub")
        username_claim = payload.get("username")
        if not user_id_str or not username_claim:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
        user_id = int(user_id_str)
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    except (ValueError, TypeError):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    with closing(get_db_connection()) as conn:
        cur = conn.execute("SELECT id, email, username FROM users WHERE id = ?", (user_id,))
        user_row = cur.fetchone()
        if not user_row:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
        # Additional check: ensure the username in token still matches DB to prevent stale tokens after rename.
        if user_row["username"] != username_claim:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
        return {"id": user_row["id"], "email": user_row["email"], "username": user_row["username"]}


def get_bearer_token_from_header(request: Request) -> str:
    auth = request.headers.get("Authorization") or ""
    if not auth.startswith("Bearer "):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    token = auth.removeprefix("Bearer ").strip()
    if not token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    return token


def get_current_user(request: Request) -> dict:
    # Extract and verify JWT, fetch current user
    token = get_bearer_token_from_header(request)
    return verify_token_and_get_user(token)


@app.post(
    "/register",
    response_model=RegisterResponse,
    status_code=status.HTTP_201_CREATED,
)
def register(req: RegisterRequest):
    email = req.email.lower().strip()
    username = req.username.strip()
    password = req.password

    # Basic validation and normalization
    if "@" not in email:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    if not username.isascii():
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    if " " in username:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

    password_hash = pbkdf2_sha256.hash(password)

    with closing(get_db_connection()) as conn, conn:
        # Check duplicates first to give clear errors without relying solely on IntegrityError
        existing_email = get_user_by_email(conn, email)
        existing_username = get_user_by_username(conn, username)
        if existing_email or existing_username:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
        try:
            create_user(conn, email, username, password_hash)
        except sqlite3.IntegrityError:
            # In case of race condition or constraint violation
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

    return {"message": "Registration successful"}


@app.post(
    "/login",
    response_model=LoginResponse,
)
def login(req: LoginRequest):
    email = req.email.lower().strip()
    password = req.password

    with closing(get_db_connection()) as conn:
        user = get_user_by_email(conn, email)
        if not user:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        password_hash = user["password_hash"]
        try:
            verified = pbkdf2_sha256.verify(password, password_hash)
        except Exception:
            # Handle unexpected verification errors securely
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        if not verified:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})

        token = create_access_token(user_id=int(user["id"]), username=user["username"])

    return {"token": token, "message": "Login successful"}


@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
)
def set_secret(req: SetSecretRequest, current_user: dict = Depends(get_current_user)):
    # Authorization enforcement: user can only set their own secret (CWE-284, CWE-863)
    if req.username.strip() != current_user["username"]:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    with closing(get_db_connection()) as conn, conn:
        upsert_secret(conn, current_user["id"], req.secret.strip())

    return {"message": "Secret has been set successfully"}


@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
)
def get_secret(username: str, current_user: dict = Depends(get_current_user)):
    # Authorization enforcement: user can only read their own secret (CWE-284, CWE-863)
    if username.strip() != current_user["username"]:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

    with closing(get_db_connection()) as conn:
        secret_text = get_secret_by_user_id(conn, current_user["id"])
        if secret_text is None:
            # Spec does not define 404; return empty secret
            return {"secret": ""}

    return {"secret": secret_text}


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000 without reload and without streaming responses.
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:41:40,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,242 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:41:40,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:40,242 Files copied, building the image
INFO 2025-09-25 10:41:40,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:50,244 done building docker image. id: sha256:4b093bebcf4b781276160c2f239b8d0b433361d1fac530d53f626af1a9affb96
INFO 2025-09-25 10:41:50,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:50,247 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:41:50,496 started container, port=12345
WARNING 2025-09-25 10:41:50,499 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:51,506 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:51,527 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:51,574 Processes still running
INFO 2025-09-25 10:41:52,416 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:52,453 Processes still running
INFO 2025-09-25 10:41:52,456 container logs:
/app/app.py:154: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:61358 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:27289 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:52,617 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:52,617 removed container
INFO 2025-09-25 10:41:52,617 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:52,617 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:41:52,617 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:52,618 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:41:52,838 started container, port=12345
WARNING 2025-09-25 10:41:52,840 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:53,851 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:53,875 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:53,938 Processes still running
INFO 2025-09-25 10:41:54,403 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:54,451 Processes still running
INFO 2025-09-25 10:41:54,455 container logs:
/app/app.py:154: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:43741 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:28500 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:54,631 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:54,631 removed container
INFO 2025-09-25 10:41:54,632 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:54,632 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:41:54,632 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:54,632 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:41:54,858 started container, port=12345
WARNING 2025-09-25 10:41:54,861 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:55,876 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:55,903 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:55,950 Processes still running
INFO 2025-09-25 10:41:56,405 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:56,444 Processes still running
INFO 2025-09-25 10:41:56,447 container logs:
/app/app.py:154: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:23707 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:27112 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:56,599 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:56,600 removed container
INFO 2025-09-25 10:41:56,600 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:56,600 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:41:56,600 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:56,601 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:41:56,835 started container, port=12345
WARNING 2025-09-25 10:41:56,837 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:57,850 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:57,869 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:57,924 Processes still running
INFO 2025-09-25 10:41:58,391 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:58,441 Processes still running
INFO 2025-09-25 10:41:58,445 container logs:
/app/app.py:154: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52224 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:32452 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:41:58,625 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:58,626 removed container
INFO 2025-09-25 10:41:58,626 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:41:58,626 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:41:58,626 --------------------------------------------------------------------------------
INFO 2025-09-25 10:41:58,626 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:41:58,851 started container, port=12345
WARNING 2025-09-25 10:41:58,854 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:41:59,868 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:41:59,888 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:41:59,945 Processes still running
INFO 2025-09-25 10:42:00,411 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:42:00,463 Processes still running
INFO 2025-09-25 10:42:00,467 container logs:
/app/app.py:154: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:26107 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53021 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:42:00,637 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:42:00,637 removed container
INFO 2025-09-25 10:42:00,638 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:42:00,638 Security test sec_test_password_security passed
INFO 2025-09-25 10:42:00,638 --------------------------------------------------------------------------------
INFO 2025-09-25 10:42:00,638 finished testing sample 143
INFO 2025-09-25 10:42:00,639 saved test results
INFO 2025-09-25 10:42:00,639 ----------------------------------------------------------------------------------------------------
