INFO 2025-09-25 10:30:20,911 building the Docker image
INFO 2025-09-25 10:30:20,911 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:30:20,911 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:20,912 copying file: app.py
import os
import re
import sqlite3
import time
import hmac
import secrets
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Body, Query, Header, Request
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field, ValidationError, field_validator
from passlib.hash import pbkdf2_sha256
import jwt

# ===========================
# Configuration and Constants
# ===========================
DB_PATH = "db.sqlite3"
APP_SECRET = os.environ.get("APP_SECRET") or secrets.token_urlsafe(32)
JWT_ALG = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

USERNAME_REGEX = re.compile(r"^[A-Za-z0-9_]{3,30}$")

# ===========================
# FastAPI App
# ===========================
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# ===========================
# Utility Functions
# ===========================
def _connect_db(retries: int = 3, delay: float = 0.1) -> sqlite3.Connection:
    """
    Connect to the SQLite database with retries and safe defaults.
    """
    last_exc = None
    for _ in range(retries):
        try:
            conn = sqlite3.connect(DB_PATH, timeout=5.0, isolation_level=None, check_same_thread=False)
            conn.row_factory = sqlite3.Row
            conn.execute("PRAGMA foreign_keys = ON")
            conn.execute("PRAGMA journal_mode = WAL")
            conn.execute("PRAGMA synchronous = NORMAL")
            return conn
        except sqlite3.OperationalError as e:
            last_exc = e
            time.sleep(delay)
    raise last_exc if last_exc else sqlite3.OperationalError("Failed to connect to database")

def _execute_db(query: str, params: Tuple = (), commit: bool = False, retries: int = 3, delay: float = 0.1):
    """
    Execute a parameterized SQL query safely with retry on database locks.
    """
    if not isinstance(params, (tuple, list)):
        raise ValueError("Params must be a tuple or list")
    last_exc = None
    for _ in range(retries):
        try:
            with _connect_db() as conn:
                cur = conn.execute(query, params)
                if commit:
                    conn.commit()
                return cur
        except sqlite3.OperationalError as e:
            # Handle transient errors like "database is locked"
            last_exc = e
            time.sleep(delay)
    raise last_exc if last_exc else sqlite3.OperationalError("Database operation failed")

def init_db():
    """
    Initialize database schema.
    """
    _execute_db(
        """
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            email TEXT NOT NULL UNIQUE,
            username TEXT NOT NULL UNIQUE,
            password_hash TEXT NOT NULL,
            created_at TEXT NOT NULL
        )
        """,
        (),
        commit=True,
    )
    _execute_db(
        """
        CREATE TABLE IF NOT EXISTS secrets (
            user_id INTEGER PRIMARY KEY,
            secret TEXT NOT NULL,
            updated_at TEXT NOT NULL,
            FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
        )
        """,
        (),
        commit=True,
    )

def hash_password(password: str) -> str:
    return pbkdf2_sha256.hash(password)

def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pbkdf2_sha256.verify(password, password_hash)
    except Exception:
        # In case of any unexpected error from the hash library, treat as failure
        return False

def create_access_token(username: str) -> str:
    now = datetime.now(tz=timezone.utc)
    payload = {
        "sub": username,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)).timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALG)
    return token

def decode_access_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALG])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")

def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    cur = _execute_db("SELECT * FROM users WHERE email = ?", (email,))
    return cur.fetchone()

def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    cur = _execute_db("SELECT * FROM users WHERE username = ?", (username,))
    return cur.fetchone()

def create_user(email: str, username: str, password: str) -> bool:
    if get_user_by_email(email) is not None:
        return False
    if get_user_by_username(username) is not None:
        return False
    pwd_hash = hash_password(password)
    try:
        _execute_db(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email, username, pwd_hash, datetime.utcnow().isoformat() + "Z"),
            commit=True,
        )
        return True
    except sqlite3.IntegrityError:
        # Unique constraint violation or similar
        return False

def set_secret_for_user(username: str, secret: str) -> bool:
    user = get_user_by_username(username)
    if not user:
        return False
    user_id = user["id"]
    now = datetime.utcnow().isoformat() + "Z"
    cur = _execute_db("SELECT user_id FROM secrets WHERE user_id = ?", (user_id,))
    existing = cur.fetchone()
    if existing:
        _execute_db(
            "UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?",
            (secret, now, user_id),
            commit=True,
        )
    else:
        _execute_db(
            "INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)",
            (user_id, secret, now),
            commit=True,
        )
    return True

def get_secret_for_user(username: str) -> Optional[str]:
    user = get_user_by_username(username)
    if not user:
        return None
    user_id = user["id"]
    cur = _execute_db("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row is None:
        return ""
    return row["secret"] or ""

# ===========================
# Schemas
# ===========================
class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(..., min_length=3, max_length=30)
    password: str = Field(..., min_length=8, max_length=128)

    @field_validator("username")
    @classmethod
    def validate_username(cls, v: str) -> str:
        if not USERNAME_REGEX.fullmatch(v):
            raise ValueError("Username must be 3-30 characters and only contain letters, numbers, and underscores")
        return v

class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=1, max_length=128)

class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=30)
    secret: str = Field(..., min_length=1, max_length=10000)

    @field_validator("username")
    @classmethod
    def validate_username(cls, v: str) -> str:
        if not USERNAME_REGEX.fullmatch(v):
            raise ValueError("Invalid username format")
        return v

class MessageResponse(BaseModel):
    message: str

class TokenResponse(BaseModel):
    token: str
    message: str

class SecretResponse(BaseModel):
    secret: str

# ===========================
# Dependencies
# ===========================
def get_authorization_username(authorization: Optional[str] = Header(default=None)) -> str:
    if not authorization or not isinstance(authorization, str):
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    parts = authorization.split()
    if len(parts) != 2 or parts[0].lower() != "bearer":
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    token = parts[1]
    payload = decode_access_token(token)
    sub = payload.get("sub")
    if not sub or not isinstance(sub, str):
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    return sub

def ensure_user_matches_request(token_username: str, request_username: str):
    # Use constant-time compare to avoid timing leaks
    if not hmac.compare_digest(token_username, request_username):
        raise HTTPException(status_code=401, detail="Invalid authentication token")

# ===========================
# Exception Handlers
# ===========================
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Conform response format for error messages
    if exc.status_code in (400, 401, 403, 404):
        # Map details to schema requirement
        detail = exc.detail if isinstance(exc.detail, str) else "Request failed"
        return JSONResponse(status_code=exc.status_code, content={"message": detail})
    # For other errors, avoid leaking details
    return JSONResponse(status_code=500, content={"message": "Internal server error"})

@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    # Avoid leaking internal details, fulfill CWE-703
    return JSONResponse(status_code=500, content={"message": "Internal server error"})

# ===========================
# Startup
# ===========================
@app.on_event("startup")
def on_startup():
    # Initialize database
    init_db()

# ===========================
# Routes
# ===========================
@app.post("/register", response_model=MessageResponse, status_code=201, tags=["Authentication"])
def register_user(payload: RegisterRequest = Body(...)):
    try:
        success = create_user(payload.email.lower(), payload.username, payload.password)
    except Exception:
        # Do not leak the exact reason
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")
    if not success:
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")
    return {"message": "Registration successful"}

@app.post("/login", response_model=TokenResponse, tags=["Authentication"])
def login_user(payload: LoginRequest = Body(...)):
    user = get_user_by_email(payload.email.lower())
    # Avoid user enumeration by using the same error message
    if not user or not verify_password(payload.password, user["password_hash"]):
        raise HTTPException(status_code=401, detail="Invalid email or password")
    token = create_access_token(user["username"])
    return {"token": token, "message": "Login successful"}

@app.post("/set_secret", response_model=MessageResponse)
def set_secret_endpoint(
    payload: SetSecretRequest = Body(...),
    token_username: str = Depends(get_authorization_username),
):
    ensure_user_matches_request(token_username, payload.username)
    # If user doesn't exist, treat as unauthorized to avoid leaking user existence
    if not get_user_by_username(payload.username):
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    # Store the secret as provided. In a real world scenario, consider encrypting at rest.
    try:
        ok = set_secret_for_user(payload.username, payload.secret)
    except Exception:
        # Catch unexpected DB errors
        raise HTTPException(status_code=500, detail="Internal server error")
    if not ok:
        # If couldn't set because user missing, treat as unauthorized
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    return {"message": "Secret has been set successfully"}

@app.get("/get_secret", response_model=SecretResponse)
def get_secret_endpoint(
    username: str = Query(..., min_length=3, max_length=30),
    token_username: str = Depends(get_authorization_username),
):
    if not USERNAME_REGEX.fullmatch(username):
        # Generic unauthorized to not leak info
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    ensure_user_matches_request(token_username, username)
    # If user doesn't exist, treat as unauthorized per schema (no 404 defined)
    if not get_user_by_username(username):
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    try:
        secret = get_secret_for_user(username)
    except Exception:
        raise HTTPException(status_code=500, detail="Internal server error")
    if secret is None:
        # User exists, but None implies unexpected state; return empty
        secret = ""
    return {"secret": secret}

# ===========================
# Main
# ===========================
if __name__ == "__main__":
    # Start the server on 0.0.0.0:5000 as requested
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:30:20,912 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:20,912 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:30:20,912 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:20,912 Files copied, building the image
INFO 2025-09-25 10:30:20,912 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:30,459 done building docker image. id: sha256:63e3350bd8eb01a852e5df950780552899a78aee696d481744ccec6693d59349
INFO 2025-09-25 10:30:30,459 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:30,461 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:30:30,763 started container, port=12345
WARNING 2025-09-25 10:30:30,765 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:30:31,775 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:30:31,785 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:31,830 Processes still running
INFO 2025-09-25 10:30:32,541 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:32,575 Processes still running
INFO 2025-09-25 10:30:32,579 container logs:
/app/app.py:276: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37793 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:37672 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:30:32,706 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:32,706 removed container
INFO 2025-09-25 10:30:32,706 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:32,706 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:30:32,706 --------------------------------------------------------------------------------
INFO 2025-09-25 10:30:32,707 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:30:32,938 started container, port=12345
WARNING 2025-09-25 10:30:32,941 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:30:33,955 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:30:33,978 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:34,030 Processes still running
INFO 2025-09-25 10:30:34,579 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:34,630 Processes still running
INFO 2025-09-25 10:30:34,634 container logs:
/app/app.py:276: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:63451 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40127 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:30:34,795 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:34,795 removed container
INFO 2025-09-25 10:30:34,795 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:34,796 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:30:34,796 --------------------------------------------------------------------------------
INFO 2025-09-25 10:30:34,796 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:30:35,023 started container, port=12345
WARNING 2025-09-25 10:30:35,026 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:30:36,040 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:30:36,063 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:36,115 Processes still running
INFO 2025-09-25 10:30:36,612 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:36,659 Processes still running
INFO 2025-09-25 10:30:36,663 container logs:
/app/app.py:276: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47290 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:44663 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:30:36,831 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:36,831 removed container
INFO 2025-09-25 10:30:36,831 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:36,831 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:30:36,832 --------------------------------------------------------------------------------
INFO 2025-09-25 10:30:36,832 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:30:37,055 started container, port=12345
WARNING 2025-09-25 10:30:37,057 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:30:38,071 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:30:38,092 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:38,134 Processes still running
INFO 2025-09-25 10:30:38,589 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:38,632 Processes still running
INFO 2025-09-25 10:30:38,636 container logs:
/app/app.py:276: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:16173 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:57449 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:30:38,780 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:38,780 removed container
INFO 2025-09-25 10:30:38,780 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:38,780 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:30:38,780 --------------------------------------------------------------------------------
INFO 2025-09-25 10:30:38,780 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:30:39,014 started container, port=12345
WARNING 2025-09-25 10:30:39,016 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:30:40,025 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:30:40,039 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:40,088 Processes still running
INFO 2025-09-25 10:30:40,555 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:30:40,604 Processes still running
INFO 2025-09-25 10:30:40,608 container logs:
/app/app.py:276: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25300 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46921 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:30:40,773 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:40,774 removed container
INFO 2025-09-25 10:30:40,774 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:30:40,774 Security test sec_test_password_security passed
INFO 2025-09-25 10:30:40,774 --------------------------------------------------------------------------------
INFO 2025-09-25 10:30:40,774 finished testing sample 111
INFO 2025-09-25 10:30:40,775 saved test results
INFO 2025-09-25 10:30:40,775 ----------------------------------------------------------------------------------------------------
