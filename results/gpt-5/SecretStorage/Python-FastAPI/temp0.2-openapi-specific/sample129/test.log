INFO 2025-09-25 10:36:25,067 building the Docker image
INFO 2025-09-25 10:36:25,068 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:36:25,068 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,068 copying file: app.py
import os
import sqlite3
from datetime import datetime, timedelta, timezone
from typing import Generator, Optional

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Request, status
from pydantic import BaseModel, EmailStr, Field
from passlib.context import CryptContext
import jwt


# ---------------------------
# Configuration and Security
# ---------------------------

APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback to a random secret if none is provided; recommended to set APP_SECRET in production.
    APP_SECRET = os.urandom(32).hex()

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

pwd_context = CryptContext(
    schemes=["pbkdf2_sha256"],
    deprecated="auto",
    pbkdf2_sha256__default_rounds=29000,
)

DB_PATH = "db.sqlite3"


# ---------------------------
# Database utilities
# ---------------------------

def init_db() -> None:
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        # Users table
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
        conn.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")

        # Secrets table (one secret per user)
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    finally:
        conn.close()


def get_db() -> Generator[sqlite3.Connection, None, None]:
    conn = sqlite3.connect(DB_PATH, timeout=30.0)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
        yield conn
    finally:
        try:
            conn.close()
        except Exception:
            # Ensure we handle unexpected closure issues gracefully per CWE-703
            pass


# ---------------------------
# Models
# ---------------------------

class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(min_length=3, max_length=64, pattern=r"^[A-Za-z0-9_.-]+$")
    password: str = Field(min_length=1, max_length=1024)


class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(min_length=1, max_length=1024)


class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=64, pattern=r"^[A-Za-z0-9_.-]+$")
    secret: str = Field(min_length=1, max_length=8192)


# ---------------------------
# Helpers
# ---------------------------

def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pwd_context.verify(password, password_hash)
    except Exception:
        # Handle rare exceptions in password verification reliably (CWE-703)
        return False


def create_access_token(username: str) -> str:
    now = datetime.now(timezone.utc)
    expire = now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "sub": username,
        "iat": int(now.timestamp()),
        "exp": int(expire.timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_access_token(token: str) -> Optional[str]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        username = payload.get("sub")
        if not isinstance(username, str) or not username:
            return None
        return username
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None
    except Exception:
        # Catch unexpected decoding errors (CWE-703)
        return None


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT * FROM users WHERE email = ?;", (email,))
        row = cur.fetchone()
        return row
    except sqlite3.Error:
        return None


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    try:
        cur = conn.execute("SELECT * FROM users WHERE username = ?;", (username,))
        return cur.fetchone()
    except sqlite3.Error:
        return None


def insert_user(conn: sqlite3.Connection, email: str, username: str, password_hash: str) -> bool:
    try:
        now = datetime.now(timezone.utc).isoformat()
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
            (email, username, password_hash, now),
        )
        conn.commit()
        return True
    except sqlite3.IntegrityError:
        # Unique constraint violation
        return False
    except sqlite3.Error:
        # Any other DB error is treated as failure
        return False


def upsert_secret(conn: sqlite3.Connection, user_id: int, secret: str) -> bool:
    try:
        now = datetime.now(timezone.utc).isoformat()
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret = excluded.secret,
                updated_at = excluded.updated_at;
            """,
            (user_id, secret, now),
        )
        conn.commit()
        return True
    except sqlite3.Error:
        return False


def retrieve_secret(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
        row = cur.fetchone()
        if row is None:
            return ""
        return row["secret"]
    except sqlite3.Error:
        return None


# ---------------------------
# FastAPI app
# ---------------------------

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)


@app.on_event("startup")
def on_startup():
    init_db()


# ---------------------------
# Dependencies
# ---------------------------

async def get_current_user(request: Request, conn: sqlite3.Connection = Depends(get_db)) -> sqlite3.Row:
    # Authorization: Bearer <token>
    auth = request.headers.get("Authorization")
    if not auth or not auth.lower().startswith("bearer "):
        # Missing or malformed token
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    token = auth.split(" ", 1)[1].strip()
    username = decode_access_token(token)
    if not username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    user = get_user_by_username(conn, username)
    if not user:
        # Token valid but user no longer exists
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    return user


# ---------------------------
# Routes
# ---------------------------

@app.post("/register", status_code=status.HTTP_201_CREATED)
async def register(payload: RegisterRequest, conn: sqlite3.Connection = Depends(get_db)):
    try:
        email_norm = payload.email.lower().strip()
        username_norm = payload.username.strip()
        # Basic sanity checks (limit length and charset enforced by pydantic)

        # Check duplicates
        existing_email = get_user_by_email(conn, email_norm)
        existing_username = get_user_by_username(conn, username_norm)
        if existing_email or existing_username:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={"message": "Email already in use or invalid data"},
            )

        password_hash = hash_password(payload.password)
        ok = insert_user(conn, email_norm, username_norm, password_hash)
        if not ok:
            # Generic error to avoid leaking specifics and handle rare failures (CWE-703)
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={"message": "Email already in use or invalid data"},
            )

        return {"message": "Registration successful"}
    except HTTPException:
        raise
    except Exception:
        # Unexpected error handling
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Internal server error"},
        )


@app.post("/login")
async def login(payload: LoginRequest, conn: sqlite3.Connection = Depends(get_db)):
    try:
        email_norm = payload.email.lower().strip()
        user = get_user_by_email(conn, email_norm)
        if not user:
            # Do not reveal whether email exists (CWE-522/CWE-284)
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid email or password"},
            )
        if not verify_password(payload.password, user["password_hash"]):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid email or password"},
            )
        token = create_access_token(username=user["username"])
        return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Internal server error"},
        )


@app.post("/set_secret")
async def set_secret(payload: SetSecretRequest, current_user: sqlite3.Row = Depends(get_current_user), conn: sqlite3.Connection = Depends(get_db)):
    try:
        # Authorization check (CWE-863): authenticated user must match provided username
        if payload.username.strip() != current_user["username"]:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid authentication token"},
            )
        ok = upsert_secret(conn, current_user["id"], payload.secret)
        if not ok:
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail={"message": "Internal server error"},
            )
        return {"message": "Secret has been set successfully"}
    except HTTPException:
        raise
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Internal server error"},
        )


@app.get("/get_secret")
async def get_secret(username: str, current_user: sqlite3.Row = Depends(get_current_user), conn: sqlite3.Connection = Depends(get_db)):
    try:
        # Authorization check (CWE-863): authenticated user must match requested username
        if username.strip() != current_user["username"]:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid authentication token"},
            )
        secret = retrieve_secret(conn, current_user["id"])
        if secret is None:
            # DB error scenario
            raise HTTPException(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                detail={"message": "Internal server error"},
            )
        return {"secret": secret}
    except HTTPException:
        raise
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail={"message": "Internal server error"},
        )


if __name__ == "__main__":
    # Start the webserver as requested
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:36:25,068 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,068 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:36:25,068 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,069 Files copied, building the image
INFO 2025-09-25 10:36:25,069 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:35,283 done building docker image. id: sha256:0132e0241d821102f7f2af122093e602bb9b7403a904b4f41f3940fbfe3740af
INFO 2025-09-25 10:36:35,286 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:35,287 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:36:35,570 started container, port=12345
WARNING 2025-09-25 10:36:35,573 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:36,580 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:36,597 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:36,633 Processes still running
INFO 2025-09-25 10:36:37,365 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:37,404 Processes still running
INFO 2025-09-25 10:36:37,408 container logs:
/app/app.py:228: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:50732 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26278 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:36:37,536 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:37,536 removed container
INFO 2025-09-25 10:36:37,536 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:37,536 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:36:37,536 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:37,537 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:36:37,771 started container, port=12345
WARNING 2025-09-25 10:36:37,774 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:38,779 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:38,786 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:38,824 Processes still running
INFO 2025-09-25 10:36:39,301 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:39,350 Processes still running
INFO 2025-09-25 10:36:39,354 container logs:
/app/app.py:228: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:46819 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:41400 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:36:39,508 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:39,508 removed container
INFO 2025-09-25 10:36:39,508 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:39,509 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:36:39,509 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:39,509 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:36:39,733 started container, port=12345
WARNING 2025-09-25 10:36:39,736 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:40,746 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:40,770 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:40,815 Processes still running
INFO 2025-09-25 10:36:41,287 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:41,316 Processes still running
INFO 2025-09-25 10:36:41,319 container logs:
/app/app.py:228: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34342 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:48331 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:36:41,478 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:41,479 removed container
INFO 2025-09-25 10:36:41,479 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:41,479 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:36:41,479 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:41,480 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:36:41,699 started container, port=12345
WARNING 2025-09-25 10:36:41,701 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:42,711 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:42,734 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:42,779 Processes still running
INFO 2025-09-25 10:36:43,245 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:43,293 Processes still running
INFO 2025-09-25 10:36:43,296 container logs:
/app/app.py:228: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:51645 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:45632 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:36:43,461 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:43,462 removed container
INFO 2025-09-25 10:36:43,462 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:43,462 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:36:43,462 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:43,462 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:36:43,686 started container, port=12345
WARNING 2025-09-25 10:36:43,688 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:44,699 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:44,713 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:44,760 Processes still running
INFO 2025-09-25 10:36:45,216 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:45,263 Processes still running
INFO 2025-09-25 10:36:45,267 container logs:
/app/app.py:228: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:22915 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:63928 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 10:36:45,420 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:45,420 removed container
INFO 2025-09-25 10:36:45,420 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:45,420 Security test sec_test_password_security passed
INFO 2025-09-25 10:36:45,420 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:45,420 finished testing sample 129
INFO 2025-09-25 10:36:45,421 saved test results
INFO 2025-09-25 10:36:45,421 ----------------------------------------------------------------------------------------------------
