INFO 2025-09-25 01:34:18,350 building the Docker image
INFO 2025-09-25 01:34:18,350 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:34:18,350 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:18,350 copying file: app.py
import os
import sqlite3
import secrets as seclib
import time
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Security, status, Request, Response, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field
from passlib.hash import pbkdf2_sha256
import jwt  # PyJWT
from email_validator import validate_email, EmailNotValidError

DB_PATH = "db.sqlite3"

# Load application secret for JWT signing
APP_SECRET = os.environ.get("APP_SECRET") or seclib.token_urlsafe(64)
JWT_ALG = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Configure HTTP Bearer auth
bearer_scheme = HTTPBearer(auto_error=True)

# --------------------------
# Database utilities
# --------------------------
def _connect_db() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, timeout=30.0, isolation_level=None, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    # Apply secure and safe pragmas
    with conn:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.execute("PRAGMA synchronous = NORMAL;")
        conn.execute("PRAGMA busy_timeout = 5000;")
    return conn

def get_db():
    conn = _connect_db()
    try:
        yield conn
    finally:
        try:
            conn.close()
        except Exception:
            pass

def init_db():
    conn = _connect_db()
    try:
        with conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER PRIMARY KEY,
                    secret TEXT,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
    finally:
        try:
            conn.close()
        except Exception:
            pass

@app.on_event("startup")
def _on_startup():
    init_db()

# --------------------------
# Models
# --------------------------
class RegisterRequest(BaseModel):
    email: str = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., min_length=1, max_length=64, examples=["user1"])
    password: str = Field(..., min_length=1, max_length=4096, examples=["newUserPassword"])

class LoginRequest(BaseModel):
    email: str = Field(..., examples=["user@example.com"])
    password: str = Field(..., min_length=1, max_length=4096, examples=["mySecretPassword"])

class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=1, max_length=64, examples=["user1"])
    secret: str = Field(..., max_length=10000, examples=["mySecret"])

# --------------------------
# Helper functions
# --------------------------
def normalize_email(email: str) -> str:
    try:
        v = validate_email(email, check_deliverability=False)
        return v.normalized
    except EmailNotValidError as e:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

def validate_username(username: str) -> str:
    # Allow alphanumerics and _.- only for safety
    import re
    if not (1 <= len(username) <= 64):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    if not re.fullmatch(r"[A-Za-z0-9_.-]+", username):
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    return username

def password_hash(password: str) -> str:
    # pbkdf2_sha256 is a well-supported option without extra dependencies
    return pbkdf2_sha256.hash(password)

def password_verify(password: str, hashed: str) -> bool:
    try:
        return pbkdf2_sha256.verify(password, hashed)
    except Exception:
        return False

def create_access_token(sub: str, uid: int, email: str) -> str:
    now = datetime.now(tz=timezone.utc)
    exp = now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "sub": sub,
        "uid": uid,
        "email": email,
        "iat": int(now.timestamp()),
        "exp": int(exp.timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALG)
    return token

def decode_access_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALG])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
    return cur.fetchone()

def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE username = ?;", (username,))
    return cur.fetchone()

def insert_user(conn: sqlite3.Connection, email: str, username: str, pwd_hash: str) -> int:
    now = datetime.now(tz=timezone.utc).isoformat()
    cur = conn.execute(
        "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
        (email, username, pwd_hash, now),
    )
    return cur.lastrowid

def upsert_secret(conn: sqlite3.Connection, user_id: int, secret: str) -> None:
    now = datetime.now(tz=timezone.utc).isoformat()
    # Use INSERT OR REPLACE with primary key user_id
    conn.execute(
        """
        INSERT INTO secrets (user_id, secret, updated_at)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET secret=excluded.secret, updated_at=excluded.updated_at;
        """,
        (user_id, secret, now),
    )

def get_secret(conn: sqlite3.Connection, user_id: int) -> str:
    cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
    row = cur.fetchone()
    if row is None:
        return ""
    return row["secret"] if row["secret"] is not None else ""

# --------------------------
# Security dependency
# --------------------------
def get_current_user(
    credentials: HTTPAuthorizationCredentials = Security(bearer_scheme),
    conn: sqlite3.Connection = Depends(get_db),
) -> sqlite3.Row:
    if not credentials or not credentials.scheme or credentials.scheme.lower() != "bearer":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    token = credentials.credentials
    payload = decode_access_token(token)
    username = payload.get("sub")
    uid = payload.get("uid")
    if not username or uid is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    user = get_user_by_username(conn, username)
    if user is None or user["id"] != uid:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    return user

# --------------------------
# Middleware: Security headers for sensitive routes
# --------------------------
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response: Response = await call_next(request)
    # Prevent caching of sensitive responses
    if request.url.path in ("/login", "/set_secret", "/get_secret"):
        response.headers["Cache-Control"] = "no-store"
        response.headers["Pragma"] = "no-cache"
    # Some sane defaults
    response.headers.setdefault("X-Content-Type-Options", "nosniff")
    response.headers.setdefault("X-Frame-Options", "DENY")
    response.headers.setdefault("Referrer-Policy", "no-referrer")
    return response

# --------------------------
# Routes
# --------------------------
@app.post("/register", status_code=status.HTTP_201_CREATED, tags=["Authentication"])
def register(payload: RegisterRequest, conn: sqlite3.Connection = Depends(get_db)):
    # Validate email and username
    email_norm = normalize_email(payload.email)
    username_norm = validate_username(payload.username)
    # For security, we do not enforce long min length here to match schema examples, but we hash the password
    if not payload.password:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    if len(payload.password) > 4096:
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

    # Check uniqueness
    try:
        existing_email = get_user_by_email(conn, email_norm)
        existing_user = get_user_by_username(conn, username_norm)
        if existing_email is not None or existing_user is not None:
            raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

        pwd_hash = password_hash(payload.password)
        with conn:
            insert_user(conn, email_norm, username_norm, pwd_hash)
    except HTTPException:
        raise
    except sqlite3.IntegrityError:
        # Unique constraint violations
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})
    except Exception:
        # Handle unexpected conditions (CWE-703)
        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail={"message": "Email already in use or invalid data"})

    return {"message": "Registration successful"}

@app.post("/login", tags=["Authentication"])
def login(payload: LoginRequest, response: Response, conn: sqlite3.Connection = Depends(get_db)):
    # Normalize email
    try:
        email_norm = normalize_email(payload.email)
    except HTTPException:
        # For login, we should not reveal whether email format is invalid vs not found
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})

    try:
        user = get_user_by_email(conn, email_norm)
        if user is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        if not password_verify(payload.password, user["password_hash"]):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})
        token = create_access_token(sub=user["username"], uid=user["id"], email=user["email"])
        # No cookies used; JWT is returned in body. Ensure no caching
        response.headers["Cache-Control"] = "no-store"
        response.headers["Pragma"] = "no-cache"
        return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except Exception:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid email or password"})

@app.post("/set_secret")
def set_secret(
    payload: SetSecretRequest,
    response: Response,
    current_user: sqlite3.Row = Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db),
):
    # Authorization check: ensure token user matches requested username (CWE-863)
    if payload.username != current_user["username"]:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    # Limit size and store
    try:
        with conn:
            upsert_secret(conn, current_user["id"], payload.secret)
        response.headers["Cache-Control"] = "no-store"
        response.headers["Pragma"] = "no-cache"
        return {"message": "Secret has been set successfully"}
    except Exception:
        # Do not leak details
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

@app.get("/get_secret")
def get_secret_endpoint(
    username: str = Query(..., examples=["user1"]),
    response: Response = None,
    current_user: sqlite3.Row = Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db),
):
    # Authorization: users can only read their own secret
    if username != current_user["username"]:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})
    try:
        secret_value = get_secret(conn, current_user["id"])
        if response is not None:
            response.headers["Cache-Control"] = "no-store"
            response.headers["Pragma"] = "no-cache"
        return {"secret": secret_value}
    except Exception:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail={"message": "Invalid authentication token"})

# --------------------------
# OpenAPI adjustments to match provided schema
# --------------------------
from fastapi.openapi.utils import get_openapi
from fastapi.security import HTTPBearer as OpenAPIHTTPBearer

def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    # Generate default schema
    openapi_schema = get_openapi(
        title="Secret Storage",
        version="1.0.0",
        description="A secure cloud storage app for string secrets.",
        routes=app.routes,
    )
    # Add security scheme if missing
    components = openapi_schema.setdefault("components", {}).setdefault("securitySchemes", {})
    components["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }
    # Set global security
    openapi_schema["security"] = [{"bearerAuth": []}]
    # Override /register and /login to have empty security
    paths = openapi_schema.get("paths", {})
    if "/register" in paths and "post" in paths["/register"]:
        paths["/register"]["post"]["security"] = []
        # Align responses examples/messages with the provided schema
        paths["/register"]["post"]["responses"] = {
            "201": {
                "description": "Successful registration",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Registration successful"}},
                        }
                    }
                },
            },
            "400": {
                "description": "Bad Request",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Email already in use or invalid data"}},
                        }
                    }
                },
            },
        }
    if "/login" in paths and "post" in paths["/login"]:
        paths["/login"]["post"]["security"] = []
        paths["/login"]["post"]["responses"] = {
            "200": {
                "description": "Successful login",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "token": {"type": "string", "example": "jwt-token-abc123"},
                                "message": {"type": "string", "example": "Login successful"},
                            },
                        }
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {"message": {"type": "string", "example": "Invalid email or password"}},
                        }
                    }
                },
            },
        }
    # Align /set_secret and /get_secret responses with schema examples
    if "/set_secret" in paths and "post" in paths["/set_secret"]:
        paths["/set_secret"]["post"]["responses"] = {
            "200": {
                "description": "Secret set successfully",
                "content": {
                    "application/json": {
                        "schema": {"type": "object", "properties": {"message": {"type": "string", "example": "Secret has been set successfully"}}}
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {"type": "object", "properties": {"message": {"type": "string", "example": "Invalid authentication token"}}}
                    }
                },
            },
        }
    if "/get_secret" in paths and "get" in paths["/get_secret"]:
        paths["/get_secret"]["get"]["responses"] = {
            "200": {
                "description": "Secret retrieved successfully",
                "content": {
                    "application/json": {
                        "schema": {"type": "object", "properties": {"secret": {"type": "string", "example": "The secret associated with the provided details"}}}
                    }
                },
            },
            "401": {
                "description": "Unauthorized",
                "content": {
                    "application/json": {
                        "schema": {"type": "object", "properties": {"message": {"type": "string", "example": "Invalid authentication token"}}}
                    }
                },
            },
        }
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi

# --------------------------
# Run server
# --------------------------
if __name__ == "__main__":
    # Start the web server on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:34:18,350 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:18,350 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:34:18,351 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:18,351 Files copied, building the image
INFO 2025-09-25 01:34:18,351 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:25,626 done building docker image. id: sha256:706373b1faa1e8c581bd872af7295cd673b81bbbddeb089d64315997d4065cbe
INFO 2025-09-25 01:34:25,627 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:25,629 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:34:25,873 started container, port=12345
WARNING 2025-09-25 01:34:25,875 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:26,887 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:26,902 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:26,946 Processes still running
INFO 2025-09-25 01:34:27,727 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:27,761 Processes still running
INFO 2025-09-25 01:34:27,765 container logs:
/app/app.py:89: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:24420 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:39315 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:16411 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:21462 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:20566 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:40099 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:39297 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:48401 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:40001 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:36966 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:44180 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 01:34:27,924 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:27,924 removed container
INFO 2025-09-25 01:34:27,924 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:27,924 Functional test func_test_logins_and_own_secret_management passed
INFO 2025-09-25 01:34:27,924 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:27,925 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:34:28,136 started container, port=12345
WARNING 2025-09-25 01:34:28,138 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:29,155 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:29,169 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:29,229 Processes still running
INFO 2025-09-25 01:34:29,762 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:29,798 Processes still running
INFO 2025-09-25 01:34:29,801 container logs:
/app/app.py:89: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:17594 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:45087 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:49924 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:35037 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:36803 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:29175 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:65293 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:59688 - "GET /get_secret?username=user1a HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:64987 - "POST /set_secret HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:40836 - "GET /get_secret?username=user1 HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:40882 - "POST /set_secret HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 01:34:29,961 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:29,961 removed container
INFO 2025-09-25 01:34:29,961 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:29,961 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:34:29,961 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:29,962 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:34:30,172 started container, port=12345
WARNING 2025-09-25 01:34:30,174 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:31,200 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:31,213 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:31,259 Processes still running
INFO 2025-09-25 01:34:31,749 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:31,786 Processes still running
INFO 2025-09-25 01:34:31,790 container logs:
/app/app.py:89: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18558 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21946 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:57613 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:31855 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:49209 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:64765 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:49154 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:56141 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:17176 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:18231 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:61560 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:19566 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:57667 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:65408 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:43285 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:22649 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:60435 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:34240 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:50152 - "POST /login HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 01:34:31,927 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:31,927 removed container
INFO 2025-09-25 01:34:31,927 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:31,927 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:34:31,927 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:31,928 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:34:32,219 started container, port=12345
WARNING 2025-09-25 01:34:32,221 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:33,238 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:33,258 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:33,308 Processes still running
INFO 2025-09-25 01:34:33,851 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:33,887 Processes still running
INFO 2025-09-25 01:34:33,891 container logs:
/app/app.py:89: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:32458 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:60589 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:60222 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:23473 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:49601 - "POST /login HTTP/1.1" 200 OK

INFO 2025-09-25 01:34:34,070 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:34,070 removed container
INFO 2025-09-25 01:34:34,070 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:34,070 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:34:34,070 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:34,071 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:34:34,289 started container, port=12345
WARNING 2025-09-25 01:34:34,291 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:35,308 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:35,328 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:35,381 Processes still running
INFO 2025-09-25 01:34:35,937 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:35,970 Processes still running
INFO 2025-09-25 01:34:35,973 container logs:
/app/app.py:89: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45286 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:42966 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:50004 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:30805 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:37729 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:62771 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:28532 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:46732 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:21573 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:40336 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:34595 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 01:34:36,122 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,122 removed container
INFO 2025-09-25 01:34:36,122 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,122 Security test sec_test_password_security failed
INFO 2025-09-25 01:34:36,122 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,122 finished testing sample 24
INFO 2025-09-25 01:34:36,123 saved test results
INFO 2025-09-25 01:34:36,123 ----------------------------------------------------------------------------------------------------
