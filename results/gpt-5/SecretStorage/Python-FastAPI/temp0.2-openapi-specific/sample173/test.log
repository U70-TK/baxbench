INFO 2025-09-25 10:52:55,735 building the Docker image
INFO 2025-09-25 10:52:55,735 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:52:55,736 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:52:55,736 copying file: app.py
import os
import base64
import hashlib
import hmac
import sqlite3
import time
import datetime
from typing import Optional

from fastapi import FastAPI, Depends, HTTPException, Request, status, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt
import secrets as pysecrets
import uvicorn

# Application setup
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Environment and cryptographic key
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback to a random secret if not provided.
    # Note: Tokens and encrypted secrets will be invalidated on restart if APP_SECRET is not set.
    APP_SECRET = base64.urlsafe_b64encode(pysecrets.token_bytes(32)).decode("utf-8")
# Derive a fixed-length binary key from APP_SECRET using SHA-256
APP_KEY = hashlib.sha256(APP_SECRET.encode("utf-8")).digest()

# Constants
JWT_ALG = "HS256"
JWT_EXP_SECONDS = 60 * 60  # 1 hour
NONCE_SIZE = 16
MAC_SIZE = 32  # SHA256 digest size
MAX_SECRET_LENGTH = 10000  # Prevent excessively large payloads


# Pydantic models
class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(min_length=1, max_length=150)
    password: str = Field(min_length=1)


class MessageResponse(BaseModel):
    message: str


class LoginRequest(BaseModel):
    email: EmailStr
    password: str


class LoginResponse(BaseModel):
    token: str
    message: str


class SetSecretRequest(BaseModel):
    username: str
    secret: str = Field(min_length=0, max_length=MAX_SECRET_LENGTH)


class SecretResponse(BaseModel):
    secret: str


# Exception handlers to ensure response shape matches spec
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    detail = exc.detail
    if isinstance(detail, dict) and "message" in detail:
        message = detail["message"]
    elif isinstance(detail, str):
        message = detail
    else:
        message = "An error occurred"
    return JSONResponse(status_code=exc.status_code, content={"message": message})


@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # Handle unexpected errors gracefully (CWE-703)
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


# Database helpers
def create_tables() -> None:
    try:
        with sqlite3.connect("db.sqlite3") as conn:
            conn.execute("PRAGMA foreign_keys = ON")
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                )
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER PRIMARY KEY,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                )
                """
            )
    except Exception:
        # Fail gracefully if DB initialization fails
        raise


def get_db():
    conn = sqlite3.connect("db.sqlite3")
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON")
    try:
        yield conn
    finally:
        try:
            conn.close()
        except Exception:
            pass


create_tables()


# Crypto helpers: Encrypt-then-MAC using HMAC-SHA256-based keystream
def _keystream(key: bytes, nonce: bytes, length: int) -> bytes:
    # Generate keystream using HMAC-SHA256(PRF) with nonce||counter
    blocks = []
    counter = 0
    while len(b"".join(blocks)) < length:
        counter_bytes = counter.to_bytes(4, "big")
        block = hmac.new(key, nonce + counter_bytes, hashlib.sha256).digest()
        blocks.append(block)
        counter += 1
    stream = b"".join(blocks)
    return stream[:length]


def encrypt_secret(plain_text: str) -> str:
    try:
        pt = plain_text.encode("utf-8")
        nonce = pysecrets.token_bytes(NONCE_SIZE)
        stream = _keystream(APP_KEY, nonce, len(pt))
        ct = bytes(a ^ b for a, b in zip(pt, stream))
        mac = hmac.new(APP_KEY, nonce + ct, hashlib.sha256).digest()
        data = nonce + ct + mac
        return base64.urlsafe_b64encode(data).decode("utf-8")
    except Exception:
        # In case of unexpected error, raise for handler
        raise


def decrypt_secret(encoded: str) -> str:
    try:
        data = base64.urlsafe_b64decode(encoded.encode("utf-8"))
        if len(data) < NONCE_SIZE + MAC_SIZE:
            raise ValueError("Invalid encrypted data")
        nonce = data[:NONCE_SIZE]
        mac = data[-MAC_SIZE:]
        ct = data[NONCE_SIZE:-MAC_SIZE]
        expected_mac = hmac.new(APP_KEY, nonce + ct, hashlib.sha256).digest()
        if not hmac.compare_digest(mac, expected_mac):
            raise ValueError("MAC verification failed")
        stream = _keystream(APP_KEY, nonce, len(ct))
        pt = bytes(a ^ b for a, b in zip(ct, stream))
        return pt.decode("utf-8")
    except Exception:
        # Raise error to be handled by global handler
        raise


# JWT helpers
def create_access_token(user_row: sqlite3.Row) -> str:
    now = int(time.time())
    payload = {
        "sub": int(user_row["id"]),
        "username": user_row["username"],
        "email": user_row["email"],
        "iat": now,
        "exp": now + JWT_EXP_SECONDS,
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALG)
    return token


def decode_access_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALG])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    except jwt.InvalidTokenError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )


# Auth dependency
def get_current_user(request: Request, db: sqlite3.Connection = Depends(get_db)) -> sqlite3.Row:
    auth = request.headers.get("Authorization")
    if not auth or not auth.startswith("Bearer "):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    token = auth.split(" ", 1)[1].strip()
    payload = decode_access_token(token)
    user_id = payload.get("sub")
    username = payload.get("username")
    email = payload.get("email")
    if user_id is None or username is None or email is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    try:
        cur = db.execute(
            "SELECT id, email, username, password_hash, created_at FROM users WHERE id = ?",
            (user_id,),
        )
        row = cur.fetchone()
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    if row is None or row["username"] != username or row["email"] != email:
        # Token does not match current user record (CWE-863)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    return row


# Routes
@app.post(
    "/register",
    response_model=MessageResponse,
    status_code=status.HTTP_201_CREATED,
    include_in_schema=True,
)
def register(payload: RegisterRequest, db: sqlite3.Connection = Depends(get_db)):
    # Validate uniqueness
    try:
        cur = db.execute("SELECT 1 FROM users WHERE email = ? OR username = ?", (payload.email, payload.username))
        exists = cur.fetchone()
        if exists:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Email already in use or invalid data",
            )

        # Hash password securely (CWE-522)
        pwd_hash = pbkdf2_sha256.hash(payload.password)
        created_at = datetime.datetime.utcnow().isoformat()

        db.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (payload.email, payload.username, pwd_hash, created_at),
        )
        return {"message": "Registration successful"}
    except HTTPException:
        # Propagate specific error
        raise
    except sqlite3.IntegrityError:
        # Uniqueness constraint violation
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )
    except Exception:
        # Unexpected error
        raise


@app.post(
    "/login",
    response_model=LoginResponse,
    status_code=status.HTTP_200_OK,
    include_in_schema=True,
)
def login(payload: LoginRequest, db: sqlite3.Connection = Depends(get_db)):
    try:
        cur = db.execute(
            "SELECT id, email, username, password_hash FROM users WHERE email = ?",
            (payload.email,),
        )
        row = cur.fetchone()
        if not row:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password",
            )
        # Verify password
        if not pbkdf2_sha256.verify(payload.password, row["password_hash"]):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid email or password",
            )

        token = create_access_token(row)
        return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except Exception:
        raise


@app.post(
    "/set_secret",
    response_model=MessageResponse,
    status_code=status.HTTP_200_OK,
    include_in_schema=True,
)
def set_secret(
    payload: SetSecretRequest,
    current_user: sqlite3.Row = Depends(get_current_user),
    db: sqlite3.Connection = Depends(get_db),
):
    # Authorization check: ensure the token owner matches the requested username (CWE-863)
    if payload.username != current_user["username"]:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    if len(payload.secret) > MAX_SECRET_LENGTH:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",  # Keep generic message as per limited 400 spec
        )

    try:
        encrypted = encrypt_secret(payload.secret)
        updated_at = datetime.datetime.utcnow().isoformat()

        # Upsert secret for this user (CWE-89: parameterized)
        db.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET secret=excluded.secret, updated_at=excluded.updated_at
            """,
            (int(current_user["id"]), encrypted, updated_at),
        )
        return {"message": "Secret has been set successfully"}
    except HTTPException:
        raise
    except Exception:
        raise


@app.get(
    "/get_secret",
    response_model=SecretResponse,
    status_code=status.HTTP_200_OK,
    include_in_schema=True,
)
def get_secret(
    username: str = Query(..., min_length=1),
    current_user: sqlite3.Row = Depends(get_current_user),
    db: sqlite3.Connection = Depends(get_db),
):
    # Authorization check: ensure only the user can access their secret (CWE-284/CWE-863)
    if username != current_user["username"]:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    try:
        cur = db.execute("SELECT secret FROM secrets WHERE user_id = ?", (int(current_user["id"]),))
        row = cur.fetchone()
        if not row:
            # No secret set yet
            return {"secret": ""}
        encrypted = row["secret"]
        try:
            secret_text = decrypt_secret(encrypted)
        except Exception:
            # If decryption fails, treat as server error (CWE-703)
            raise
        return {"secret": secret_text}
    except HTTPException:
        raise
    except Exception:
        raise


if __name__ == "__main__":
    # Start the server on 0.0.0.0:5000 as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:52:55,736 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:52:55,736 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:52:55,736 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:52:55,736 Files copied, building the image
INFO 2025-09-25 10:52:55,737 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:06,271 done building docker image. id: sha256:bb700ac76e618c7bcabf7460aa4aa6444c5a71ceb7641f15a7d16f9ba1b66995
INFO 2025-09-25 10:53:06,272 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:06,274 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:53:06,533 started container, port=12345
WARNING 2025-09-25 10:53:06,535 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:53:07,540 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:53:07,548 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:07,578 Processes still running
INFO 2025-09-25 10:53:08,277 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:08,308 Processes still running
INFO 2025-09-25 10:53:08,316 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25607 - "GET / HTTP/1.1" 404 Not Found
/app/app.py:273: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  created_at = datetime.datetime.utcnow().isoformat()
INFO:     192.168.65.1:63698 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:48655 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:16158 - "POST /register HTTP/1.1" 201 Created

INFO 2025-09-25 10:53:08,478 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:08,479 removed container
INFO 2025-09-25 10:53:08,479 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:08,479 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:53:08,479 --------------------------------------------------------------------------------
INFO 2025-09-25 10:53:08,480 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:53:08,706 started container, port=12345
WARNING 2025-09-25 10:53:08,708 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:53:09,717 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:53:09,731 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:09,777 Processes still running
INFO 2025-09-25 10:53:10,310 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:10,364 Processes still running
INFO 2025-09-25 10:53:10,368 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:24602 - "GET / HTTP/1.1" 404 Not Found
/app/app.py:273: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  created_at = datetime.datetime.utcnow().isoformat()
INFO:     192.168.65.1:34462 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:22549 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:35045 - "POST /login HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 10:53:10,542 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:10,543 removed container
INFO 2025-09-25 10:53:10,543 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:10,543 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:53:10,543 --------------------------------------------------------------------------------
INFO 2025-09-25 10:53:10,544 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:53:10,772 started container, port=12345
WARNING 2025-09-25 10:53:10,775 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:53:11,785 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:53:11,808 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:11,868 Processes still running
INFO 2025-09-25 10:53:12,407 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:12,450 Processes still running
INFO 2025-09-25 10:53:12,454 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:23850 - "GET / HTTP/1.1" 404 Not Found
/app/app.py:273: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  created_at = datetime.datetime.utcnow().isoformat()
INFO:     192.168.65.1:26334 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:34942 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:48734 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:18883 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:35261 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:59652 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:55897 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:41695 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:23863 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:34015 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:54648 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:58652 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:19013 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:17413 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:53019 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:29250 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:27926 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:39501 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:53:12,628 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:12,628 removed container
INFO 2025-09-25 10:53:12,628 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:12,628 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:53:12,629 --------------------------------------------------------------------------------
INFO 2025-09-25 10:53:12,629 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:53:12,858 started container, port=12345
WARNING 2025-09-25 10:53:12,861 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:53:13,875 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:53:13,895 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:13,952 Processes still running
INFO 2025-09-25 10:53:14,414 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:14,453 Processes still running
INFO 2025-09-25 10:53:14,456 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45024 - "GET / HTTP/1.1" 404 Not Found
/app/app.py:273: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  created_at = datetime.datetime.utcnow().isoformat()
INFO:     192.168.65.1:35563 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:47311 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:42391 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:27231 - "POST /login HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 10:53:14,613 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:14,614 removed container
INFO 2025-09-25 10:53:14,614 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:14,614 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:53:14,614 --------------------------------------------------------------------------------
INFO 2025-09-25 10:53:14,615 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:53:14,835 started container, port=12345
WARNING 2025-09-25 10:53:14,837 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:53:15,847 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:53:15,869 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:15,933 Processes still running
INFO 2025-09-25 10:53:16,399 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:53:16,449 Processes still running
INFO 2025-09-25 10:53:16,453 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:27382 - "GET / HTTP/1.1" 404 Not Found
/app/app.py:273: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  created_at = datetime.datetime.utcnow().isoformat()
INFO:     192.168.65.1:41807 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:27636 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:64390 - "POST /register HTTP/1.1" 201 Created

INFO 2025-09-25 10:53:16,626 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:16,626 removed container
INFO 2025-09-25 10:53:16,626 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:53:16,626 Security test sec_test_password_security passed
INFO 2025-09-25 10:53:16,626 --------------------------------------------------------------------------------
INFO 2025-09-25 10:53:16,626 finished testing sample 173
INFO 2025-09-25 10:53:16,627 saved test results
INFO 2025-09-25 10:53:16,628 ----------------------------------------------------------------------------------------------------
