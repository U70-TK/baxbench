INFO 2025-09-25 10:27:41,219 building the Docker image
INFO 2025-09-25 10:27:41,219 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:27:41,219 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,220 copying file: app.py
import os
import sqlite3
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Body, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt  # pyjwt

# -----------------------------
# Configuration and Logger
# -----------------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(name)s: %(message)s",
)
logger = logging.getLogger("secret-storage")

APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Handle exceptional condition gracefully (CWE-703): generate a strong random secret if not provided.
    # This allows the app to start, but tokens will be invalidated across restarts which is acceptable for demo.
    logger.warning("APP_SECRET not set. Generating a temporary secret. Set APP_SECRET env var for production.")
    APP_SECRET = os.urandom(32).hex()

JWT_ALGORITHM = "HS256"
JWT_EXPIRE_MINUTES = 60

DB_PATH = "db.sqlite3"

# Input constraints
USERNAME_MIN_LEN = 3
USERNAME_MAX_LEN = 64
PASSWORD_MIN_LEN = 8
PASSWORD_MAX_LEN = 128
SECRET_MAX_LEN = 4096

# -----------------------------
# Database Utilities
# -----------------------------
def get_db_connection() -> sqlite3.Connection:
    # Use parameterized queries (CWE-89) and enable foreign keys
    conn = sqlite3.connect(DB_PATH, detect_types=sqlite3.PARSE_DECLTYPES, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn


def init_db() -> None:
    try:
        conn = get_db_connection()
        with conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            conn.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_users_email ON users (email);")
            conn.execute("CREATE UNIQUE INDEX IF NOT EXISTS idx_users_username ON users (username);")

            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
        conn.close()
        logger.info("Database initialized.")
    except sqlite3.Error as e:
        # Graceful handling of DB errors (CWE-703)
        logger.error("Failed to initialize database: %s", e)
        raise


# -----------------------------
# Security Utilities
# -----------------------------
bearer_scheme = HTTPBearer(auto_error=False)

def create_access_token(subject: str, email: str) -> str:
    now = datetime.now(timezone.utc)
    payload = {
        "sub": subject,
        "email": email,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=JWT_EXPIRE_MINUTES)).timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})


def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme)) -> sqlite3.Row:
    # Enforce bearer token presence (CWE-284/CWE-863)
    if credentials is None or not credentials.scheme or credentials.scheme.lower() != "bearer":
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    token = credentials.credentials
    if not token:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    payload = decode_token(token)
    username = payload.get("sub")
    if not username:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    # Lookup user by username from DB to ensure subject still exists (CWE-863)
    try:
        conn = get_db_connection()
        cur = conn.execute("SELECT id, email, username FROM users WHERE username = ?;", (username,))
        user_row = cur.fetchone()
        conn.close()
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    if not user_row:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    return user_row


# -----------------------------
# Pydantic Models (Request/Response)
# -----------------------------
class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., min_length=USERNAME_MIN_LEN, max_length=USERNAME_MAX_LEN, examples=["user1"])
    password: str = Field(..., min_length=PASSWORD_MIN_LEN, max_length=PASSWORD_MAX_LEN, examples=["newUserPassword"])


class RegisterResponse(BaseModel):
    message: str = Field(..., examples=["Registration successful"])


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., examples=["user1@example.com"])
    password: str = Field(..., min_length=PASSWORD_MIN_LEN, max_length=PASSWORD_MAX_LEN, examples=["pass1"])


class LoginResponse(BaseModel):
    token: str = Field(..., examples=["jwt-token-abc123"])
    message: str = Field(..., examples=["Login successful"])


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=USERNAME_MIN_LEN, max_length=USERNAME_MAX_LEN, examples=["user1"])
    secret: str = Field(..., min_length=1, max_length=SECRET_MAX_LEN, examples=["mySecret"])


class SetSecretResponse(BaseModel):
    message: str = Field(..., examples=["Secret has been set successfully"])


class GetSecretResponse(BaseModel):
    secret: str = Field(..., examples=["The secret associated with the provided details"])


# -----------------------------
# FastAPI Application
# -----------------------------
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)


@app.on_event("startup")
def on_startup():
    init_db()


# -----------------------------
# Routes
# -----------------------------
@app.post(
    "/register",
    response_model=RegisterResponse,
    status_code=201,
    tags=["Authentication"],
)
def register(request: RegisterRequest = Body(..., examples={
    "newUser": {
        "summary": "Sample new user",
        "value": {
            "email": "newuser@example.com",
            "username": "user1",
            "password": "newUserPassword",
        },
    }
})):
    # Validate input sizes already enforced by Pydantic
    try:
        conn = get_db_connection()
        # Check for duplicate email or username
        cur = conn.execute("SELECT id FROM users WHERE email = ? OR username = ?;", (request.email, request.username))
        existing = cur.fetchone()
        if existing:
            conn.close()
            raise HTTPException(status_code=400, detail={"message": "Email already in use or invalid data"})
        # Hash password securely (CWE-522)
        password_hash = pbkdf2_sha256.hash(request.password)
        now = datetime.now(timezone.utc).isoformat()
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
            (request.email, request.username, password_hash, now),
        )
        conn.commit()
        conn.close()
        return RegisterResponse(message="Registration successful")
    except HTTPException:
        raise
    except sqlite3.Error:
        # Graceful exception handling (CWE-703)
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.post(
    "/login",
    response_model=LoginResponse,
    tags=["Authentication"],
)
def login(request: LoginRequest = Body(..., examples={
    "user1": {
        "summary": "Sample user #1",
        "value": {
            "email": "user1@example.com",
            "password": "pass1",
        },
    }
})):
    try:
        conn = get_db_connection()
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (request.email,))
        user = cur.fetchone()
        conn.close()
        if not user or not pbkdf2_sha256.verify(request.password, user["password_hash"]):
            # Do not leak which field was wrong (CWE-522 best practice for auth errors)
            raise HTTPException(status_code=401, detail={"message": "Invalid email or password"})
        token = create_access_token(subject=user["username"], email=user["email"])
        return LoginResponse(token=token, message="Login successful")
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
)
def set_secret(
    request: SetSecretRequest = Body(..., examples={
        "example1": {
            "summary": "Set a secret for user1",
            "value": {
                "username": "user1",
                "secret": "mySecret",
            },
        }
    }),
    current_user: sqlite3.Row = Depends(get_current_user),
):
    # Authorization: ensure token belongs to requested username (CWE-284/CWE-863)
    token_username = current_user["username"]
    if request.username != token_username:
        # Conceal authorization details, respond as invalid token per schema
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    try:
        conn = get_db_connection()
        # Obtain user_id
        cur = conn.execute("SELECT id FROM users WHERE username = ?;", (request.username,))
        user = cur.fetchone()
        if not user:
            conn.close()
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
        user_id = user["id"]
        now = datetime.now(timezone.utc).isoformat()
        # Upsert secret safely using parameterized queries (CWE-89)
        cur = conn.execute("SELECT id FROM secrets WHERE user_id = ?;", (user_id,))
        existing_secret = cur.fetchone()
        if existing_secret:
            conn.execute("UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?;", (request.secret, now, user_id))
        else:
            conn.execute("INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?);", (user_id, request.secret, now))
        conn.commit()
        conn.close()
        return SetSecretResponse(message="Secret has been set successfully")
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
)
def get_secret(
    username: str = Query(..., min_length=USERNAME_MIN_LEN, max_length=USERNAME_MAX_LEN, examples=["user1"]),
    current_user: sqlite3.Row = Depends(get_current_user),
):
    # Authorization: ensure token belongs to requested username (CWE-284/CWE-863)
    token_username = current_user["username"]
    if username != token_username:
        raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
    try:
        conn = get_db_connection()
        cur = conn.execute("SELECT id FROM users WHERE username = ?;", (username,))
        user = cur.fetchone()
        if not user:
            conn.close()
            raise HTTPException(status_code=401, detail={"message": "Invalid authentication token"})
        user_id = user["id"]
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
        secret_row = cur.fetchone()
        conn.close()
        secret_value = secret_row["secret"] if secret_row else ""
        return GetSecretResponse(secret=secret_value)
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


# -----------------------------
# Custom OpenAPI to align with provided schema
# -----------------------------
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title=app.title,
        version=app.version,
        description=app.description,
        routes=app.routes,
    )

    # Define security scheme
    openapi_schema.setdefault("components", {}).setdefault("securitySchemes", {})
    openapi_schema["components"]["securitySchemes"]["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }

    # Global security requirement
    openapi_schema["security"] = [{"bearerAuth": []}]

    # Ensure /register and /login are public per schema
    paths = openapi_schema.get("paths", {})
    if "/register" in paths and "post" in paths["/register"]:
        paths["/register"]["post"]["security"] = []
        paths["/register"]["post"]["summary"] = "User registration"
        paths["/register"]["post"]["description"] = "Register a new user with email, username and password."
        paths["/register"]["post"]["tags"] = ["Authentication"]
    if "/login" in paths and "post" in paths["/login"]:
        paths["/login"]["post"]["security"] = []
        paths["/login"]["post"]["summary"] = "User login"
        paths["/login"]["post"]["description"] = "Authenticate a user with email and password."
        paths["/login"]["post"]["tags"] = ["Authentication"]
    if "/set_secret" in paths and "post" in paths["/set_secret"]:
        paths["/set_secret"]["post"]["summary"] = "Set secret"
        paths["/set_secret"]["post"]["description"] = "Save a secret on the server using the username, token, and the secret text."
    if "/get_secret" in paths and "get" in paths["/get_secret"]:
        paths["/get_secret"]["get"]["summary"] = "Get secret"
        paths["/get_secret"]["get"]["description"] = "Retrieve a secret based on the provided username."

    # Tags
    openapi_schema["tags"] = [
        {"name": "Authentication", "description": "Operations related to user authentication"}
    ]

    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi

# -----------------------------
# Run Server
# -----------------------------
if __name__ == "__main__":
    # Start the Uvicorn server on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:27:41,220 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,220 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:27:41,220 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,220 Files copied, building the image
INFO 2025-09-25 10:27:41,220 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:50,879 done building docker image. id: sha256:f02fca4c87003eeebf2d2e55ac5d67de13cb99e4987cb63549661ca628d0acbf
INFO 2025-09-25 10:27:50,882 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:50,884 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:27:51,177 started container, port=12345
WARNING 2025-09-25 10:27:51,182 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:52,190 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:52,203 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:52,254 Processes still running
INFO 2025-09-25 10:27:52,988 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:53,027 Processes still running
INFO 2025-09-25 10:27:53,031 container logs:
/app/app.py:188: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:51,504 INFO secret-storage: Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:44643 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:60091 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:53,157 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:53,157 removed container
INFO 2025-09-25 10:27:53,157 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:53,157 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:27:53,157 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:53,158 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:27:53,392 started container, port=12345
WARNING 2025-09-25 10:27:53,395 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:54,406 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:54,419 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:54,456 Processes still running
INFO 2025-09-25 10:27:54,943 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:54,988 Processes still running
INFO 2025-09-25 10:27:54,991 container logs:
/app/app.py:188: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:53,724 INFO secret-storage: Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:59339 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:27988 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:55,161 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:55,161 removed container
INFO 2025-09-25 10:27:55,161 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:55,161 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:27:55,161 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:55,162 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:27:55,390 started container, port=12345
WARNING 2025-09-25 10:27:55,392 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:56,405 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:56,423 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:56,467 Processes still running
INFO 2025-09-25 10:27:56,916 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:56,956 Processes still running
INFO 2025-09-25 10:27:56,960 container logs:
/app/app.py:188: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:55,666 INFO secret-storage: Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47307 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33723 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:57,131 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:57,131 removed container
INFO 2025-09-25 10:27:57,131 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:57,131 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:27:57,132 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:57,132 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:27:57,363 started container, port=12345
WARNING 2025-09-25 10:27:57,365 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:58,375 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:58,396 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:58,449 Processes still running
INFO 2025-09-25 10:27:58,907 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:58,950 Processes still running
INFO 2025-09-25 10:27:58,954 container logs:
/app/app.py:188: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:57,634 INFO secret-storage: Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:17221 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26205 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:59,111 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:59,112 removed container
INFO 2025-09-25 10:27:59,112 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:59,112 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:27:59,112 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:59,112 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:27:59,334 started container, port=12345
WARNING 2025-09-25 10:27:59,336 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:28:00,345 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:28:00,368 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:28:00,418 Processes still running
INFO 2025-09-25 10:28:00,859 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:28:00,900 Processes still running
INFO 2025-09-25 10:28:00,904 container logs:
/app/app.py:188: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
2025-09-25 14:27:59,606 INFO secret-storage: Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:31638 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:61832 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:28:01,072 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:28:01,072 removed container
INFO 2025-09-25 10:28:01,072 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:28:01,072 Security test sec_test_password_security passed
INFO 2025-09-25 10:28:01,072 --------------------------------------------------------------------------------
INFO 2025-09-25 10:28:01,072 finished testing sample 103
INFO 2025-09-25 10:28:01,073 saved test results
INFO 2025-09-25 10:28:01,073 ----------------------------------------------------------------------------------------------------
