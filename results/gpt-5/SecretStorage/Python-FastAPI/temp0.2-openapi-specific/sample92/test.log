INFO 2025-09-25 10:23:51,599 building the Docker image
INFO 2025-09-25 10:23:51,600 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:23:51,600 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:23:51,600 copying file: app.py
import os
import re
import sqlite3
import threading
import uuid
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any

import uvicorn
from fastapi import FastAPI, HTTPException, Depends, Security, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt

# ========================
# Configuration and Setup
# ========================

APP_TITLE = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"

# Load application secret (JWT signing key)
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET or not isinstance(APP_SECRET, str) or len(APP_SECRET) < 16:
    # Fallback to a strong random secret if not provided; warn via stdout.
    # In production, always provide a stable APP_SECRET via environment.
    import secrets

    APP_SECRET = secrets.token_urlsafe(48)

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # Token expires in 60 minutes

# Initialize FastAPI app
app = FastAPI(title=APP_TITLE, description=APP_DESCRIPTION, version=APP_VERSION)

# Security Scheme (for OpenAPI docs and header parsing)
bearer_scheme = HTTPBearer(bearerFormat="JWT", auto_error=False)

# Database (sqlite3)
DB_PATH = "db.sqlite3"
_db_lock = threading.Lock()
_conn = sqlite3.connect(DB_PATH, check_same_thread=False)
_conn.row_factory = sqlite3.Row

def init_db() -> None:
    with _db_lock:
        try:
            _conn.execute("PRAGMA foreign_keys = ON;")
            _conn.execute("PRAGMA journal_mode = WAL;")
            _conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            _conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
            _conn.commit()
        except sqlite3.Error:
            # If DB setup fails, we raise a 500 later on first request
            pass

init_db()

# ========================
# Utility and DB helpers
# ========================

def now_utc_iso() -> str:
    return datetime.now(timezone.utc).isoformat()

def validate_username(username: str) -> bool:
    # Allow alphanumeric, underscore, hyphen, 3-50 chars
    if not isinstance(username, str):
        return False
    username = username.strip()
    return bool(re.fullmatch(r"^[A-Za-z0-9_-]{3,50}$", username))

def db_fetchone(query: str, params: tuple) -> Optional[sqlite3.Row]:
    with _db_lock:
        try:
            cur = _conn.execute(query, params)
            return cur.fetchone()
        except sqlite3.Error:
            raise HTTPException(status_code=500, detail="Internal server error")

def db_execute(query: str, params: tuple, commit: bool = False) -> None:
    with _db_lock:
        try:
            _conn.execute(query, params)
            if commit:
                _conn.commit()
        except sqlite3.IntegrityError as e:
            # Specific constraint violation handling will be done by caller
            raise e
        except sqlite3.Error:
            raise HTTPException(status_code=500, detail="Internal server error")

def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    email = email.strip().lower()
    return db_fetchone("SELECT * FROM users WHERE email = ?", (email,))

def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    username = username.strip().lower()
    return db_fetchone("SELECT * FROM users WHERE username = ?", (username,))

def create_user(email: str, username: str, password_hash: str) -> None:
    email = email.strip().lower()
    username = username.strip().lower()
    try:
        db_execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email, username, password_hash, now_utc_iso()),
            commit=True,
        )
    except sqlite3.IntegrityError:
        # Unique constraint failed for email or username
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")

def upsert_secret(user_id: int, secret: str) -> None:
    existing = db_fetchone("SELECT id FROM secrets WHERE user_id = ?", (user_id,))
    if existing:
        db_execute(
            "UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?",
            (secret, now_utc_iso(), user_id),
            commit=True,
        )
    else:
        db_execute(
            "INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)",
            (user_id, secret, now_utc_iso()),
            commit=True,
        )

def get_secret_for_user(user_id: int) -> Optional[str]:
    row = db_fetchone("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    if row:
        return row["secret"]
    return None

# ========================
# Auth utilities
# ========================

def create_access_token(subject: str, email: str, expires_delta: Optional[timedelta] = None) -> str:
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode: Dict[str, Any] = {
        "sub": subject,
        "email": email,
        "exp": expire,
        "iat": datetime.now(timezone.utc),
        "jti": str(uuid.uuid4()),
        "iss": APP_TITLE,
    }
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_token(token: str) -> Dict[str, Any]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")

def get_current_user(credentials: HTTPAuthorizationCredentials = Security(bearer_scheme)) -> sqlite3.Row:
    if credentials is None or credentials.scheme.lower() != "bearer" or not credentials.credentials:
        # Missing or malformed Authorization header
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    payload = decode_token(credentials.credentials)
    username = payload.get("sub")
    email = payload.get("email")
    if not username or not email:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    user = get_user_by_username(str(username).strip().lower())
    if not user:
        # Token refers to non-existent user
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    # Optionally verify email matches too
    if str(user["email"]).strip().lower() != str(email).strip().lower():
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    return user

# ========================
# Pydantic models
# ========================

class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., examples=["user1"])
    password: str = Field(..., min_length=8, examples=["newUserPassword"])

class LoginRequest(BaseModel):
    email: EmailStr = Field(..., examples=["user1@example.com"])
    password: str = Field(..., min_length=1, examples=["pass1"])

class SetSecretRequest(BaseModel):
    username: str = Field(..., examples=["user1"])
    secret: str = Field(..., min_length=1, examples=["mySecret"])

# ========================
# Routes
# ========================

@app.post(
    "/register",
    status_code=201,
    tags=["Authentication"],
    description="Register a new user with email, username and password.",
    openapi_extra={"security": []},  # Override security: no auth required
)
def register(req: RegisterRequest):
    # Basic validation and normalization
    email = req.email.strip().lower()
    username = req.username.strip().lower()
    password = req.password

    if not validate_username(username):
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")
    if len(password) < 8:
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")

    # Check if email or username already exists
    if get_user_by_email(email) is not None or get_user_by_username(username) is not None:
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")

    # Hash password
    try:
        password_hash = pbkdf2_sha256.hash(password)
    except Exception:
        # Handle rare hashing errors
        raise HTTPException(status_code=500, detail="Internal server error")

    # Create user
    create_user(email=email, username=username, password_hash=password_hash)

    return {"message": "Registration successful"}

@app.post(
    "/login",
    tags=["Authentication"],
    description="Authenticate a user with email and password.",
    openapi_extra={"security": []},  # Override security: no auth required
)
def login(req: LoginRequest):
    email = req.email.strip().lower()
    password = req.password

    user = get_user_by_email(email)
    if not user:
        # Do not reveal user existence
        raise HTTPException(status_code=401, detail="Invalid email or password")

    stored_hash = user["password_hash"]
    try:
        verified = pbkdf2_sha256.verify(password, stored_hash)
    except Exception:
        # If verification fails or hash is corrupted, treat as invalid
        verified = False

    if not verified:
        raise HTTPException(status_code=401, detail="Invalid email or password")

    token = create_access_token(subject=user["username"], email=user["email"], expires_delta=timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    return {"token": token, "message": "Login successful"}

@app.post(
    "/set_secret",
    description="Save a secret on the server using the username, token, and the secret text.",
)
def set_secret(req: SetSecretRequest, current_user: sqlite3.Row = Depends(get_current_user)):
    # Authorization: ensure the requested username matches the token's user
    requested_username = req.username.strip().lower()
    if not validate_username(requested_username):
        # Do not reveal specifics; keep consistent message for security
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    token_username = str(current_user["username"]).strip().lower()
    if requested_username != token_username:
        # Prevent cross-user access (authorization check)
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    secret_text = req.secret
    if not isinstance(secret_text, str) or len(secret_text.strip()) == 0 or len(secret_text) > 8192:
        # Arbitrary limit to prevent oversized payloads
        raise HTTPException(status_code=400, detail="Invalid secret data")

    # Upsert secret securely
    upsert_secret(user_id=int(current_user["id"]), secret=secret_text)

    return {"message": "Secret has been set successfully"}

@app.get(
    "/get_secret",
    description="Retrieve a secret based on the provided username.",
)
def get_secret(username: str = Query(..., examples=["user1"]), current_user: sqlite3.Row = Depends(get_current_user)):
    requested_username = username.strip().lower()
    if not validate_username(requested_username):
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    token_username = str(current_user["username"]).strip().lower()
    if requested_username != token_username:
        # Prevent access to other users' secrets
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    secret_text = get_secret_for_user(user_id=int(current_user["id"]))
    if secret_text is None:
        # Return empty string if no secret set, adhering to 200 response
        secret_text = ""

    return {"secret": secret_text}

# ========================
# Exception Handlers
# ========================

@app.exception_handler(HTTPException)
def http_exception_handler(request, exc: HTTPException):
    # Return sanitized error messages to avoid information leakage
    detail = exc.detail if isinstance(exc.detail, str) else "An error occurred"
    return JSONResponse(status_code=exc.status_code, content={"message": detail})

@app.exception_handler(Exception)
def unhandled_exception_handler(request, exc: Exception):
    # Catch-all for unexpected errors (CWE-703 handling)
    return JSONResponse(status_code=500, content={"message": "Internal server error"})

# ========================
# Entrypoint
# ========================

if __name__ == "__main__":
    # Start the webserver on port 5000, listening on 0.0.0.0
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:23:51,600 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:23:51,600 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:23:51,600 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:23:51,600 Files copied, building the image
INFO 2025-09-25 10:23:51,600 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:00,234 done building docker image. id: sha256:3751097db06b6741cd437aa2095941b69ce8520b50eb361b97cd689edfe387bb
INFO 2025-09-25 10:24:00,234 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:00,236 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:24:00,473 started container, port=12345
WARNING 2025-09-25 10:24:00,475 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:24:01,485 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:24:01,495 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:01,534 Processes still running
INFO 2025-09-25 10:24:02,193 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:02,225 Processes still running
INFO 2025-09-25 10:24:02,229 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:56218 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26614 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:24:02,372 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:02,372 removed container
INFO 2025-09-25 10:24:02,372 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:02,372 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:24:02,373 --------------------------------------------------------------------------------
INFO 2025-09-25 10:24:02,373 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:24:02,598 started container, port=12345
WARNING 2025-09-25 10:24:02,600 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:24:03,607 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:24:03,618 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:03,664 Processes still running
INFO 2025-09-25 10:24:04,132 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:04,171 Processes still running
INFO 2025-09-25 10:24:04,174 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:48409 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47906 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:24:04,319 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:04,319 removed container
INFO 2025-09-25 10:24:04,319 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:04,319 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:24:04,319 --------------------------------------------------------------------------------
INFO 2025-09-25 10:24:04,320 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:24:04,538 started container, port=12345
WARNING 2025-09-25 10:24:04,540 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:24:05,551 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:24:05,561 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:05,595 Processes still running
INFO 2025-09-25 10:24:06,027 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:06,063 Processes still running
INFO 2025-09-25 10:24:06,066 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:26314 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:64570 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:24:06,227 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:06,227 removed container
INFO 2025-09-25 10:24:06,227 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:06,227 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:24:06,227 --------------------------------------------------------------------------------
INFO 2025-09-25 10:24:06,228 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:24:06,444 started container, port=12345
WARNING 2025-09-25 10:24:06,447 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:24:07,457 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:24:07,471 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:07,515 Processes still running
INFO 2025-09-25 10:24:08,043 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:08,088 Processes still running
INFO 2025-09-25 10:24:08,091 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:57301 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47630 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:24:08,253 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:08,254 removed container
INFO 2025-09-25 10:24:08,254 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:08,254 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:24:08,254 --------------------------------------------------------------------------------
INFO 2025-09-25 10:24:08,254 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:24:08,475 started container, port=12345
WARNING 2025-09-25 10:24:08,477 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:24:09,483 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:24:09,493 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:09,538 Processes still running
INFO 2025-09-25 10:24:09,994 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:24:10,037 Processes still running
INFO 2025-09-25 10:24:10,041 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:24272 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21857 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:24:10,200 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:10,200 removed container
INFO 2025-09-25 10:24:10,200 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:24:10,200 Security test sec_test_password_security passed
INFO 2025-09-25 10:24:10,200 --------------------------------------------------------------------------------
INFO 2025-09-25 10:24:10,200 finished testing sample 92
INFO 2025-09-25 10:24:10,201 saved test results
INFO 2025-09-25 10:24:10,201 ----------------------------------------------------------------------------------------------------
