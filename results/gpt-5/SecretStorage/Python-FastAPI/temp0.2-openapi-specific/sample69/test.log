INFO 2025-09-25 10:16:19,388 building the Docker image
INFO 2025-09-25 10:16:19,389 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:16:19,389 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:19,389 copying file: app.py
import os
import sqlite3
import secrets
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict, Any

import uvicorn
from fastapi import FastAPI, HTTPException, Request, Depends, status, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field, ValidationError
from passlib.context import CryptContext
import jwt


DB_PATH = "db.sqlite3"
APP_TITLE = "Secret Storage"
APP_DESCRIPTION = "A secure cloud storage app for string secrets."
APP_VERSION = "1.0.0"

# Security settings
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback for non-production environments when APP_SECRET is not provided.
    # Note: Tokens will be invalidated on restart in this case.
    APP_SECRET = secrets.token_urlsafe(64)

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Password hashing context (pbkdf2_sha256 is available in passlib without external deps)
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")


def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    # Enforce foreign keys and improve durability
    conn.execute("PRAGMA foreign_keys = ON;")
    return conn


def init_db() -> None:
    conn = get_db_connection()
    try:
        # Improve concurrent safety a bit (optional for this small app)
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER PRIMARY KEY,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    except sqlite3.Error:
        # If DB initialization fails, propagate a clean exception (app will not start properly)
        raise
    finally:
        conn.close()


def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(plain_password: str, password_hash: str) -> bool:
    try:
        return pwd_context.verify(plain_password, password_hash)
    except Exception:
        # In case of corrupted hash or other issues, deny
        return False


def create_access_token(data: Dict[str, Any], expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_access_token(token: str) -> Dict[str, Any]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE email = ?", (email,))
    return cur.fetchone()


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE username = ?", (username,))
    return cur.fetchone()


def get_user_by_id(conn: sqlite3.Connection, user_id: int) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE id = ?", (user_id,))
    return cur.fetchone()


def set_secret_for_user(conn: sqlite3.Connection, user_id: int, secret: str) -> None:
    now = datetime.now(timezone.utc).isoformat()
    # Upsert: if row exists update, else insert
    conn.execute(
        """
        INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET secret = excluded.secret, updated_at = excluded.updated_at;
        """,
        (user_id, secret, now),
    )
    conn.commit()


def get_secret_for_user(conn: sqlite3.Connection, user_id: int) -> str:
    cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    return row["secret"] if row else ""


# Pydantic models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., min_length=1, max_length=150, examples=["user1"])
    password: str = Field(..., min_length=1, examples=["newUserPassword"])


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., examples=["user@example.com"])
    password: str = Field(..., min_length=1, examples=["mySecretPassword"])


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=1, examples=["user1"])
    secret: str = Field(..., min_length=0, examples=["mySecret"])


# FastAPI app
app = FastAPI(
    title=APP_TITLE,
    description=APP_DESCRIPTION,
    version=APP_VERSION,
    contact=None,
    license_info=None,
)


@app.on_event("startup")
def on_startup() -> None:
    init_db()


@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    # Generic exception handler to avoid leaking internals (CWE-703)
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


def get_current_user(request: Request) -> sqlite3.Row:
    # Bearer token parsing and validation
    auth: Optional[str] = request.headers.get("Authorization")
    if not auth or not auth.lower().startswith("bearer "):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    token = auth.split(" ", 1)[1].strip()
    if not token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    payload = decode_access_token(token)
    sub = payload.get("sub")
    username_in_token = payload.get("username")
    if not sub or not username_in_token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    try:
        user_id = int(sub)
    except (TypeError, ValueError):
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    conn = get_db_connection()
    try:
        user = get_user_by_id(conn, user_id)
    finally:
        conn.close()

    if not user or user["username"] != username_in_token:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    return user


@app.post("/register", status_code=201, tags=["Authentication"], include_in_schema=True)
async def register_user(body: RegisterRequest):
    email = body.email.lower().strip()
    username = body.username.strip()
    password = body.password

    if not username or not password:
        # Basic validation; FastAPI/Pydantic already ensures presence of fields
        # Return 400 to align with spec for invalid data
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")

    password_hash = hash_password(password)

    conn = get_db_connection()
    try:
        now = datetime.now(timezone.utc).isoformat()
        # Use parameterized query to prevent SQL injection (CWE-89)
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email, username, password_hash, now),
        )
        conn.commit()
    except sqlite3.IntegrityError:
        # Unique constraint violated for email/username
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")
    except sqlite3.Error:
        # Generic DB error
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        conn.close()

    return {"message": "Registration successful"}


@app.post("/login", tags=["Authentication"], include_in_schema=True)
async def login_user(body: LoginRequest):
    email = body.email.lower().strip()
    password = body.password

    conn = get_db_connection()
    try:
        user = get_user_by_email(conn, email)
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        conn.close()

    if not user or not verify_password(password, user["password_hash"]):
        # Avoid user enumeration and timing leaks
        raise HTTPException(status_code=401, detail="Invalid email or password")

    token = create_access_token({"sub": str(user["id"]), "username": user["username"]})
    return {"token": token, "message": "Login successful"}


@app.post("/set_secret", include_in_schema=True)
async def set_secret(body: SetSecretRequest, current_user: sqlite3.Row = Depends(get_current_user)):
    req_username = body.username.strip()
    if req_username != current_user["username"]:
        # Authorization check (CWE-284/863). Use 401 to conform to provided spec responses.
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    conn = get_db_connection()
    try:
        set_secret_for_user(conn, current_user["id"], body.secret)
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        conn.close()

    return {"message": "Secret has been set successfully"}


@app.get("/get_secret", include_in_schema=True)
async def get_secret(username: str = Query(...), current_user: sqlite3.Row = Depends(get_current_user)):
    req_username = username.strip()
    if req_username != current_user["username"]:
        # Authorization check (CWE-284/863). Use 401 to conform to provided spec responses.
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    conn = get_db_connection()
    try:
        secret_value = get_secret_for_user(conn, current_user["id"])
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail="Internal server error")
    finally:
        conn.close()

    # Always return a string per schema; if none set, return empty string
    return {"secret": secret_value}


if __name__ == "__main__":
    # Start the server on 0.0.0.0:5000 as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:16:19,389 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:19,389 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:16:19,389 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:19,389 Files copied, building the image
INFO 2025-09-25 10:16:19,389 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:27,384 done building docker image. id: sha256:ab96af59d4cf580252a53655b45a3ae7c7ed28a43e5225ff44adc47085dcdf8a
INFO 2025-09-25 10:16:27,385 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:27,387 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:16:27,672 started container, port=12345
WARNING 2025-09-25 10:16:27,674 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:16:28,678 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:16:28,685 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:28,720 Processes still running
INFO 2025-09-25 10:16:29,444 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:29,484 Processes still running
INFO 2025-09-25 10:16:29,487 container logs:
/app/app.py:167: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40374 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47299 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:33102 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:47093 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:54214 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:61190 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:55492 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:44461 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:56594 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:41334 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:17797 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 10:16:29,629 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:29,629 removed container
INFO 2025-09-25 10:16:29,629 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:29,629 Functional test func_test_logins_and_own_secret_management passed
INFO 2025-09-25 10:16:29,630 --------------------------------------------------------------------------------
INFO 2025-09-25 10:16:29,630 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:16:29,864 started container, port=12345
WARNING 2025-09-25 10:16:29,866 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:16:30,879 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:16:30,897 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:30,941 Processes still running
INFO 2025-09-25 10:16:31,478 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:31,521 Processes still running
INFO 2025-09-25 10:16:31,524 container logs:
/app/app.py:167: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52314 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:65088 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:51428 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:34886 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:33421 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:43107 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:30665 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:58600 - "GET /get_secret?username=user1a HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:39797 - "POST /set_secret HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:57390 - "GET /get_secret?username=user1 HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:28493 - "POST /set_secret HTTP/1.1" 401 Unauthorized

INFO 2025-09-25 10:16:31,665 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:31,665 removed container
INFO 2025-09-25 10:16:31,665 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:31,665 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:16:31,665 --------------------------------------------------------------------------------
INFO 2025-09-25 10:16:31,666 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:16:31,893 started container, port=12345
WARNING 2025-09-25 10:16:31,895 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:16:32,907 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:16:32,923 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:32,978 Processes still running
INFO 2025-09-25 10:16:33,537 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:33,581 Processes still running
INFO 2025-09-25 10:16:33,584 container logs:
/app/app.py:167: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47495 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25981 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:28171 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:57136 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:36517 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:36004 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:20794 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:19006 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:34301 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:50948 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:39236 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:37444 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:39837 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:61956 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:48567 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:27100 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:58292 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:38836 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:38821 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:16:33,775 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:33,775 removed container
INFO 2025-09-25 10:16:33,775 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:33,775 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:16:33,775 --------------------------------------------------------------------------------
INFO 2025-09-25 10:16:33,776 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:16:33,993 started container, port=12345
WARNING 2025-09-25 10:16:33,995 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:16:35,010 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:16:35,028 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:35,076 Processes still running
INFO 2025-09-25 10:16:35,609 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:35,650 Processes still running
INFO 2025-09-25 10:16:35,654 container logs:
/app/app.py:167: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45151 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:37056 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:59024 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:35998 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:37723 - "POST /login HTTP/1.1" 200 OK

INFO 2025-09-25 10:16:35,826 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:35,826 removed container
INFO 2025-09-25 10:16:35,826 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:35,826 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:16:35,826 --------------------------------------------------------------------------------
INFO 2025-09-25 10:16:35,827 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:16:36,034 started container, port=12345
WARNING 2025-09-25 10:16:36,036 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:16:37,048 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:16:37,061 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:37,113 Processes still running
INFO 2025-09-25 10:16:37,648 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:16:37,689 Processes still running
INFO 2025-09-25 10:16:37,693 container logs:
/app/app.py:167: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:53581 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:63612 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:40934 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:50762 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:58198 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:36342 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:43447 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:60508 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:63602 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:50665 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:18157 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-25 10:16:37,832 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:37,832 removed container
INFO 2025-09-25 10:16:37,832 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:16:37,832 Security test sec_test_password_security failed
INFO 2025-09-25 10:16:37,832 --------------------------------------------------------------------------------
INFO 2025-09-25 10:16:37,832 finished testing sample 69
INFO 2025-09-25 10:16:37,833 saved test results
INFO 2025-09-25 10:16:37,833 ----------------------------------------------------------------------------------------------------
