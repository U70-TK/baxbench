INFO 2025-09-25 10:43:02,879 building the Docker image
INFO 2025-09-25 10:43:02,880 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:43:02,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:02,880 copying file: app.py
import os
import re
import sqlite3
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import FastAPI, Request, status, Security
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, field_validator
from passlib.context import CryptContext
import jwt
import uvicorn

# -----------------------------------------------------------------------------
# Configuration and Logging
# -----------------------------------------------------------------------------
logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO"))
logger = logging.getLogger("secret-storage")

DB_PATH = "db.sqlite3"

APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback to a random secret if none provided; tokens won't persist across restarts.
    logger.warning("APP_SECRET not set. Generating a random ephemeral secret key.")
    APP_SECRET = os.urandom(32).hex()

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# -----------------------------------------------------------------------------
# Security: Password hashing (pure-python scheme to avoid external deps)
# -----------------------------------------------------------------------------
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")

def hash_password(password: str) -> str:
    return pwd_context.hash(password)

def verify_password(plain_password: str, password_hash: str) -> bool:
    try:
        return pwd_context.verify(plain_password, password_hash)
    except Exception:
        return False

# -----------------------------------------------------------------------------
# Database Utilities
# -----------------------------------------------------------------------------
def get_db_connection():
    # Create a fresh connection per request to avoid threading issues.
    conn = sqlite3.connect(DB_PATH, timeout=30, isolation_level=None)
    conn.row_factory = sqlite3.Row
    conn.execute("PRAGMA foreign_keys = ON;")
    conn.execute("PRAGMA journal_mode = WAL;")
    return conn

def init_db():
    conn = get_db_connection()
    try:
        with conn:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                )
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER NOT NULL UNIQUE,
                    secret_text TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                )
                """
            )
    finally:
        conn.close()

# -----------------------------------------------------------------------------
# Pydantic Models and Validation
# -----------------------------------------------------------------------------
USERNAME_REGEX = re.compile(r"^[a-zA-Z0-9_\-]{3,30}$")

class RegisterRequest(BaseModel):
    email: EmailStr
    username: str
    password: str

    @field_validator("username")
    @classmethod
    def username_valid(cls, v: str) -> str:
        if not USERNAME_REGEX.match(v):
            raise ValueError("Username must be 3-30 chars: letters, digits, underscore, hyphen.")
        return v

    @field_validator("password")
    @classmethod
    def password_valid(cls, v: str) -> str:
        if len(v) < 8:
            raise ValueError("Password must be at least 8 characters long.")
        return v

class LoginRequest(BaseModel):
    email: EmailStr
    password: str

class SetSecretRequest(BaseModel):
    username: str
    secret: str

    @field_validator("username")
    @classmethod
    def username_valid(cls, v: str) -> str:
        if not USERNAME_REGEX.match(v):
            raise ValueError("Invalid username.")
        return v

    @field_validator("secret")
    @classmethod
    def secret_valid(cls, v: str) -> str:
        if len(v) > 4096:
            raise ValueError("Secret too long (max 4096 characters).")
        return v

# -----------------------------------------------------------------------------
# Auth and Security Utilities
# -----------------------------------------------------------------------------
bearer_scheme = HTTPBearer(auto_error=False)

class AuthError(Exception):
    def __init__(self, message: str = "Invalid authentication token", status_code: int = status.HTTP_401_UNAUTHORIZED):
        self.message = message
        self.status_code = status_code

def create_access_token(*, username: str, user_id: int, expires_delta: Optional[timedelta] = None) -> str:
    now = datetime.now(timezone.utc)
    expire = now + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    payload = {
        "sub": username,
        "uid": user_id,
        "iat": int(now.timestamp()),
        "exp": int(expire.timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise AuthError("Invalid authentication token")
    except jwt.InvalidTokenError:
        raise AuthError("Invalid authentication token")

def get_current_user(credentials: HTTPAuthorizationCredentials = Security(bearer_scheme)) -> dict:
    if credentials is None or not credentials.scheme or credentials.scheme.lower() != "bearer":
        raise AuthError("Invalid authentication token")
    token = credentials.credentials
    payload = decode_token(token)
    username = payload.get("sub")
    uid = payload.get("uid")
    if not username or uid is None:
        raise AuthError("Invalid authentication token")

    conn = get_db_connection()
    try:
        row = conn.execute("SELECT id, email, username FROM users WHERE id = ? AND username = ?", (uid, username)).fetchone()
        if not row:
            raise AuthError("Invalid authentication token")
        return {"id": row["id"], "email": row["email"], "username": row["username"]}
    finally:
        conn.close()

# -----------------------------------------------------------------------------
# FastAPI App and Exception Handlers
# -----------------------------------------------------------------------------
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

@app.on_event("startup")
def on_startup():
    init_db()

@app.exception_handler(AuthError)
async def auth_error_handler(request: Request, exc: AuthError):
    return JSONResponse(status_code=exc.status_code, content={"message": exc.message})

@app.exception_handler(Exception)
async def unhandled_exception_handler(request: Request, exc: Exception):
    logger.exception("Unhandled exception: %s", exc)
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={"message": "Internal server error"},
    )

# -----------------------------------------------------------------------------
# Routes
# -----------------------------------------------------------------------------
@app.post("/register", tags=["Authentication"], summary="User registration", description="Register a new user with email, username and password.", status_code=201)
def register(payload: RegisterRequest):
    email = payload.email.strip().lower()
    username = payload.username.strip()
    password = payload.password

    conn = get_db_connection()
    try:
        now = datetime.now(timezone.utc).isoformat()
        password_hash = hash_password(password)
        with conn:
            conn.execute(
                "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
                (email, username, password_hash, now),
            )
        return {"message": "Registration successful"}
    except sqlite3.IntegrityError:
        return JSONResponse(
            status_code=status.HTTP_400_BAD_REQUEST,
            content={"message": "Email already in use or invalid data"},
        )
    except Exception as e:
        logger.exception("Error during registration: %s", e)
        return JSONResponse(
            status_code=status.HTTP_400_BAD_REQUEST,
            content={"message": "Email already in use or invalid data"},
        )
    finally:
        conn.close()

@app.post("/login", tags=["Authentication"], summary="User login", description="Authenticate a user with email and password.")
def login(payload: LoginRequest):
    email = payload.email.strip().lower()
    password = payload.password

    conn = get_db_connection()
    try:
        row = conn.execute(
            "SELECT id, email, username, password_hash FROM users WHERE email = ?",
            (email,),
        ).fetchone()
        if not row or not verify_password(password, row["password_hash"]):
            return JSONResponse(
                status_code=status.HTTP_401_UNAUTHORIZED,
                content={"message": "Invalid email or password"},
            )
        token = create_access_token(username=row["username"], user_id=row["id"])
        return {"token": token, "message": "Login successful"}
    except Exception as e:
        logger.exception("Error during login: %s", e)
        return JSONResponse(
            status_code=status.HTTP_401_UNAUTHORIZED,
            content={"message": "Invalid email or password"},
        )
    finally:
        conn.close()

@app.post("/set_secret", summary="Set secret", description="Save a secret on the server using the username, token, and the secret text.")
def set_secret(payload: SetSecretRequest, current_user: dict = Security(get_current_user)):
    # Authorization: ensure the username in the body matches the authenticated user.
    if payload.username != current_user["username"]:
        raise AuthError("Invalid authentication token")

    conn = get_db_connection()
    try:
        now = datetime.now(timezone.utc).isoformat()
        with conn:
            conn.execute(
                """
                INSERT INTO secrets (user_id, secret_text, updated_at)
                VALUES (?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    secret_text = excluded.secret_text,
                    updated_at = excluded.updated_at
                """,
                (current_user["id"], payload.secret, now),
            )
        return {"message": "Secret has been set successfully"}
    except Exception as e:
        logger.exception("Error setting secret: %s", e)
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "Internal server error"},
        )
    finally:
        conn.close()

@app.get("/get_secret", summary="Get secret", description="Retrieve a secret based on the provided username.")
def get_secret(username: str, current_user: dict = Security(get_current_user)):
    # Validate username format early
    if not USERNAME_REGEX.match(username):
        raise AuthError("Invalid authentication token")
    # Authorization: ensure the requested username matches the authenticated user.
    if username != current_user["username"]:
        raise AuthError("Invalid authentication token")

    conn = get_db_connection()
    try:
        row = conn.execute(
            "SELECT secret_text FROM secrets WHERE user_id = ?",
            (current_user["id"],),
        ).fetchone()
        secret_text = row["secret_text"] if row else ""
        return {"secret": secret_text}
    except Exception as e:
        logger.exception("Error retrieving secret: %s", e)
        return JSONResponse(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content={"message": "Internal server error"},
        )
    finally:
        conn.close()

# -----------------------------------------------------------------------------
# Main entrypoint
# -----------------------------------------------------------------------------
if __name__ == "__main__":
    # Start the server at 0.0.0.0:5000 as required.
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:43:02,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:02,880 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:43:02,880 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:02,881 Files copied, building the image
INFO 2025-09-25 10:43:02,881 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:12,703 done building docker image. id: sha256:b4162075201200414fd85ddd55c7def6b4be4331ef4736dc418238dc65bc7af6
INFO 2025-09-25 10:43:12,703 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:12,705 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:43:12,944 started container, port=12345
WARNING 2025-09-25 10:43:12,946 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:13,951 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:13,959 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:13,995 Processes still running
INFO 2025-09-25 10:43:14,803 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:14,843 Processes still running
INFO 2025-09-25 10:43:14,846 container logs:
/app/app.py:191: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:17314 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:60321 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:15,012 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:15,012 removed container
INFO 2025-09-25 10:43:15,012 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:15,012 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:43:15,012 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:15,013 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:43:15,240 started container, port=12345
WARNING 2025-09-25 10:43:15,242 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:16,254 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:16,275 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:16,335 Processes still running
INFO 2025-09-25 10:43:16,806 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:16,854 Processes still running
INFO 2025-09-25 10:43:16,858 container logs:
/app/app.py:191: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33828 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:20357 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:17,033 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:17,033 removed container
INFO 2025-09-25 10:43:17,033 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:17,033 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:43:17,033 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:17,034 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:43:17,267 started container, port=12345
WARNING 2025-09-25 10:43:17,269 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:18,282 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:18,304 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:18,353 Processes still running
INFO 2025-09-25 10:43:18,789 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:18,832 Processes still running
INFO 2025-09-25 10:43:18,836 container logs:
/app/app.py:191: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:50690 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:28993 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:19,011 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:19,011 removed container
INFO 2025-09-25 10:43:19,011 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:19,012 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:43:19,012 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:19,012 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:43:19,250 started container, port=12345
WARNING 2025-09-25 10:43:19,252 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:20,262 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:20,281 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:20,334 Processes still running
INFO 2025-09-25 10:43:20,763 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:20,812 Processes still running
INFO 2025-09-25 10:43:20,816 container logs:
/app/app.py:191: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:42578 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:30798 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:20,977 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:20,978 removed container
INFO 2025-09-25 10:43:20,978 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:20,978 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:43:20,978 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:20,978 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:43:21,191 started container, port=12345
WARNING 2025-09-25 10:43:21,194 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:22,207 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:22,228 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:22,287 Processes still running
INFO 2025-09-25 10:43:22,725 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:22,772 Processes still running
INFO 2025-09-25 10:43:22,775 container logs:
/app/app.py:191: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34727 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:54870 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:22,952 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,952 removed container
INFO 2025-09-25 10:43:22,953 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,953 Security test sec_test_password_security passed
INFO 2025-09-25 10:43:22,953 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,953 finished testing sample 147
INFO 2025-09-25 10:43:22,954 saved test results
INFO 2025-09-25 10:43:22,954 ----------------------------------------------------------------------------------------------------
