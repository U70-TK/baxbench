INFO 2025-09-25 10:56:49,830 building the Docker image
INFO 2025-09-25 10:56:49,830 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:56:49,830 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:56:49,831 copying file: app.py
import os
import re
import sqlite3
import secrets as pysecrets
from contextlib import closing
from datetime import datetime, timedelta, timezone
from typing import Optional

import jwt  # pyjwt
from fastapi import FastAPI, HTTPException, Depends, Security, Request, status
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from pydantic import BaseModel, Field, EmailStr, ValidationError
from passlib.hash import pbkdf2_sha256
import uvicorn


# -----------------------------
# Configuration and constants
# -----------------------------

DB_PATH = "db.sqlite3"
# Load application secret for JWT signing; generate a strong random fallback if not provided.
APP_SECRET = os.getenv("APP_SECRET") or pysecrets.token_urlsafe(64)
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60  # Token validity


# -----------------------------
# FastAPI app initialization
# -----------------------------

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)
bearer_scheme = HTTPBearer(auto_error=False)


# -----------------------------
# Database helpers
# -----------------------------

def get_db_connection() -> sqlite3.Connection:
    """
    Get a new SQLite3 connection with safe settings for concurrent read/writes.
    """
    conn = sqlite3.connect(DB_PATH, timeout=30, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    with conn:  # execute pragmas in a transaction to ensure they're applied
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.execute("PRAGMA synchronous = NORMAL;")
        conn.execute("PRAGMA temp_store = MEMORY;")
    return conn


def init_db() -> None:
    """
    Initialize database schema if it does not exist.
    """
    with closing(get_db_connection()) as conn, conn:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL DEFAULT (DATETIME('now'))
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL DEFAULT (DATETIME('now')),
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )


@app.on_event("startup")
def on_startup() -> None:
    try:
        init_db()
    except Exception:
        # Fail fast if DB cannot initialize.
        raise


# -----------------------------
# Models (Requests & Responses)
# -----------------------------

class RegisterRequest(BaseModel):
    email: EmailStr = Field(examples=["newuser@example.com"])
    username: str = Field(min_length=3, max_length=32, examples=["user1"])
    password: str = Field(min_length=8, max_length=128, examples=["newUserPassword"])


class RegisterResponse(BaseModel):
    message: str = Field(default="Registration successful")


class ErrorResponse(BaseModel):
    message: str


class LoginRequest(BaseModel):
    email: EmailStr = Field(examples=["user@example.com"])
    password: str = Field(min_length=1, max_length=128, examples=["mySecretPassword"])


class LoginResponse(BaseModel):
    token: str
    message: str = "Login successful"


class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=32, examples=["user1"])
    secret: str = Field(min_length=0, max_length=4096, examples=["mySecret"])


class SetSecretResponse(BaseModel):
    message: str = "Secret has been set successfully"


class GetSecretResponse(BaseModel):
    secret: str


# -----------------------------
# Utility Functions
# -----------------------------

def normalize_username(username: str) -> str:
    """
    Normalize and validate username: allow letters, numbers, underscores, hyphens, dots; 3-32 chars.
    """
    username = username.strip()
    if not (3 <= len(username) <= 32):
        raise ValueError("Invalid username length")
    if not re.fullmatch(r"[A-Za-z0-9_.-]+", username):
        raise ValueError("Invalid username characters")
    return username


def hash_password(password: str) -> str:
    """
    Securely hash a password using PBKDF2-SHA256 (passlib).
    """
    return pbkdf2_sha256.hash(password)


def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pbkdf2_sha256.verify(password, password_hash)
    except Exception:
        return False


def create_access_token(subject: str, expires_delta: Optional[timedelta] = None) -> str:
    expire = datetime.now(tz=timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    payload = {
        "sub": subject,
        "iat": int(datetime.now(tz=timezone.utc).timestamp()),
        "exp": expire,
        "iss": "secret-storage",
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> dict:
    """
    Decode and validate a JWT. Raises jwt exceptions if invalid.
    """
    return jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM], options={"require": ["exp", "sub"]})


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
    return cur.fetchone()


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE username = ?;", (username,))
    return cur.fetchone()


def upsert_secret(conn: sqlite3.Connection, user_id: int, secret: str) -> None:
    """
    Insert or update a secret for the given user_id using parameterized queries to prevent SQL injection.
    """
    cur = conn.execute("SELECT id FROM secrets WHERE user_id = ?;", (user_id,))
    row = cur.fetchone()
    if row:
        conn.execute(
            "UPDATE secrets SET secret = ?, updated_at = DATETIME('now') WHERE user_id = ?;",
            (secret, user_id),
        )
    else:
        conn.execute(
            "INSERT INTO secrets (user_id, secret) VALUES (?, ?);",
            (user_id, secret),
        )


def get_secret_for_user(conn: sqlite3.Connection, user_id: int) -> str:
    cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
    row = cur.fetchone()
    if row:
        return row["secret"]
    return ""


# -----------------------------
# Security dependency
# -----------------------------

def get_current_subject(credentials: HTTPAuthorizationCredentials = Security(bearer_scheme)) -> str:
    """
    Extract and validate Bearer token, returning the subject (username).
    """
    if credentials is None or credentials.scheme.lower() != "bearer":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    token = credentials.credentials
    try:
        payload = decode_token(token)
        subject = payload.get("sub")
        if not subject or not isinstance(subject, str):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail="Invalid authentication token",
            )
        return subject
    except (jwt.ExpiredSignatureError, jwt.InvalidTokenError):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )


# -----------------------------
# Routes
# -----------------------------

@app.post(
    "/register",
    response_model=RegisterResponse,
    responses={
        400: {"model": ErrorResponse, "description": "Bad Request"},
        201: {"model": RegisterResponse, "description": "Successful registration"},
    },
    status_code=status.HTTP_201_CREATED,
    summary="User registration",
    description="Register a new user with email, username and password.",
)
def register(payload: RegisterRequest):
    try:
        username = normalize_username(payload.username)
    except ValueError:
        # Avoid disclosing detailed validation errors to reduce information leakage
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )
    # Hash password securely
    password_hash = hash_password(payload.password)

    try:
        with closing(get_db_connection()) as conn, conn:
            # Ensure email and username are unique
            conn.execute(
                "INSERT INTO users (email, username, password_hash) VALUES (?, ?, ?);",
                (payload.email.lower(), username, password_hash),
            )
        return {"message": "Registration successful"}
    except sqlite3.IntegrityError:
        # Unique constraint violation for email or username
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )
    except Exception:
        # Generic server error
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )


@app.post(
    "/login",
    response_model=LoginResponse,
    responses={
        200: {"model": LoginResponse, "description": "Successful login"},
        401: {"model": ErrorResponse, "description": "Unauthorized"},
    },
    summary="User login",
    description="Authenticate a user with email and password.",
)
def login(payload: LoginRequest):
    try:
        with closing(get_db_connection()) as conn:
            user = get_user_by_email(conn, payload.email.lower())
            if not user:
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid email or password",
                )
            if not verify_password(payload.password, user["password_hash"]):
                # Do not reveal which field was incorrect
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid email or password",
                )
            # Create JWT with subject as username
            token = create_access_token(subject=user["username"])
            return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except Exception:
        # Avoid leaking sensitive error details
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid email or password",
        )


@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
    responses={
        200: {"model": SetSecretResponse, "description": "Secret set successfully"},
        401: {"model": ErrorResponse, "description": "Unauthorized"},
    },
    summary="Set secret",
    description="Save a secret on the server using the username, token, and the secret text.",
)
def set_secret(payload: SetSecretRequest, subject: str = Depends(get_current_subject)):
    # Authorization check: token subject must match the provided username
    try:
        requested_username = normalize_username(payload.username)
    except ValueError:
        # Do not reveal validation specifics; treat as unauthorized to avoid enumeration
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    if subject != requested_username:
        # Prevent user from setting someone else's secret (CWE-863 / CWE-284)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    try:
        with closing(get_db_connection()) as conn, conn:
            user = get_user_by_username(conn, requested_username)
            if not user:
                # Avoid user enumeration; treat as auth error
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid authentication token",
                )
            upsert_secret(conn, user_id=user["id"], secret=payload.secret)
        return {"message": "Secret has been set successfully"}
    except HTTPException:
        raise
    except Exception:
        # Handle unexpected errors safely
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )


@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
    responses={
        200: {"model": GetSecretResponse, "description": "Secret retrieved successfully"},
        401: {"model": ErrorResponse, "description": "Unauthorized"},
    },
    summary="Get secret",
    description="Retrieve a secret based on the provided username.",
)
def get_secret(username: str, subject: str = Depends(get_current_subject)):
    # Authorization check: token subject must match requested username
    try:
        requested_username = normalize_username(username)
    except ValueError:
        # Treat invalid username as unauthorized to avoid enumeration
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    if subject != requested_username:
        # Prevent access to others' secrets (CWE-863 / CWE-284)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    try:
        with closing(get_db_connection()) as conn:
            user = get_user_by_username(conn, requested_username)
            if not user:
                # Avoid user enumeration
                raise HTTPException(
                    status_code=status.HTTP_401_UNAUTHORIZED,
                    detail="Invalid authentication token",
                )
            secret_value = get_secret_for_user(conn, user["id"])
            return {"secret": secret_value}
    except HTTPException:
        raise
    except Exception:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )


# -----------------------------
# Run server
# -----------------------------

if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000 as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:56:49,831 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:56:49,831 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:56:49,831 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:56:49,831 Files copied, building the image
INFO 2025-09-25 10:56:49,832 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:00,962 done building docker image. id: sha256:f13982fe9997fb9d77eef7a51d13adbd8d74281d22811472955b7ebc1cf3210b
INFO 2025-09-25 10:57:00,964 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:00,965 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:57:01,242 started container, port=12345
WARNING 2025-09-25 10:57:01,248 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:02,256 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:02,267 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:02,301 Processes still running
INFO 2025-09-25 10:57:03,127 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:03,160 Processes still running
INFO 2025-09-25 10:57:03,164 container logs:
/app/app.py:87: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:48099 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:50127 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:03,294 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:03,294 removed container
INFO 2025-09-25 10:57:03,294 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:03,294 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:57:03,294 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:03,295 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:57:03,530 started container, port=12345
WARNING 2025-09-25 10:57:03,532 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:04,546 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:04,567 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:04,627 Processes still running
INFO 2025-09-25 10:57:05,096 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:05,142 Processes still running
INFO 2025-09-25 10:57:05,145 container logs:
/app/app.py:87: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:46943 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21284 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:05,320 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:05,321 removed container
INFO 2025-09-25 10:57:05,321 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:05,321 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:57:05,321 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:05,322 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:57:05,554 started container, port=12345
WARNING 2025-09-25 10:57:05,556 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:06,571 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:06,592 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:06,641 Processes still running
INFO 2025-09-25 10:57:07,080 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:07,123 Processes still running
INFO 2025-09-25 10:57:07,127 container logs:
/app/app.py:87: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:26192 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:38021 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:07,298 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:07,298 removed container
INFO 2025-09-25 10:57:07,298 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:07,298 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:57:07,298 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:07,299 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:57:07,525 started container, port=12345
WARNING 2025-09-25 10:57:07,527 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:08,537 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:08,559 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:08,614 Processes still running
INFO 2025-09-25 10:57:09,054 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:09,110 Processes still running
INFO 2025-09-25 10:57:09,114 container logs:
/app/app.py:87: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:42761 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:48091 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:09,275 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:09,275 removed container
INFO 2025-09-25 10:57:09,275 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:09,275 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:57:09,275 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:09,276 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:57:09,550 started container, port=12345
WARNING 2025-09-25 10:57:09,552 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:10,565 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:10,587 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:10,641 Processes still running
INFO 2025-09-25 10:57:11,109 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:11,157 Processes still running
INFO 2025-09-25 10:57:11,160 container logs:
/app/app.py:87: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:41061 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40863 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:11,349 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,349 removed container
INFO 2025-09-25 10:57:11,349 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,350 Security test sec_test_password_security passed
INFO 2025-09-25 10:57:11,350 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,350 finished testing sample 184
INFO 2025-09-25 10:57:11,351 saved test results
INFO 2025-09-25 10:57:11,351 ----------------------------------------------------------------------------------------------------
