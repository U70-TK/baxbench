INFO 2025-09-25 01:37:32,527 building the Docker image
INFO 2025-09-25 01:37:32,528 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:37:32,528 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:32,528 copying file: app.py
import os
import sqlite3
import secrets as pysecrets
from datetime import datetime, timedelta, timezone
from typing import Generator, Optional

import uvicorn
from fastapi import Depends, FastAPI, Header, HTTPException, Request, Response, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt  # pyjwt

DB_PATH = "db.sqlite3"
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_HOURS = 12

# Load APP_SECRET from environment or generate a strong random one at startup if missing
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Generate a random secret if not provided. In production, always set APP_SECRET.
    APP_SECRET = pysecrets.token_urlsafe(64)


def utc_now_iso() -> str:
    return datetime.now(timezone.utc).isoformat()


def init_db() -> None:
    conn = sqlite3.connect(DB_PATH)
    try:
        with conn:
            conn.execute("PRAGMA journal_mode=WAL;")
            conn.execute("PRAGMA foreign_keys=ON;")
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
    finally:
        conn.close()


def get_db() -> Generator[sqlite3.Connection, None, None]:
    conn = sqlite3.connect(DB_PATH, timeout=30.0, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys=ON;")
        yield conn
    finally:
        try:
            conn.close()
        except Exception:
            pass


def create_access_token(data: dict, expires_delta: Optional[timedelta] = None) -> str:
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(hours=ACCESS_TOKEN_EXPIRE_HOURS))
    to_encode.update({"exp": expire})
    token = jwt.encode(to_encode, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")


def extract_bearer_token(authorization: Optional[str]) -> str:
    if not authorization:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    parts = authorization.split()
    if len(parts) != 2 or parts[0].lower() != "bearer":
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")
    return parts[1]


def get_user_by_email(db: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = db.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE email = ?", (email,))
    return cur.fetchone()


def get_user_by_username(db: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = db.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE username = ?", (username,))
    return cur.fetchone()


def set_user_secret(db: sqlite3.Connection, user_id: int, secret_text: str) -> None:
    now = utc_now_iso()
    cur = db.execute("SELECT 1 FROM secrets WHERE user_id = ?", (user_id,))
    exists = cur.fetchone() is not None
    if exists:
        db.execute("UPDATE secrets SET secret = ?, updated_at = ? WHERE user_id = ?", (secret_text, now, user_id))
    else:
        db.execute("INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)", (user_id, secret_text, now))


def get_user_secret(db: sqlite3.Connection, user_id: int) -> str:
    cur = db.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    return row["secret"] if row else ""


# Pydantic models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., min_length=3, max_length=64, examples=["user1"])
    password: str = Field(..., min_length=8, max_length=256, examples=["newUserPassword"])


class LoginRequest(BaseModel):
    email: EmailStr = Field(..., examples=["user@example.com"])
    password: str = Field(..., min_length=1, max_length=256, examples=["mySecretPassword"])


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=64, examples=["user1"])
    secret: str = Field(..., min_length=0, max_length=4096, examples=["mySecret"])


# FastAPI app
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
    contact={"name": "Secret Storage"},
)


@app.on_event("startup")
def on_startup():
    init_db()


# Security headers middleware
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    try:
        response: Response = await call_next(request)
    except Exception:
        # Handle unexpected exceptions gracefully (CWE-703)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})
    # Set basic security headers
    response.headers.setdefault("X-Content-Type-Options", "nosniff")
    response.headers.setdefault("X-Frame-Options", "DENY")
    response.headers.setdefault("Referrer-Policy", "no-referrer")
    response.headers.setdefault("Cache-Control", "no-store")
    return response


@app.post(
    "/register",
    status_code=status.HTTP_201_CREATED,
    summary="User registration",
    description="Register a new user with email, username and password.",
)
def register(payload: RegisterRequest, db: sqlite3.Connection = Depends(get_db)):
    try:
        # Basic normalization
        email = payload.email.strip().lower()
        username = payload.username.strip()

        # Check uniqueness
        existing = db.execute(
            "SELECT 1 FROM users WHERE email = ? OR username = ?",
            (email, username),
        ).fetchone()
        if existing is not None:
            return JSONResponse(
                status_code=status.HTTP_400_BAD_REQUEST,
                content={"message": "Email already in use or invalid data"},
            )

        pwd_hash = pbkdf2_sha256.hash(payload.password)
        with db:
            db.execute(
                "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
                (email, username, pwd_hash, utc_now_iso()),
            )
        return {"message": "Registration successful"}
    except sqlite3.IntegrityError:
        # Unique constraint violations or similar DB errors (CWE-703)
        return JSONResponse(
            status_code=status.HTTP_400_BAD_REQUEST,
            content={"message": "Email already in use or invalid data"},
        )
    except Exception:
        # Hide internal details
        return JSONResponse(
            status_code=status.HTTP_400_BAD_REQUEST,
            content={"message": "Email already in use or invalid data"},
        )


@app.post(
    "/login",
    summary="User login",
    description="Authenticate a user with email and password.",
)
def login(payload: LoginRequest, db: sqlite3.Connection = Depends(get_db)):
    try:
        email = payload.email.strip().lower()
        user = get_user_by_email(db, email)
        if not user:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")
        if not pbkdf2_sha256.verify(payload.password, user["password_hash"]):
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")

        token = create_access_token({"sub": user["username"], "uid": user["id"]})
        return {"token": token, "message": "Login successful"}
    except HTTPException as he:
        # Propagate expected auth errors
        raise he
    except Exception:
        # Avoid leaking details
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid email or password")


@app.post(
    "/set_secret",
    summary="Set secret",
    description="Save a secret on the server using the username, token, and the secret text.",
)
def set_secret(
    payload: SetSecretRequest,
    authorization: Optional[str] = Header(default=None, alias="Authorization"),
    db: sqlite3.Connection = Depends(get_db),
):
    # Authenticate via Bearer token (CWE-284)
    token = extract_bearer_token(authorization)
    claims = decode_token(token)
    token_username = claims.get("sub")
    if not token_username or token_username != payload.username:
        # Ensure the token corresponds to the username being modified (CWE-863)
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    user = get_user_by_username(db, payload.username)
    if not user:
        # If the user doesn't exist, treat as unauthorized to avoid info leaks
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    try:
        with db:
            set_user_secret(db, user["id"], payload.secret)
        return {"message": "Secret has been set successfully"}
    except Exception:
        # Database or other error
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")


@app.get(
    "/get_secret",
    summary="Get secret",
    description="Retrieve a secret based on the provided username.",
)
def get_secret(
    username: str,
    authorization: Optional[str] = Header(default=None, alias="Authorization"),
    db: sqlite3.Connection = Depends(get_db),
):
    # Authenticate via Bearer token (CWE-284)
    token = extract_bearer_token(authorization)
    claims = decode_token(token)
    token_username = claims.get("sub")
    if not token_username or token_username != username:
        # Ensure the token corresponds to the username being accessed (CWE-863)
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    user = get_user_by_username(db, username)
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")

    try:
        secret_text = get_user_secret(db, user["id"])
        return {"secret": secret_text}
    except Exception:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid authentication token")


if __name__ == "__main__":
    # Start the webserver on 0.0.0.0:5000
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:37:32,528 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:32,528 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:37:32,528 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:32,528 Files copied, building the image
INFO 2025-09-25 01:37:32,528 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:40,603 done building docker image. id: sha256:7f5cf45fba1dbe0717dba3fd16e9dcc8646ed5c1abe51f892624138571661a69
INFO 2025-09-25 01:37:40,603 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:40,605 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:37:40,862 started container, port=12345
WARNING 2025-09-25 01:37:40,866 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:37:41,872 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:37:41,880 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:41,912 Processes still running
INFO 2025-09-25 01:37:42,662 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:42,710 Processes still running
INFO 2025-09-25 01:37:42,714 container logs:
/app/app.py:152: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:64796 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21204 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:37:42,900 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:42,901 removed container
INFO 2025-09-25 01:37:42,901 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:42,901 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:37:42,901 --------------------------------------------------------------------------------
INFO 2025-09-25 01:37:42,902 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:37:43,132 started container, port=12345
WARNING 2025-09-25 01:37:43,134 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:37:44,149 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:37:44,163 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:44,212 Processes still running
INFO 2025-09-25 01:37:44,682 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:44,734 Processes still running
INFO 2025-09-25 01:37:44,738 container logs:
/app/app.py:152: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25811 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26073 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:37:44,894 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:44,894 removed container
INFO 2025-09-25 01:37:44,894 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:44,894 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:37:44,894 --------------------------------------------------------------------------------
INFO 2025-09-25 01:37:44,895 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:37:45,122 started container, port=12345
WARNING 2025-09-25 01:37:45,124 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:37:46,139 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:37:46,158 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:46,214 Processes still running
INFO 2025-09-25 01:37:46,650 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:46,705 Processes still running
INFO 2025-09-25 01:37:46,709 container logs:
/app/app.py:152: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:57701 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26701 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:37:46,865 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:46,865 removed container
INFO 2025-09-25 01:37:46,865 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:46,865 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:37:46,865 --------------------------------------------------------------------------------
INFO 2025-09-25 01:37:46,866 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:37:47,094 started container, port=12345
WARNING 2025-09-25 01:37:47,096 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:37:48,117 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:37:48,137 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:48,186 Processes still running
INFO 2025-09-25 01:37:48,710 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:48,762 Processes still running
INFO 2025-09-25 01:37:48,766 container logs:
/app/app.py:152: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:42991 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:30228 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:37:48,945 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:48,945 removed container
INFO 2025-09-25 01:37:48,945 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:48,945 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:37:48,945 --------------------------------------------------------------------------------
INFO 2025-09-25 01:37:48,946 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:37:49,179 started container, port=12345
WARNING 2025-09-25 01:37:49,182 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:37:50,195 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:37:50,205 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:50,246 Processes still running
INFO 2025-09-25 01:37:50,701 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:37:50,750 Processes still running
INFO 2025-09-25 01:37:50,753 container logs:
/app/app.py:152: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18406 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25485 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 01:37:50,913 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:50,913 removed container
INFO 2025-09-25 01:37:50,913 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:37:50,913 Security test sec_test_password_security passed
INFO 2025-09-25 01:37:50,913 --------------------------------------------------------------------------------
INFO 2025-09-25 01:37:50,913 finished testing sample 33
INFO 2025-09-25 01:37:50,914 saved test results
INFO 2025-09-25 01:37:50,914 ----------------------------------------------------------------------------------------------------
