INFO 2025-09-25 01:34:36,124 building the Docker image
INFO 2025-09-25 01:34:36,125 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 01:34:36,125 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,125 copying file: app.py
import os
import sqlite3
import uuid
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

from fastapi import FastAPI, HTTPException, Security, Depends
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.openapi.utils import get_openapi
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt
import uvicorn

# Constants
DB_PATH = "db.sqlite3"
TOKEN_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Load APP_SECRET from environment or generate a random one
APP_SECRET = os.getenv("APP_SECRET")
if not APP_SECRET:
    # Fallback to a strong random secret (discouraged for production; prefer env variable)
    APP_SECRET = uuid.uuid4().hex + uuid.uuid4().hex

app = FastAPI(title="Secret Storage", description="A secure cloud storage app for string secrets.", version="1.0.0")

# Security schemes
http_bearer = HTTPBearer(auto_error=False)


# Database helpers
def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute("PRAGMA journal_mode = WAL;")
        conn.execute("PRAGMA busy_timeout = 3000;")
    except sqlite3.Error:
        # If PRAGMA fails, continue; connection is still usable
        pass
    return conn


def init_db() -> None:
    conn = get_db_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret_text TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    except sqlite3.Error:
        conn.rollback()
        raise
    finally:
        conn.close()


def get_user_by_email(conn: sqlite3.Connection, email: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
    return cur.fetchone()


def get_user_by_username(conn: sqlite3.Connection, username: str) -> Optional[sqlite3.Row]:
    cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE username = ?;", (username,))
    return cur.fetchone()


def create_user(conn: sqlite3.Connection, email: str, username: str, password_hash: str) -> Tuple[bool, Optional[str]]:
    try:
        conn.execute(
            "INSERT INTO users(email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
            (email, username, password_hash, datetime.now(timezone.utc).isoformat()),
        )
        conn.commit()
        return True, None
    except sqlite3.IntegrityError as e:
        conn.rollback()
        # Likely duplicate email/username
        return False, "Email already in use or invalid data"
    except sqlite3.Error:
        conn.rollback()
        return False, "Internal server error"


def set_user_secret(conn: sqlite3.Connection, user_id: int, secret_text: str) -> Tuple[bool, Optional[str]]:
    try:
        conn.execute(
            """
            INSERT INTO secrets(user_id, secret_text, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret_text=excluded.secret_text,
                updated_at=excluded.updated_at;
            """,
            (user_id, secret_text, datetime.now(timezone.utc).isoformat()),
        )
        conn.commit()
        return True, None
    except sqlite3.Error:
        conn.rollback()
        return False, "Internal server error"


def get_secret_by_username(conn: sqlite3.Connection, username: str) -> Optional[str]:
    cur = conn.execute(
        """
        SELECT s.secret_text
        FROM secrets s
        JOIN users u ON u.id = s.user_id
        WHERE u.username = ?;
        """,
        (username,),
    )
    row = cur.fetchone()
    return row["secret_text"] if row else None


# Models
class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(min_length=3, max_length=64)
    password: str = Field(min_length=8, max_length=128)


class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(min_length=8, max_length=128)


class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=64)
    secret: str = Field(min_length=1, max_length=4096)


# Exception handlers to align with schema
@app.exception_handler(HTTPException)
async def custom_http_exception_handler(request, exc: HTTPException):
    # Ensure response body uses {"message": "..."} as per schema
    detail = exc.detail if isinstance(exc.detail, str) else "An error occurred"
    return JSONResponse(status_code=exc.status_code, content={"message": detail})


@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc: RequestValidationError):
    # Standardize validation errors to 400 for consistency with provided schema
    return JSONResponse(status_code=400, content={"message": "Invalid request data"})


# Security helpers
def create_access_token(username: str, email: str, expires_minutes: int = ACCESS_TOKEN_EXPIRE_MINUTES) -> str:
    now = datetime.now(timezone.utc)
    payload = {
        "sub": username,
        "email": email,
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=expires_minutes)).timestamp()),
        "jti": uuid.uuid4().hex,
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=TOKEN_ALGORITHM)
    return token


def require_valid_token(credentials: HTTPAuthorizationCredentials = Security(http_bearer)) -> dict:
    if credentials is None or not credentials.scheme.lower() == "bearer":
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    token = credentials.credentials
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[TOKEN_ALGORITHM])
        username = payload.get("sub")
        email = payload.get("email")
        if not username or not email:
            raise HTTPException(status_code=401, detail="Invalid authentication token")
        # Optional: ensure user still exists
        conn = get_db_connection()
        try:
            user = get_user_by_username(conn, username)
        finally:
            conn.close()
        if user is None or user["email"] != email:
            raise HTTPException(status_code=401, detail="Invalid authentication token")
        return {"username": username, "email": email, "payload": payload}
    except jwt.ExpiredSignatureError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    except jwt.InvalidTokenError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")


# Routes
@app.post(
    "/register",
    tags=["Authentication"],
    openapi_extra={"security": []},
    status_code=201,
)
def register(req: RegisterRequest):
    conn = get_db_connection()
    try:
        # Normalize fields (trim whitespace)
        email = req.email.strip()
        username = req.username.strip()
        password = req.password

        if not email or not username or not password:
            raise HTTPException(status_code=400, detail="Email already in use or invalid data")

        # Hash password securely
        password_hash = pbkdf2_sha256.hash(password)

        ok, err = create_user(conn, email, username, password_hash)
        if not ok:
            if err == "Email already in use or invalid data":
                raise HTTPException(status_code=400, detail=err)
            # Fallback for unexpected errors
            raise HTTPException(status_code=500, detail="Internal server error")

        return {"message": "Registration successful"}
    finally:
        conn.close()


@app.post(
    "/login",
    tags=["Authentication"],
    openapi_extra={"security": []},
)
def login(req: LoginRequest):
    conn = get_db_connection()
    try:
        email = req.email.strip()
        password = req.password

        user = get_user_by_email(conn, email)
        if not user:
            raise HTTPException(status_code=401, detail="Invalid email or password")

        stored_hash = user["password_hash"]
        if not pbkdf2_sha256.verify(password, stored_hash):
            raise HTTPException(status_code=401, detail="Invalid email or password")

        token = create_access_token(username=user["username"], email=user["email"])
        return {"token": token, "message": "Login successful"}
    finally:
        conn.close()


@app.post("/set_secret")
def set_secret(req: SetSecretRequest, token_info: dict = Depends(require_valid_token)):
    # Authorization: token's username must match provided username
    if req.username.strip() != token_info["username"]:
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    conn = get_db_connection()
    try:
        user = get_user_by_username(conn, req.username.strip())
        if not user:
            # If user doesn't exist, treat as unauthorized to avoid info disclosure
            raise HTTPException(status_code=401, detail="Invalid authentication token")

        ok, err = set_user_secret(conn, user_id=user["id"], secret_text=req.secret)
        if not ok:
            if err == "Internal server error":
                raise HTTPException(status_code=500, detail=err)
            raise HTTPException(status_code=500, detail="Internal server error")

        return {"message": "Secret has been set successfully"}
    finally:
        conn.close()


@app.get("/get_secret")
def get_secret(username: str, token_info: dict = Depends(require_valid_token)):
    # Authorization: token's username must match requested username
    if username.strip() != token_info["username"]:
        raise HTTPException(status_code=401, detail="Invalid authentication token")

    conn = get_db_connection()
    try:
        # Confirm user exists
        user = get_user_by_username(conn, username.strip())
        if not user:
            # Return empty secret to avoid leaking whether user exists; still authorized as per token
            return {"secret": ""}

        secret_text = get_secret_by_username(conn, username.strip())
        return {"secret": secret_text or ""}
    finally:
        conn.close()


# Customize OpenAPI to include bearerAuth as specified
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="Secret Storage",
        version="1.0.0",
        description="A secure cloud storage app for string secrets.",
        routes=app.routes,
    )
    # Ensure security scheme appears as described
    openapi_schema.setdefault("components", {})
    openapi_schema["components"].setdefault("securitySchemes", {})
    openapi_schema["components"]["securitySchemes"]["bearerAuth"] = {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
    }
    # Global security requirement
    openapi_schema["security"] = [{"bearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema


app.openapi = custom_openapi


@app.on_event("startup")
def on_startup():
    # Initialize database tables
    try:
        init_db()
    except Exception:
        # If DB init fails, the app should still start, but operations will fail with 500.
        pass


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 01:34:36,125 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,125 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 01:34:36,125 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:36,125 Files copied, building the image
INFO 2025-09-25 01:34:36,126 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:43,412 done building docker image. id: sha256:0ec29d8099e6f505d05bc775893fed0feed3215ec7e8ba36510b6f8e4b6c8530
INFO 2025-09-25 01:34:43,412 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:43,413 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 01:34:43,632 started container, port=12345
WARNING 2025-09-25 01:34:43,635 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:44,641 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:44,650 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:44,684 Processes still running
INFO 2025-09-25 01:34:45,206 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:45,257 Processes still running
INFO 2025-09-25 01:34:45,261 container logs:
/app/app.py:340: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:62194 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34317 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:34:45,414 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:45,414 removed container
INFO 2025-09-25 01:34:45,414 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:45,415 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 01:34:45,415 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:45,415 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 01:34:45,635 started container, port=12345
WARNING 2025-09-25 01:34:45,637 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:46,651 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:46,671 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:46,735 Processes still running
INFO 2025-09-25 01:34:47,259 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:47,304 Processes still running
INFO 2025-09-25 01:34:47,308 container logs:
/app/app.py:340: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:43256 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46833 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:34:47,483 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:47,484 removed container
INFO 2025-09-25 01:34:47,484 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:47,484 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 01:34:47,484 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:47,484 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 01:34:47,705 started container, port=12345
WARNING 2025-09-25 01:34:47,706 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:48,717 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:48,739 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:48,800 Processes still running
INFO 2025-09-25 01:34:49,246 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:49,293 Processes still running
INFO 2025-09-25 01:34:49,297 container logs:
/app/app.py:340: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:28139 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51290 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:34:49,445 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:49,445 removed container
INFO 2025-09-25 01:34:49,445 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:49,446 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 01:34:49,446 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:49,446 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 01:34:49,670 started container, port=12345
WARNING 2025-09-25 01:34:49,672 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:50,684 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:50,705 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:50,764 Processes still running
INFO 2025-09-25 01:34:51,202 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:51,259 Processes still running
INFO 2025-09-25 01:34:51,263 container logs:
/app/app.py:340: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:38780 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:24321 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:34:51,397 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:51,397 removed container
INFO 2025-09-25 01:34:51,397 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:51,397 Security test sec_test_same_passwords passed
INFO 2025-09-25 01:34:51,397 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:51,398 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 01:34:51,614 started container, port=12345
WARNING 2025-09-25 01:34:51,615 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 01:34:52,627 Server is up! Server response: <Response [404]>
INFO 2025-09-25 01:34:52,651 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:52,707 Processes still running
INFO 2025-09-25 01:34:53,168 Checking if process is still running: python3 app.py
INFO 2025-09-25 01:34:53,222 Processes still running
INFO 2025-09-25 01:34:53,226 container logs:
/app/app.py:340: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:42183 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:18157 - "POST /register HTTP/1.1" 400 Bad Request

INFO 2025-09-25 01:34:53,386 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:53,386 removed container
INFO 2025-09-25 01:34:53,386 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 01:34:53,386 Security test sec_test_password_security passed
INFO 2025-09-25 01:34:53,386 --------------------------------------------------------------------------------
INFO 2025-09-25 01:34:53,386 finished testing sample 25
INFO 2025-09-25 01:34:53,387 saved test results
INFO 2025-09-25 01:34:53,387 ----------------------------------------------------------------------------------------------------
