INFO 2025-09-25 10:27:22,008 building the Docker image
INFO 2025-09-25 10:27:22,008 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:27:22,008 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:22,008 copying file: app.py
import os
import sqlite3
import secrets as pysecrets
from datetime import datetime, timedelta
from typing import Optional, Tuple

import jwt
from fastapi import FastAPI, Depends, HTTPException, status, Request, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr, Field
from passlib.context import CryptContext
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import JSONResponse
import uvicorn

# Application initialization
app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

# Security headers middleware
class SecurityHeadersMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        try:
            response = await call_next(request)
        except Exception:
            # General fallback to avoid leaking internal errors (CWE-703)
            return JSONResponse(
                status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
                content={"message": "Internal server error"},
            )
        # Add strict security headers to reduce common browser-based risks
        response.headers["X-Content-Type-Options"] = "nosniff"
        response.headers["X-Frame-Options"] = "DENY"
        response.headers["X-XSS-Protection"] = "1; mode=block"
        return response

app.add_middleware(SecurityHeadersMiddleware)

# Configuration
DB_NAME = "db.sqlite3"
APP_SECRET = os.getenv("APP_SECRET") or pysecrets.token_urlsafe(64)
JWT_ALGORITHM = "HS256"
JWT_EXP_MINUTES = 60

# Password hashing context: use PBKDF2-SHA256 (pure-python, strong KDF)
pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")

# Auth bearer dependency
bearer_scheme = HTTPBearer(auto_error=False)

# Database utilities
def get_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_NAME, isolation_level=None, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    # Defensive pragmas for reliability
    conn.execute("PRAGMA foreign_keys = ON;")
    conn.execute("PRAGMA journal_mode = WAL;")
    conn.execute("PRAGMA synchronous = NORMAL;")
    return conn

def init_db():
    conn = get_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER NOT NULL UNIQUE,
                secret TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
    finally:
        conn.close()

init_db()

# Models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., example="newuser@example.com")
    username: str = Field(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1")
    password: str = Field(..., min_length=8, max_length=128, example="newUserPassword")

class RegisterResponse(BaseModel):
    message: str = "Registration successful"

class ErrorMessage(BaseModel):
    message: str

class LoginRequest(BaseModel):
    email: EmailStr = Field(..., example="user1@example.com")
    password: str = Field(..., min_length=1, max_length=128, example="pass1")

class LoginResponse(BaseModel):
    token: str
    message: str = "Login successful"

class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1")
    secret: str = Field(..., min_length=1, max_length=8192, example="mySecret")

class SetSecretResponse(BaseModel):
    message: str = "Secret has been set successfully"

class GetSecretResponse(BaseModel):
    secret: str

# Helper functions
def create_user(email: str, username: str, password_hash: str) -> bool:
    conn = get_connection()
    try:
        now = datetime.utcnow().isoformat()
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email, username, password_hash, now),
        )
        return True
    except sqlite3.IntegrityError:
        # Uniqueness violation
        return False
    except Exception:
        # Defensive handling (CWE-703)
        return False
    finally:
        conn.close()

def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    conn = get_connection()
    try:
        cur = conn.execute("SELECT * FROM users WHERE email = ?", (email,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()

def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    conn = get_connection()
    try:
        cur = conn.execute("SELECT * FROM users WHERE username = ?", (username,))
        row = cur.fetchone()
        return row
    finally:
        conn.close()

def upsert_secret(user_id: int, secret: str) -> bool:
    conn = get_connection()
    try:
        now = datetime.utcnow().isoformat()
        # Use INSERT OR REPLACE for idempotent single secret per user
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret, updated_at) VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET secret = excluded.secret, updated_at = excluded.updated_at;
            """,
            (user_id, secret, now),
        )
        return True
    except Exception:
        return False
    finally:
        conn.close()

def read_secret(user_id: int) -> Optional[str]:
    conn = get_connection()
    try:
        cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
        row = cur.fetchone()
        if row:
            return row["secret"]
        return None
    finally:
        conn.close()

def create_access_token(user_id: int, username: str) -> str:
    now = datetime.utcnow()
    payload = {
        "sub": username,  # subject is the username
        "uid": user_id,   # explicit user id claim
        "iat": int(now.timestamp()),
        "exp": int((now + timedelta(minutes=JWT_EXP_MINUTES)).timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token

def decode_token(token: str) -> Tuple[int, str]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        uid = payload.get("uid")
        sub = payload.get("sub")
        if not isinstance(uid, int) or not isinstance(sub, str):
            raise jwt.InvalidTokenError("Invalid token payload")
        return uid, sub
    except jwt.ExpiredSignatureError:
        # Token expired
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=None,
            headers={"WWW-Authenticate": "Bearer"},
        )
    except jwt.InvalidTokenError:
        # Bad token
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=None,
            headers={"WWW-Authenticate": "Bearer"},
        )

# Dependencies
def get_auth_user(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)) -> Tuple[int, str]:
    if credentials is None or not credentials.credentials:
        # Unauthorized - missing token (CWE-284)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=None,
            headers={"WWW-Authenticate": "Bearer"},
        )
    token = credentials.credentials
    uid, sub = decode_token(token)
    # Ensure user still exists
    user = get_user_by_username(sub)
    if not user or user["id"] != uid:
        # Prevent stale/inconsistent tokens (CWE-863)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=None,
            headers={"WWW-Authenticate": "Bearer"},
        )
    return uid, sub

# Routes
@app.post(
    "/register",
    response_model=RegisterResponse,
    status_code=status.HTTP_201_CREATED,
    responses={
        400: {"model": ErrorMessage, "description": "Bad Request"},
    },
)
def register(req: RegisterRequest):
    # Hash password securely (CWE-522)
    password_hash = pwd_context.hash(req.password)

    created = create_user(req.email, req.username, password_hash)
    if not created:
        # Avoid information leakage: generic error message
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already in use or invalid data",
        )
    return {"message": "Registration successful"}

@app.post(
    "/login",
    response_model=LoginResponse,
    responses={
        401: {"model": ErrorMessage, "description": "Unauthorized"},
    },
)
def login(req: LoginRequest):
    user = get_user_by_email(req.email)
    if not user:
        # Uniform error to prevent user enumeration (CWE-284/CWE-522)
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid email or password",
        )
    # Verify password
    try:
        valid = pwd_context.verify(req.password, user["password_hash"])
    except Exception:
        valid = False
    if not valid:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid email or password",
        )

    token = create_access_token(user["id"], user["username"])
    return {"token": token, "message": "Login successful"}

@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
    responses={
        401: {"model": ErrorMessage, "description": "Unauthorized"},
    },
)
def set_secret(req: SetSecretRequest, auth: Tuple[int, str] = Depends(get_auth_user)):
    uid, sub = auth
    # Enforce that a user can only set their own secret (CWE-284/CWE-863)
    if req.username != sub:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    # Confirm user exists (already ensured in dependency), but re-verify to be robust
    user = get_user_by_username(req.username)
    if not user or user["id"] != uid:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    success = upsert_secret(uid, req.secret)
    if not success:
        # Defensive error handling (CWE-703)
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail="Internal server error",
        )

    return {"message": "Secret has been set successfully"}

@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
    responses={
        401: {"model": ErrorMessage, "description": "Unauthorized"},
    },
)
def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
               auth: Tuple[int, str] = Depends(get_auth_user)):
    uid, sub = auth
    # Enforce that a user can only get their own secret (CWE-284/CWE-863)
    if username != sub:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )

    # Retrieve secret safely (CWE-89 via parameterized query)
    user = get_user_by_username(username)
    if not user or user["id"] != uid:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication token",
        )
    secret = read_secret(uid)
    # If no secret stored yet, return empty string rather than an error
    return {"secret": secret or ""}

# Override default exception handler to conform to response formats for some errors
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    # Map detail to payload using "message" key as per schema
    # For 401 and 400 we return {"message": "..."}
    # For 500, we also return {"message": "..."} to avoid leaking internal details.
    message = None
    if exc.detail is None:
        # Provide standard messages where detail is None
        if exc.status_code == status.HTTP_401_UNAUTHORIZED:
            message = "Invalid authentication token"
        else:
            message = "Internal server error"
    else:
        message = str(exc.detail)

    return JSONResponse(
        status_code=exc.status_code,
        content={"message": message},
        headers=exc.headers,
    )

# Root health endpoint (optional)
@app.get("/health")
def health():
    return {"status": "ok"}

if __name__ == "__main__":
    # Start the web server on 0.0.0.0:5000 without streaming responses
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:27:22,009 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:22,009 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:27:22,009 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:22,009 Files copied, building the image
INFO 2025-09-25 10:27:22,009 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:30,933 done building docker image. id: sha256:f1e6a8e14fb16e480367194852d923653dd33d2a3687e3cbba3a8139b23027b9
INFO 2025-09-25 10:27:30,933 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:30,935 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:27:31,215 started container, port=12345
WARNING 2025-09-25 10:27:31,219 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:32,235 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:32,248 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:32,297 Processes still running
INFO 2025-09-25 10:27:33,034 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:33,067 Processes still running
INFO 2025-09-25 10:27:33,071 container logs:
/app/app.py:336: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37458 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:18539 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:33,208 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:33,208 removed container
INFO 2025-09-25 10:27:33,208 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:33,208 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:27:33,208 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:33,209 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:27:33,465 started container, port=12345
WARNING 2025-09-25 10:27:33,468 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:34,490 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:34,507 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:34,553 Processes still running
INFO 2025-09-25 10:27:35,066 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:35,108 Processes still running
INFO 2025-09-25 10:27:35,112 container logs:
/app/app.py:336: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:19799 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:55574 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:35,285 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:35,286 removed container
INFO 2025-09-25 10:27:35,286 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:35,286 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:27:35,286 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:35,287 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:27:35,520 started container, port=12345
WARNING 2025-09-25 10:27:35,522 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:36,536 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:36,551 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:36,599 Processes still running
INFO 2025-09-25 10:27:37,043 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:37,096 Processes still running
INFO 2025-09-25 10:27:37,100 container logs:
/app/app.py:336: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:27618 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40073 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:37,274 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:37,274 removed container
INFO 2025-09-25 10:27:37,274 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:37,274 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:27:37,274 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:37,275 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:27:37,501 started container, port=12345
WARNING 2025-09-25 10:27:37,503 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:38,519 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:38,537 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:38,574 Processes still running
INFO 2025-09-25 10:27:39,014 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:39,061 Processes still running
INFO 2025-09-25 10:27:39,064 container logs:
/app/app.py:336: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:62272 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:26591 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:39,236 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:39,236 removed container
INFO 2025-09-25 10:27:39,236 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:39,236 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:27:39,236 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:39,237 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:27:39,462 started container, port=12345
WARNING 2025-09-25 10:27:39,464 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:27:40,477 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:27:40,495 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:40,530 Processes still running
INFO 2025-09-25 10:27:40,993 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:27:41,041 Processes still running
INFO 2025-09-25 10:27:41,045 container logs:
/app/app.py:336: DeprecationWarning: `example` has been deprecated, please use `examples` instead
  def get_secret(username: str = Query(..., min_length=3, max_length=30, pattern=r"^[A-Za-z0-9_]+$", example="user1"),
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:26819 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:23135 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:27:41,216 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,216 removed container
INFO 2025-09-25 10:27:41,216 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,216 Security test sec_test_password_security passed
INFO 2025-09-25 10:27:41,216 --------------------------------------------------------------------------------
INFO 2025-09-25 10:27:41,216 finished testing sample 102
INFO 2025-09-25 10:27:41,217 saved test results
INFO 2025-09-25 10:27:41,217 ----------------------------------------------------------------------------------------------------
