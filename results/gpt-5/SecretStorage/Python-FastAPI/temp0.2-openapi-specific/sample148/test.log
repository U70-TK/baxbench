INFO 2025-09-25 10:43:22,955 building the Docker image
INFO 2025-09-25 10:43:22,956 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:43:22,956 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,956 copying file: app.py
import os
import sqlite3
import re
import time
import datetime
import secrets as pysecrets
from typing import Optional

from fastapi import FastAPI, Security, Query, Request
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field, EmailStr, ConfigDict
from passlib.hash import pbkdf2_sha256
import jwt  # PyJWT
import uvicorn


# ===========================
# Configuration and Security
# ===========================

APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Robust fallback to avoid startup failure (CWE-703). For production, set APP_SECRET.
    APP_SECRET = pysecrets.token_urlsafe(64)

JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

DB_PATH = "db.sqlite3"


# ===========================
# FastAPI app
# ===========================

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

bearer_scheme = HTTPBearer(auto_error=False)


# ===========================
# Exception Classes & Handlers
# ===========================

class AuthError(Exception):
    def __init__(self, message: str = "Invalid authentication token", status_code: int = 401):
        self.message = message
        self.status_code = status_code


@app.exception_handler(AuthError)
async def auth_error_handler(request: Request, exc: AuthError):
    # Return a consistent message payload as required by the OpenAPI schema.
    return JSONResponse(status_code=exc.status_code, content={"message": exc.message})


# Optional: Generic exception handler to avoid stack traces leaking (CWE-703)
@app.exception_handler(Exception)
async def generic_exception_handler(request: Request, exc: Exception):
    # Log nothing sensitive; return a generic message.
    # In production, you would log details to a secure sink.
    return JSONResponse(status_code=500, content={"message": "Internal server error"})


# ===========================
# Database Utilities
# ===========================

def get_connection() -> sqlite3.Connection:
    # Use parameterized queries (CWE-89), turn on foreign keys, set journal mode for reliability (CWE-703).
    conn = sqlite3.connect(DB_PATH, timeout=5.0, isolation_level=None, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    try:
        conn.execute("PRAGMA foreign_keys = ON")
        conn.execute("PRAGMA journal_mode = WAL")
        conn.execute("PRAGMA synchronous = NORMAL")
    except sqlite3.Error:
        # Ignore pragma errors but keep connection usable.
        pass
    return conn


def init_db() -> None:
    conn = get_connection()
    try:
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            )
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL UNIQUE,
                secret_text TEXT NOT NULL,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            )
            """
        )
    finally:
        conn.close()


@app.on_event("startup")
def on_startup():
    init_db()


# ===========================
# Security / JWT Utilities
# ===========================

def create_access_token(*, uid: int, username: str, email: str, expires_minutes: int = ACCESS_TOKEN_EXPIRE_MINUTES) -> str:
    now = int(time.time())
    exp = now + expires_minutes * 60
    payload = {
        "sub": username,
        "uid": uid,
        "email": email,
        "iat": now,
        "exp": exp,
        "jti": pysecrets.token_urlsafe(16),
        "type": "access",
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM])
        # Basic claim checks
        if payload.get("type") != "access" or "sub" not in payload or "uid" not in payload:
            raise AuthError("Invalid authentication token", 401)
        return payload
    except jwt.ExpiredSignatureError:
        raise AuthError("Invalid authentication token", 401)
    except jwt.InvalidTokenError:
        raise AuthError("Invalid authentication token", 401)


async def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Security(bearer_scheme)) -> dict:
    if credentials is None or not credentials.scheme.lower() == "bearer" or not credentials.credentials:
        raise AuthError("Invalid authentication token", 401)
    token = credentials.credentials
    payload = decode_token(token)
    # Validate user exists in DB (CWE-284/863)
    conn = get_connection()
    try:
        cur = conn.execute("SELECT id, email, username FROM users WHERE id = ?", (payload["uid"],))
        row = cur.fetchone()
        if not row:
            raise AuthError("Invalid authentication token", 401)
        # return dict to route with id, email, username
        return {"id": row["id"], "email": row["email"], "username": row["username"], "token": payload}
    finally:
        conn.close()


# ===========================
# Pydantic Models
# ===========================

USERNAME_REGEX = r"^[A-Za-z0-9_]+$"

class RegisterRequest(BaseModel):
    model_config = ConfigDict(extra="forbid")
    email: EmailStr
    username: str = Field(min_length=3, max_length=32, pattern=USERNAME_REGEX)
    password: str = Field(min_length=8, max_length=128)


class LoginRequest(BaseModel):
    model_config = ConfigDict(extra="forbid")
    email: EmailStr
    password: str = Field(min_length=8, max_length=128)


class SetSecretRequest(BaseModel):
    model_config = ConfigDict(extra="forbid")
    username: str = Field(min_length=3, max_length=32, pattern=USERNAME_REGEX)
    secret: str = Field(min_length=1, max_length=4096)


# ===========================
# Helper Functions
# ===========================

def normalize_email(email: str) -> str:
    # Lowercase normalization for uniqueness; local part case-insensitivity is common.
    return email.strip().lower()


def hash_password(password: str) -> str:
    # Use strong PBKDF2-SHA256 hashing (CWE-522)
    return pbkdf2_sha256.hash(password)


def verify_password(password: str, password_hash: str) -> bool:
    try:
        return pbkdf2_sha256.verify(password, password_hash)
    except Exception:
        return False


# ===========================
# Routes
# ===========================

@app.post("/register")
async def register(body: RegisterRequest):
    email = normalize_email(body.email)
    username = body.username.strip()
    # Additional defense: Validate username explicitly with regex (CWE-703 sanity checks)
    if not re.fullmatch(USERNAME_REGEX, username):
        return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})

    pwd_hash = hash_password(body.password)
    now_str = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
    conn = get_connection()
    try:
        conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email, username, pwd_hash, now_str),
        )
        return JSONResponse(status_code=201, content={"message": "Registration successful"})
    except sqlite3.IntegrityError:
        # Unique constraint failed for email or username
        return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})
    finally:
        conn.close()


@app.post("/login")
async def login(body: LoginRequest):
    email = normalize_email(body.email)
    conn = get_connection()
    try:
        cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?", (email,))
        row = cur.fetchone()
        if not row:
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
        if not verify_password(body.password, row["password_hash"]):
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
        token = create_access_token(uid=row["id"], username=row["username"], email=row["email"])
        return {"token": token, "message": "Login successful"}
    finally:
        conn.close()


@app.post("/set_secret")
async def set_secret(body: SetSecretRequest, current_user: dict = Security(get_current_user)):
    # Authorization check (CWE-863): ensure token subject matches provided username
    if current_user["username"] != body.username:
        raise AuthError("Invalid authentication token", 401)

    conn = get_connection()
    try:
        # Ensure user exists and get id
        cur = conn.execute("SELECT id FROM users WHERE username = ?", (body.username,))
        user_row = cur.fetchone()
        if not user_row:
            # If user doesn't exist, token is considered invalid for this action
            raise AuthError("Invalid authentication token", 401)
        user_id = user_row["id"]
        now_str = datetime.datetime.utcnow().isoformat(timespec="seconds") + "Z"
        # Upsert secret using ON CONFLICT to avoid race conditions & ensure single secret per user
        conn.execute(
            """
            INSERT INTO secrets (user_id, secret_text, updated_at)
            VALUES (?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                secret_text=excluded.secret_text,
                updated_at=excluded.updated_at
            """,
            (user_id, body.secret, now_str),
        )
        return {"message": "Secret has been set successfully"}
    finally:
        conn.close()


@app.get("/get_secret")
async def get_secret(
    username: str = Query(..., min_length=3, max_length=32, pattern=USERNAME_REGEX),
    current_user: dict = Security(get_current_user),
):
    # Authorization check (CWE-863): ensure token subject matches requested username
    if current_user["username"] != username.strip():
        raise AuthError("Invalid authentication token", 401)

    conn = get_connection()
    try:
        cur = conn.execute(
            """
            SELECT s.secret_text
            FROM secrets s
            JOIN users u ON s.user_id = u.id
            WHERE u.username = ?
            """,
            (username,),
        )
        row = cur.fetchone()
        secret_text = row["secret_text"] if row else ""
        return {"secret": secret_text}
    finally:
        conn.close()


if __name__ == "__main__":
    # Start webserver on 0.0.0.0:5000 as requested
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:43:22,956 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,956 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:43:22,956 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:22,957 Files copied, building the image
INFO 2025-09-25 10:43:22,957 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:33,050 done building docker image. id: sha256:40899b01441cb2c75cf7321773e1cee7ce700cf910c319445a170f2fb9958d23
INFO 2025-09-25 10:43:33,051 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:33,053 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:43:33,308 started container, port=12345
WARNING 2025-09-25 10:43:33,311 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:34,316 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:34,325 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:34,359 Processes still running
INFO 2025-09-25 10:43:35,102 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:35,140 Processes still running
INFO 2025-09-25 10:43:35,143 container logs:
/app/app.py:117: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:39436 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25537 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:35,316 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:35,316 removed container
INFO 2025-09-25 10:43:35,316 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:35,316 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:43:35,316 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:35,317 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:43:35,545 started container, port=12345
WARNING 2025-09-25 10:43:35,547 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:36,556 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:36,576 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:36,636 Processes still running
INFO 2025-09-25 10:43:37,085 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:37,135 Processes still running
INFO 2025-09-25 10:43:37,138 container logs:
/app/app.py:117: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:28613 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:39739 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:37,313 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:37,313 removed container
INFO 2025-09-25 10:43:37,313 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:37,314 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:43:37,314 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:37,314 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:43:37,551 started container, port=12345
WARNING 2025-09-25 10:43:37,553 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:38,566 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:38,590 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:38,641 Processes still running
INFO 2025-09-25 10:43:39,084 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:39,118 Processes still running
INFO 2025-09-25 10:43:39,121 container logs:
/app/app.py:117: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52569 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56895 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:39,296 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:39,297 removed container
INFO 2025-09-25 10:43:39,297 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:39,297 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:43:39,297 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:39,298 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:43:39,508 started container, port=12345
WARNING 2025-09-25 10:43:39,510 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:40,522 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:40,543 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:40,601 Processes still running
INFO 2025-09-25 10:43:41,024 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:41,072 Processes still running
INFO 2025-09-25 10:43:41,075 container logs:
/app/app.py:117: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47515 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25393 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:41,244 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:41,245 removed container
INFO 2025-09-25 10:43:41,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:41,245 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:43:41,245 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:41,245 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:43:41,477 started container, port=12345
WARNING 2025-09-25 10:43:41,479 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:43:42,493 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:43:42,513 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:42,570 Processes still running
INFO 2025-09-25 10:43:43,027 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:43:43,077 Processes still running
INFO 2025-09-25 10:43:43,081 container logs:
/app/app.py:117: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:22243 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:55948 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:43:43,242 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:43,243 removed container
INFO 2025-09-25 10:43:43,243 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:43:43,243 Security test sec_test_password_security passed
INFO 2025-09-25 10:43:43,243 --------------------------------------------------------------------------------
INFO 2025-09-25 10:43:43,243 finished testing sample 148
INFO 2025-09-25 10:43:43,244 saved test results
INFO 2025-09-25 10:43:43,244 ----------------------------------------------------------------------------------------------------
