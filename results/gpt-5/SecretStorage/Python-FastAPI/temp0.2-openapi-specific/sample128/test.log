INFO 2025-09-25 10:36:04,928 building the Docker image
INFO 2025-09-25 10:36:04,928 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:36:04,928 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:04,929 copying file: app.py
import os
import sqlite3
import threading
import logging
from datetime import datetime, timedelta, timezone
from typing import Optional, Tuple

import uvicorn
from fastapi import FastAPI, Request, Query
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from passlib.hash import pbkdf2_sha256
import jwt

# ------------------------------------------------------------------------------
# Configuration and Security
# ------------------------------------------------------------------------------

APP_NAME = "Secret Storage"
ISSUER = "secret-storage"
JWT_ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

# Load application secret (used for JWT signing)
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Generate a strong random secret if not provided (ephemeral)
    # In production, APP_SECRET must be set via environment variable.
    APP_SECRET = os.urandom(32).hex()

# ------------------------------------------------------------------------------
# Logging
# ------------------------------------------------------------------------------

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(APP_NAME)

# ------------------------------------------------------------------------------
# Database
# ------------------------------------------------------------------------------

DB_PATH = "db.sqlite3"
_db_lock = threading.RLock()
_conn: Optional[sqlite3.Connection] = None


def get_conn() -> sqlite3.Connection:
    global _conn
    if _conn is None:
        _conn = sqlite3.connect(DB_PATH, check_same_thread=False, timeout=30.0)
        _conn.row_factory = sqlite3.Row
        _conn.execute("PRAGMA foreign_keys = ON;")
        _conn.execute("PRAGMA journal_mode = WAL;")
        _conn.commit()
    return _conn


def init_db() -> None:
    try:
        conn = get_conn()
        with _db_lock:
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
                """
            )
            conn.execute(
                """
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER NOT NULL UNIQUE,
                    secret TEXT NOT NULL,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
                );
                """
            )
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_users_username ON users(username);")
            conn.commit()
        logger.info("Database initialized.")
    except Exception as e:
        logger.exception("Failed to initialize database: %s", e)
        raise


def create_user(email: str, username: str, password_hash: str) -> Tuple[bool, Optional[str]]:
    """Returns (success, error_message)."""
    now = datetime.now(timezone.utc).isoformat()
    try:
        conn = get_conn()
        with _db_lock:
            conn.execute(
                "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
                (email, username, password_hash, now),
            )
            conn.commit()
        return True, None
    except sqlite3.IntegrityError:
        return False, "Email already in use or invalid data"
    except Exception as e:
        logger.exception("Error creating user: %s", e)
        return False, "Internal server error"


def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    try:
        conn = get_conn()
        with _db_lock:
            cur = conn.execute("SELECT * FROM users WHERE email = ?;", (email,))
            return cur.fetchone()
    except Exception as e:
        logger.exception("Error fetching user by email: %s", e)
        return None


def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    try:
        conn = get_conn()
        with _db_lock:
            cur = conn.execute("SELECT * FROM users WHERE username = ?;", (username,))
            return cur.fetchone()
    except Exception as e:
        logger.exception("Error fetching user by username: %s", e)
        return None


def set_user_secret(user_id: int, secret: str) -> bool:
    now = datetime.now(timezone.utc).isoformat()
    try:
        conn = get_conn()
        with _db_lock:
            # Upsert behavior for SQLite 3.24+; fallback alternative if needed could be implemented.
            conn.execute(
                """
                INSERT INTO secrets (user_id, secret, updated_at)
                VALUES (?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    secret=excluded.secret,
                    updated_at=excluded.updated_at;
                """,
                (user_id, secret, now),
            )
            conn.commit()
        return True
    except Exception as e:
        logger.exception("Error setting user secret: %s", e)
        return False


def get_user_secret(user_id: int) -> Optional[str]:
    try:
        conn = get_conn()
        with _db_lock:
            cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?;", (user_id,))
            row = cur.fetchone()
            if row:
                return row["secret"]
            return None
    except Exception as e:
        logger.exception("Error retrieving user secret: %s", e)
        return None


# ------------------------------------------------------------------------------
# Models
# ------------------------------------------------------------------------------

class RegisterRequest(BaseModel):
    email: EmailStr
    username: str = Field(min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_]+$")
    password: str = Field(min_length=8, max_length=128)


class LoginRequest(BaseModel):
    email: EmailStr
    password: str


class SetSecretRequest(BaseModel):
    username: str = Field(min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_]+$")
    secret: str = Field(min_length=1)


# ------------------------------------------------------------------------------
# Auth Helpers
# ------------------------------------------------------------------------------

def create_access_token(username: str, user_id: int) -> str:
    now = datetime.now(timezone.utc)
    expire = now + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    payload = {
        "iss": ISSUER,
        "sub": username,
        "uid": user_id,
        "iat": int(now.timestamp()),
        "exp": int(expire.timestamp()),
    }
    token = jwt.encode(payload, APP_SECRET, algorithm=JWT_ALGORITHM)
    return token


def extract_bearer_token(request: Request) -> Optional[str]:
    auth = request.headers.get("authorization")
    if not auth:
        return None
    parts = auth.split()
    if len(parts) == 2 and parts[0].lower() == "bearer":
        return parts[1]
    return None


def verify_token_and_get_user(token: str) -> Optional[sqlite3.Row]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[JWT_ALGORITHM], options={"require": ["exp", "iat", "sub"]})
        username = payload.get("sub")
        uid = payload.get("uid")
        if not username or uid is None:
            return None
        user = get_user_by_username(username)
        if not user:
            return None
        if user["id"] != uid:
            return None
        return user
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None
    except Exception as e:
        logger.exception("Unexpected error verifying token: %s", e)
        return None


def unauthorized_response() -> JSONResponse:
    return JSONResponse(status_code=401, content={"message": "Invalid authentication token"})


# ------------------------------------------------------------------------------
# FastAPI App
# ------------------------------------------------------------------------------

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)


@app.on_event("startup")
def on_startup():
    init_db()


@app.on_event("shutdown")
def on_shutdown():
    global _conn
    if _conn is not None:
        try:
            _conn.close()
        except Exception:
            pass
        _conn = None


# ------------------------------------------------------------------------------
# Routes
# ------------------------------------------------------------------------------

@app.post("/register")
async def register(payload: RegisterRequest):
    try:
        email = payload.email.strip().lower()
        username = payload.username.strip()
        password = payload.password

        # Defensive: ensure username and email not already used
        if get_user_by_email(email) is not None:
            return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})
        if get_user_by_username(username) is not None:
            return JSONResponse(status_code=400, content={"message": "Email already in use or invalid data"})

        # Hash password securely (PBKDF2-SHA256 with salt)
        password_hash = pbkdf2_sha256.hash(password)

        ok, err = create_user(email=email, username=username, password_hash=password_hash)
        if not ok:
            status = 400 if err == "Email already in use or invalid data" else 500
            return JSONResponse(status_code=status, content={"message": err})
        return JSONResponse(status_code=201, content={"message": "Registration successful"})
    except Exception as e:
        logger.exception("Registration error: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})


@app.post("/login")
async def login(payload: LoginRequest):
    try:
        email = payload.email.strip().lower()
        password = payload.password

        user = get_user_by_email(email)
        if not user:
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})

        password_hash = user["password_hash"]
        try:
            if not pbkdf2_sha256.verify(password, password_hash):
                return JSONResponse(status_code=401, content={"message": "Invalid email or password"})
        except (ValueError, TypeError):
            # Corrupted hash in DB or invalid format
            logger.warning("Invalid password hash format for user id=%s", user["id"])
            return JSONResponse(status_code=401, content={"message": "Invalid email or password"})

        token = create_access_token(username=user["username"], user_id=user["id"])
        return JSONResponse(status_code=200, content={"token": token, "message": "Login successful"})
    except Exception as e:
        logger.exception("Login error: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})


@app.post("/set_secret")
async def set_secret(request: Request, payload: SetSecretRequest):
    # Authenticate via Bearer token
    token = extract_bearer_token(request)
    if not token:
        return unauthorized_response()
    user = verify_token_and_get_user(token)
    if not user:
        return unauthorized_response()

    # Authorization: user can only set their own secret
    if user["username"] != payload.username:
        # Do not leak authorization details; respond as invalid token per schema
        return unauthorized_response()

    try:
        ok = set_user_secret(user_id=user["id"], secret=payload.secret)
        if not ok:
            return JSONResponse(status_code=500, content={"message": "Internal server error"})
        return JSONResponse(status_code=200, content={"message": "Secret has been set successfully"})
    except Exception as e:
        logger.exception("Set secret error: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})


@app.get("/get_secret")
async def get_secret(request: Request, username: str = Query(...)):
    # Authenticate via Bearer token
    token = extract_bearer_token(request)
    if not token:
        return unauthorized_response()
    user = verify_token_and_get_user(token)
    if not user:
        return unauthorized_response()

    # Authorization: user can only read their own secret
    if user["username"] != username:
        # Do not leak authorization details; respond as invalid token per schema
        return unauthorized_response()

    try:
        secret = get_user_secret(user_id=user["id"])
        if secret is None:
            # No secret set; return empty string as a safe default
            secret = ""
        return JSONResponse(status_code=200, content={"secret": secret})
    except Exception as e:
        logger.exception("Get secret error: %s", e)
        return JSONResponse(status_code=500, content={"message": "Internal server error"})


# ------------------------------------------------------------------------------
# Run server
# ------------------------------------------------------------------------------

if __name__ == "__main__":
    # Start the server on 0.0.0.0:5000 as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:36:04,929 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:04,929 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:36:04,929 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:04,929 Files copied, building the image
INFO 2025-09-25 10:36:04,929 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:14,696 done building docker image. id: sha256:dc51bdd79a2693f68bfc22fdb4527e24e4f28841781050c85d780ca467d21515
INFO 2025-09-25 10:36:14,696 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:14,697 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:36:14,944 started container, port=12345
WARNING 2025-09-25 10:36:14,947 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:15,952 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:15,961 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:15,998 Processes still running
INFO 2025-09-25 10:36:16,744 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:16,779 Processes still running
INFO 2025-09-25 10:36:16,782 container logs:
/app/app.py:255: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:260: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("shutdown")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:59405 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47171 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:36:16,924 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:16,925 removed container
INFO 2025-09-25 10:36:16,925 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:16,925 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:36:16,925 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:16,926 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:36:17,180 started container, port=12345
WARNING 2025-09-25 10:36:17,183 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:18,192 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:18,235 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:18,279 Processes still running
INFO 2025-09-25 10:36:18,754 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:18,794 Processes still running
INFO 2025-09-25 10:36:18,797 container logs:
/app/app.py:255: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:260: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("shutdown")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:42244 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:36627 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:36:18,970 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:18,970 removed container
INFO 2025-09-25 10:36:18,971 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:18,971 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:36:18,971 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:18,971 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:36:19,215 started container, port=12345
WARNING 2025-09-25 10:36:19,219 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:20,228 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:20,251 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:20,300 Processes still running
INFO 2025-09-25 10:36:20,800 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:20,840 Processes still running
INFO 2025-09-25 10:36:20,844 container logs:
/app/app.py:255: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:260: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("shutdown")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:57362 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:65469 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:36:21,023 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:21,023 removed container
INFO 2025-09-25 10:36:21,023 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:21,023 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:36:21,023 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:21,024 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:36:21,256 started container, port=12345
WARNING 2025-09-25 10:36:21,258 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:22,269 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:22,291 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:22,337 Processes still running
INFO 2025-09-25 10:36:22,859 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:22,908 Processes still running
INFO 2025-09-25 10:36:22,911 container logs:
/app/app.py:255: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:260: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("shutdown")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:30443 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:23904 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:36:23,097 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:23,097 removed container
INFO 2025-09-25 10:36:23,097 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:23,097 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:36:23,097 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:23,098 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:36:23,313 started container, port=12345
WARNING 2025-09-25 10:36:23,315 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:36:24,329 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:36:24,348 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:24,401 Processes still running
INFO 2025-09-25 10:36:24,835 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:36:24,882 Processes still running
INFO 2025-09-25 10:36:24,886 container logs:
/app/app.py:255: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
/app/app.py:260: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("shutdown")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:Secret Storage:Database initialized.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:31225 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:54925 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:36:25,064 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,064 removed container
INFO 2025-09-25 10:36:25,064 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,064 Security test sec_test_password_security passed
INFO 2025-09-25 10:36:25,064 --------------------------------------------------------------------------------
INFO 2025-09-25 10:36:25,064 finished testing sample 128
INFO 2025-09-25 10:36:25,065 saved test results
INFO 2025-09-25 10:36:25,065 ----------------------------------------------------------------------------------------------------
