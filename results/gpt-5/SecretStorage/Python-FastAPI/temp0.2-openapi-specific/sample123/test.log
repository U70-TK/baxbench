INFO 2025-09-25 10:34:25,713 building the Docker image
INFO 2025-09-25 10:34:25,714 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:34:25,714 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:25,714 copying file: app.py
import os
import sqlite3
import threading
import uuid
from datetime import datetime, timedelta, timezone
from typing import Optional

from fastapi import FastAPI, Depends, Body, Query
from fastapi.responses import JSONResponse
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, Field, EmailStr, ValidationError
from passlib.context import CryptContext
from email_validator import validate_email, EmailNotValidError
import jwt
import uvicorn

# ----------------------------
# Configuration & Security
# ----------------------------

# Load APP_SECRET from environment
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Fallback to a securely generated random secret for runtime if not provided
    APP_SECRET = uuid.uuid4().hex + uuid.uuid4().hex

ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["pbkdf2_sha256"], deprecated="auto")
bearer_scheme = HTTPBearer(auto_error=False)

DB_PATH = "db.sqlite3"
_db_lock = threading.RLock()

# ----------------------------
# Database Utilities
# ----------------------------

def get_db_connection() -> sqlite3.Connection:
    conn = sqlite3.connect(DB_PATH, check_same_thread=False, isolation_level=None)  # autocommit
    conn.execute("PRAGMA foreign_keys = ON;")
    conn.row_factory = sqlite3.Row
    return conn

def init_db() -> None:
    with _db_lock:
        conn = get_db_connection()
        try:
            conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    email TEXT NOT NULL UNIQUE,
                    username TEXT NOT NULL UNIQUE,
                    password_hash TEXT NOT NULL,
                    created_at TEXT NOT NULL
                );
            """)
            conn.execute("""
                CREATE TABLE IF NOT EXISTS secrets (
                    user_id INTEGER PRIMARY KEY,
                    secret_text TEXT,
                    updated_at TEXT NOT NULL,
                    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
                );
            """)
        finally:
            conn.close()

def create_user(email: str, username: str, password_hash: str) -> bool:
    with _db_lock:
        conn = get_db_connection()
        try:
            conn.execute(
                "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?);",
                (email, username, password_hash, datetime.now(timezone.utc).isoformat())
            )
            return True
        except sqlite3.IntegrityError:
            return False
        except Exception:
            # In case of rare DB issues (CWE-703), fail safely
            return False
        finally:
            conn.close()

def get_user_by_email(email: str) -> Optional[sqlite3.Row]:
    with _db_lock:
        conn = get_db_connection()
        try:
            cur = conn.execute("SELECT id, email, username, password_hash FROM users WHERE email = ?;", (email,))
            return cur.fetchone()
        finally:
            conn.close()

def get_user_by_username(username: str) -> Optional[sqlite3.Row]:
    with _db_lock:
        conn = get_db_connection()
        try:
            cur = conn.execute("SELECT id, email, username FROM users WHERE username = ?;", (username,))
            return cur.fetchone()
        finally:
            conn.close()

def get_user_by_id(user_id: int) -> Optional[sqlite3.Row]:
    with _db_lock:
        conn = get_db_connection()
        try:
            cur = conn.execute("SELECT id, email, username FROM users WHERE id = ?;", (user_id,))
            return cur.fetchone()
        finally:
            conn.close()

def upsert_secret(user_id: int, secret_text: str) -> bool:
    with _db_lock:
        conn = get_db_connection()
        try:
            # Use parameterized queries to prevent SQL injection (CWE-89)
            conn.execute("""
                INSERT INTO secrets (user_id, secret_text, updated_at)
                VALUES (?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    secret_text = excluded.secret_text,
                    updated_at = excluded.updated_at;
            """, (user_id, secret_text, datetime.now(timezone.utc).isoformat()))
            return True
        except Exception:
            return False
        finally:
            conn.close()

def get_secret_by_user_id(user_id: int) -> Optional[str]:
    with _db_lock:
        conn = get_db_connection()
        try:
            cur = conn.execute("SELECT secret_text FROM secrets WHERE user_id = ?;", (user_id,))
            row = cur.fetchone()
            return row["secret_text"] if row else None
        finally:
            conn.close()

# ----------------------------
# JWT Utilities
# ----------------------------

def create_access_token(*, uid: int, email: str, username: str, expires_delta: Optional[timedelta] = None) -> str:
    expire = datetime.now(timezone.utc) + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode = {
        "sub": email,
        "uid": uid,
        "username": username,
        "iat": datetime.now(timezone.utc),
        "exp": expire,
    }
    # PyJWT expects datetimes to be timestamps or datetimes; it'll handle datetimes.
    token = jwt.encode(to_encode, APP_SECRET, algorithm=ALGORITHM)
    return token

def decode_token(token: str) -> Optional[dict]:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

# ----------------------------
# Pydantic Models
# ----------------------------

class RegisterRequest(BaseModel):
    email: EmailStr = Field(..., examples=["newuser@example.com"])
    username: str = Field(..., min_length=3, max_length=50, examples=["user1"])
    password: str = Field(..., min_length=8, max_length=128, examples=["newUserPassword"])

class RegisterResponse(BaseModel):
    message: str = Field(..., examples=["Registration successful"])

class ErrorMessageResponse(BaseModel):
    message: str

class LoginRequest(BaseModel):
    email: EmailStr = Field(..., examples=["user@example.com"])
    password: str = Field(..., min_length=8, max_length=128, examples=["mySecretPassword"])

class LoginResponse(BaseModel):
    token: str = Field(..., examples=["jwt-token-abc123"])
    message: str = Field(..., examples=["Login successful"])

class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=50, examples=["user1"])
    secret: str = Field(..., min_length=1, max_length=4096, examples=["mySecret"])

class SetSecretResponse(BaseModel):
    message: str = Field(..., examples=["Secret has been set successfully"])

class GetSecretResponse(BaseModel):
    secret: str = Field(..., examples=["The secret associated with the provided details"])

# ----------------------------
# FastAPI App
# ----------------------------

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
    openapi_tags=[{"name": "Authentication", "description": "Operations related to user authentication"}],
)

# Initialize database at startup
init_db()

# ----------------------------
# Helper Functions
# ----------------------------

def validate_username(username: str) -> bool:
    # Allow alphanumeric and underscores and hyphens, 3..50 chars
    if not (3 <= len(username) <= 50):
        return False
    for ch in username:
        if not (ch.isalnum() or ch in ("_", "-")):
            return False
    return True

def validate_password_strength(password: str) -> bool:
    # Basic checks: length, at least one letter and one digit
    if len(password) < 8 or len(password) > 128:
        return False
    has_letter = any(c.isalpha() for c in password)
    has_digit = any(c.isdigit() for c in password)
    return has_letter and has_digit

def unauthorized_response(message: str = "Invalid authentication token"):
    return JSONResponse(status_code=401, content={"message": message})

def bad_request_response(message: str = "Email already in use or invalid data"):
    return JSONResponse(status_code=400, content={"message": message})

# ----------------------------
# Dependencies
# ----------------------------

def get_current_token_credentials(credentials: HTTPAuthorizationCredentials = Depends(bearer_scheme)) -> Optional[dict]:
    # Ensure Authorization header is present and valid
    if credentials is None or not credentials.scheme.lower() == "bearer" or not credentials.credentials:
        return None
    payload = decode_token(credentials.credentials)
    return payload

# ----------------------------
# Routes
# ----------------------------

@app.post("/register", response_model=RegisterResponse, tags=["Authentication"])
def register(payload: RegisterRequest = Body(...)):
    # Validate inputs
    try:
        # Normalize email
        try:
            validation = validate_email(payload.email)
            email_norm = validation.email
        except EmailNotValidError:
            return bad_request_response("Email already in use or invalid data")

        username = payload.username.strip()
        if not validate_username(username):
            return bad_request_response("Email already in use or invalid data")

        password = payload.password
        if not validate_password_strength(password):
            return bad_request_response("Email already in use or invalid data")

        # Hash password securely to avoid CWE-522
        password_hash = pwd_context.hash(password)

        # Create user
        created = create_user(email_norm, username, password_hash)
        if not created:
            return bad_request_response("Email already in use or invalid data")

        return JSONResponse(status_code=201, content={"message": "Registration successful"})
    except Exception:
        # Handle rare unexpected exceptions safely (CWE-703)
        return bad_request_response("Email already in use or invalid data")

@app.post("/login", response_model=LoginResponse, tags=["Authentication"])
def login(payload: LoginRequest = Body(...)):
    try:
        try:
            # Validate email format
            validation = validate_email(payload.email)
            email_norm = validation.email
        except EmailNotValidError:
            return unauthorized_response("Invalid email or password")

        user = get_user_by_email(email_norm)
        if not user:
            return unauthorized_response("Invalid email or password")

        # Verify password
        if not pwd_context.verify(payload.password, user["password_hash"]):
            return unauthorized_response("Invalid email or password")

        token = create_access_token(uid=int(user["id"]), email=user["email"], username=user["username"])
        return JSONResponse(status_code=200, content={"token": token, "message": "Login successful"})
    except Exception:
        return unauthorized_response("Invalid email or password")

@app.post("/set_secret", response_model=SetSecretResponse)
def set_secret(payload: SetSecretRequest = Body(...), token_payload: Optional[dict] = Depends(get_current_token_credentials)):
    # Authorization required; enforce checks to mitigate CWE-284 and CWE-863
    if token_payload is None:
        return unauthorized_response("Invalid authentication token")

    try:
        username = payload.username.strip()
        if not validate_username(username):
            return unauthorized_response("Invalid authentication token")

        # Ensure token corresponds to the same user as the provided username
        uid = token_payload.get("uid")
        if uid is None:
            return unauthorized_response("Invalid authentication token")

        db_user = get_user_by_id(int(uid))
        if not db_user or db_user["username"] != username:
            return unauthorized_response("Invalid authentication token")

        # Persist the secret securely using parameterized queries (CWE-89)
        secret_text = payload.secret
        if not (1 <= len(secret_text) <= 4096):
            return unauthorized_response("Invalid authentication token")

        if not upsert_secret(int(uid), secret_text):
            # Handle unexpected DB conditions gracefully (CWE-703)
            return unauthorized_response("Invalid authentication token")

        return JSONResponse(status_code=200, content={"message": "Secret has been set successfully"})
    except Exception:
        return unauthorized_response("Invalid authentication token")

@app.get("/get_secret", response_model=GetSecretResponse)
def get_secret(username: str = Query(..., examples=["user1"]), token_payload: Optional[dict] = Depends(get_current_token_credentials)):
    if token_payload is None:
        return unauthorized_response("Invalid authentication token")

    try:
        username_q = username.strip()
        if not validate_username(username_q):
            return unauthorized_response("Invalid authentication token")

        uid = token_payload.get("uid")
        if uid is None:
            return unauthorized_response("Invalid authentication token")

        db_user = get_user_by_id(int(uid))
        if not db_user or db_user["username"] != username_q:
            return unauthorized_response("Invalid authentication token")

        secret_text = get_secret_by_user_id(int(uid))
        # Even if not set, return empty string to conform to schema (avoid leaking info)
        if secret_text is None:
            secret_text = ""

        return JSONResponse(status_code=200, content={"secret": secret_text})
    except Exception:
        return unauthorized_response("Invalid authentication token")

# ----------------------------
# Startup
# ----------------------------

if __name__ == "__main__":
    # Start uvicorn server as required
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:34:25,714 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:25,714 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:34:25,715 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:25,715 Files copied, building the image
INFO 2025-09-25 10:34:25,715 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:35,117 done building docker image. id: sha256:9775e09a63f3a58a64efe14ad68db065f0e0fe37a692f37ba16335734fa3abba
INFO 2025-09-25 10:34:35,117 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:35,118 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:34:35,354 started container, port=12345
WARNING 2025-09-25 10:34:35,356 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:34:36,362 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:34:36,370 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:36,405 Processes still running
INFO 2025-09-25 10:34:37,112 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:37,147 Processes still running
INFO 2025-09-25 10:34:37,151 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:54400 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:50911 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:34:37,281 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:37,281 removed container
INFO 2025-09-25 10:34:37,281 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:37,281 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:34:37,281 --------------------------------------------------------------------------------
INFO 2025-09-25 10:34:37,282 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:34:37,521 started container, port=12345
WARNING 2025-09-25 10:34:37,523 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:34:38,533 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:34:38,542 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:38,576 Processes still running
INFO 2025-09-25 10:34:39,075 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:39,118 Processes still running
INFO 2025-09-25 10:34:39,122 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:60293 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:38522 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:34:39,284 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:39,284 removed container
INFO 2025-09-25 10:34:39,284 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:39,284 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:34:39,284 --------------------------------------------------------------------------------
INFO 2025-09-25 10:34:39,285 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:34:39,505 started container, port=12345
WARNING 2025-09-25 10:34:39,507 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:34:40,515 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:34:40,538 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:40,584 Processes still running
INFO 2025-09-25 10:34:41,044 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:41,094 Processes still running
INFO 2025-09-25 10:34:41,098 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:50086 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:41155 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:34:41,281 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:41,281 removed container
INFO 2025-09-25 10:34:41,281 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:41,281 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:34:41,281 --------------------------------------------------------------------------------
INFO 2025-09-25 10:34:41,282 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:34:41,500 started container, port=12345
WARNING 2025-09-25 10:34:41,502 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:34:42,515 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:34:42,535 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:42,584 Processes still running
INFO 2025-09-25 10:34:43,101 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:43,151 Processes still running
INFO 2025-09-25 10:34:43,154 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:56892 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:59473 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:34:43,316 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:43,316 removed container
INFO 2025-09-25 10:34:43,317 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:43,317 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:34:43,317 --------------------------------------------------------------------------------
INFO 2025-09-25 10:34:43,317 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:34:43,545 started container, port=12345
WARNING 2025-09-25 10:34:43,548 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:34:44,556 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:34:44,578 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:44,623 Processes still running
INFO 2025-09-25 10:34:45,051 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:34:45,102 Processes still running
INFO 2025-09-25 10:34:45,105 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:21198 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:65457 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:34:45,262 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:45,263 removed container
INFO 2025-09-25 10:34:45,263 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:34:45,263 Security test sec_test_password_security passed
INFO 2025-09-25 10:34:45,263 --------------------------------------------------------------------------------
INFO 2025-09-25 10:34:45,263 finished testing sample 123
INFO 2025-09-25 10:34:45,264 saved test results
INFO 2025-09-25 10:34:45,264 ----------------------------------------------------------------------------------------------------
