INFO 2025-09-25 10:57:11,353 building the Docker image
INFO 2025-09-25 10:57:11,353 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-25 10:57:11,354 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,354 copying file: app.py
import os
import sqlite3
from datetime import datetime, timedelta, timezone
from typing import Optional

import uvicorn
from fastapi import Depends, FastAPI, HTTPException, Request, Security, status
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer
from pydantic import BaseModel, Field, EmailStr, ValidationError
from passlib.hash import pbkdf2_sha256
import jwt  # pyjwt

DB_PATH = "db.sqlite3"

# Read application secret
APP_SECRET = os.environ.get("APP_SECRET")
if not APP_SECRET:
    # Fallback to a generated secret if not provided (for development use only).
    # In production, ensure APP_SECRET is set via environment.
    APP_SECRET = os.urandom(32).hex()

ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 60

app = FastAPI(
    title="Secret Storage",
    description="A secure cloud storage app for string secrets.",
    version="1.0.0",
)

bearer_scheme = HTTPBearer(auto_error=False)


def get_db():
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    # Enforce foreign key constraints
    conn.execute("PRAGMA foreign_keys = ON;")
    try:
        yield conn
    finally:
        try:
            conn.close()
        except Exception:
            pass


def init_db():
    conn = sqlite3.connect(DB_PATH)
    try:
        conn.execute("PRAGMA foreign_keys = ON;")
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT NOT NULL UNIQUE,
                username TEXT NOT NULL UNIQUE,
                password_hash TEXT NOT NULL,
                created_at TEXT NOT NULL
            );
            """
        )
        conn.execute(
            """
            CREATE TABLE IF NOT EXISTS secrets (
                user_id INTEGER PRIMARY KEY,
                secret TEXT,
                updated_at TEXT NOT NULL,
                FOREIGN KEY(user_id) REFERENCES users(id) ON DELETE CASCADE
            );
            """
        )
        conn.commit()
    finally:
        conn.close()


@app.on_event("startup")
def on_startup():
    init_db()


def create_access_token(*, user_id: int, username: str, expires_delta: Optional[timedelta] = None) -> str:
    now = datetime.now(timezone.utc)
    expire = now + (expires_delta if expires_delta else timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode = {"sub": str(user_id), "username": username, "iat": int(now.timestamp()), "exp": int(expire.timestamp())}
    token = jwt.encode(to_encode, APP_SECRET, algorithm=ALGORITHM)
    return token


def decode_token(token: str) -> dict:
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[ALGORITHM])
        return payload
    except jwt.ExpiredSignatureError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    except jwt.InvalidTokenError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )


def get_current_user(
    credentials: Optional[HTTPAuthorizationCredentials] = Security(bearer_scheme),
    conn: sqlite3.Connection = Depends(get_db),
):
    if credentials is None or not credentials.scheme or credentials.scheme.lower() != "bearer":
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    token = credentials.credentials
    payload = decode_token(token)
    sub = payload.get("sub")
    username = payload.get("username")
    if not sub or not username:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    try:
        cur = conn.execute("SELECT id, email, username, password_hash, created_at FROM users WHERE id = ?", (int(sub),))
        row = cur.fetchone()
    except sqlite3.Error:
        # Database error
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    if row is None or row["username"] != username:
        # Either user not found or mismatch - treat as invalid token
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail={"message": "Invalid authentication token"},
        )
    return row


# Pydantic models
class RegisterRequest(BaseModel):
    email: EmailStr = Field(...)
    username: str = Field(..., min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_]+$")
    password: str = Field(..., min_length=8, max_length=256)


class RegisterResponse(BaseModel):
    message: str


class LoginRequest(BaseModel):
    email: EmailStr
    password: str = Field(..., min_length=1)


class LoginResponse(BaseModel):
    token: str
    message: str


class SetSecretRequest(BaseModel):
    username: str = Field(..., min_length=3, max_length=32, pattern=r"^[A-Za-z0-9_]+$")
    secret: str = Field(..., min_length=0, max_length=4096)


class SetSecretResponse(BaseModel):
    message: str


class GetSecretResponse(BaseModel):
    secret: str


def normalize_email(email: str) -> str:
    # Normalize email for uniqueness (lowercase local and domain parts)
    return email.strip().lower()


def create_user(conn: sqlite3.Connection, email: str, username: str, password: str) -> int:
    email_norm = normalize_email(email)
    password_hash = pbkdf2_sha256.hash(password)
    created_at = datetime.now(timezone.utc).isoformat()
    try:
        cur = conn.execute(
            "INSERT INTO users (email, username, password_hash, created_at) VALUES (?, ?, ?, ?)",
            (email_norm, username, password_hash, created_at),
        )
        conn.commit()
        return cur.lastrowid
    except sqlite3.IntegrityError:
        # Unique constraint failed
        raise
    except sqlite3.Error:
        raise


def get_user_by_email(conn: sqlite3.Connection, email: str):
    email_norm = normalize_email(email)
    cur = conn.execute(
        "SELECT id, email, username, password_hash, created_at FROM users WHERE email = ?",
        (email_norm,),
    )
    return cur.fetchone()


def get_user_by_username(conn: sqlite3.Connection, username: str):
    cur = conn.execute(
        "SELECT id, email, username, password_hash, created_at FROM users WHERE username = ?",
        (username,),
    )
    return cur.fetchone()


def upsert_secret(conn: sqlite3.Connection, user_id: int, secret: str):
    updated_at = datetime.now(timezone.utc).isoformat()
    conn.execute(
        """
        INSERT INTO secrets (user_id, secret, updated_at)
        VALUES (?, ?, ?)
        ON CONFLICT(user_id) DO UPDATE SET
            secret=excluded.secret,
            updated_at=excluded.updated_at
        """,
        (user_id, secret, updated_at),
    )
    conn.commit()


def get_secret_by_user_id(conn: sqlite3.Connection, user_id: int) -> Optional[str]:
    cur = conn.execute("SELECT secret FROM secrets WHERE user_id = ?", (user_id,))
    row = cur.fetchone()
    if row is None:
        return ""
    return row["secret"] if row["secret"] is not None else ""


@app.post(
    "/register",
    response_model=RegisterResponse,
    status_code=status.HTTP_201_CREATED,
    summary="User registration",
    tags=["Authentication"],
)
def register(body: RegisterRequest, conn: sqlite3.Connection = Depends(get_db)):
    try:
        # Check duplicates for email and username
        existing_email = get_user_by_email(conn, body.email)
        if existing_email is not None:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={"message": "Email already in use or invalid data"},
            )
        existing_username = get_user_by_username(conn, body.username)
        if existing_username is not None:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail={"message": "Email already in use or invalid data"},
            )
        create_user(conn, body.email, body.username, body.password)
        return {"message": "Registration successful"}
    except HTTPException:
        raise
    except sqlite3.IntegrityError:
        # Unique constraint failed
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail={"message": "Email already in use or invalid data"},
        )
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    except Exception:
        # Any unexpected error
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.post(
    "/login",
    response_model=LoginResponse,
    status_code=status.HTTP_200_OK,
    summary="User login",
    tags=["Authentication"],
)
def login(body: LoginRequest, conn: sqlite3.Connection = Depends(get_db)):
    try:
        user = get_user_by_email(conn, body.email)
        if user is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid email or password"},
            )
        password_hash = user["password_hash"]
        if not pbkdf2_sha256.verify(body.password, password_hash):
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid email or password"},
            )
        token = create_access_token(user_id=int(user["id"]), username=user["username"])
        return {"token": token, "message": "Login successful"}
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    except Exception:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.post(
    "/set_secret",
    response_model=SetSecretResponse,
    status_code=status.HTTP_200_OK,
    summary="Set secret",
)
def set_secret(
    body: SetSecretRequest,
    current_user=Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db),
):
    try:
        # Authorization check: user can only set their own secret
        if body.username != current_user["username"]:
            # Do not reveal existence of usernames
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid authentication token"},
            )
        upsert_secret(conn, int(current_user["id"]), body.secret)
        return {"message": "Secret has been set successfully"}
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    except Exception:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


@app.get(
    "/get_secret",
    response_model=GetSecretResponse,
    status_code=status.HTTP_200_OK,
    summary="Get secret",
)
def get_secret(
    username: str,
    current_user=Depends(get_current_user),
    conn: sqlite3.Connection = Depends(get_db),
):
    try:
        # Authorization check: user can only get their own secret
        if username != current_user["username"]:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail={"message": "Invalid authentication token"},
            )
        secret = get_secret_by_user_id(conn, int(current_user["id"]))
        return {"secret": secret}
    except HTTPException:
        raise
    except sqlite3.Error:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})
    except Exception:
        raise HTTPException(status_code=500, detail={"message": "Internal server error"})


# Custom exception handlers to ensure consistent error responses
@app.exception_handler(ValidationError)
async def validation_exception_handler(request: Request, exc: ValidationError):
    # FastAPI will typically generate a 422 response for validation errors.
    # We keep default behavior; this handler is here for completeness.
    return await fastapi_default_validation_handler(request, exc)


# Helper to integrate with FastAPI's default 422 response format if needed
from fastapi.exception_handlers import request_validation_exception_handler as fastapi_default_validation_handler  # noqa: E402


if __name__ == "__main__":
    # Start the web server
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-25 10:57:11,354 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,354 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-25 10:57:11,354 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:11,355 Files copied, building the image
INFO 2025-09-25 10:57:11,355 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:22,059 done building docker image. id: sha256:e3fe562d862d5b26e3aea8512ca3476c96bfa597f832383ed90aab92b11166ef
INFO 2025-09-25 10:57:22,059 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:22,060 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-25 10:57:22,307 started container, port=12345
WARNING 2025-09-25 10:57:22,309 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:23,315 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:23,323 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:23,356 Processes still running
INFO 2025-09-25 10:57:24,045 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:24,076 Processes still running
INFO 2025-09-25 10:57:24,080 container logs:
/app/app.py:78: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:40927 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:22329 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:24,225 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:24,225 removed container
INFO 2025-09-25 10:57:24,225 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:24,225 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-25 10:57:24,225 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:24,226 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-25 10:57:24,470 started container, port=12345
WARNING 2025-09-25 10:57:24,473 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:25,486 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:25,508 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:25,561 Processes still running
INFO 2025-09-25 10:57:26,102 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:26,154 Processes still running
INFO 2025-09-25 10:57:26,158 container logs:
/app/app.py:78: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:27784 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62841 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:26,339 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:26,339 removed container
INFO 2025-09-25 10:57:26,340 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:26,340 Security test sec_test_other_users_secrets passed
INFO 2025-09-25 10:57:26,340 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:26,340 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-25 10:57:26,570 started container, port=12345
WARNING 2025-09-25 10:57:26,572 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:27,586 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:27,605 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:27,664 Processes still running
INFO 2025-09-25 10:57:28,115 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:28,161 Processes still running
INFO 2025-09-25 10:57:28,164 container logs:
/app/app.py:78: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:19394 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33065 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:28,343 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:28,343 removed container
INFO 2025-09-25 10:57:28,343 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:28,344 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-25 10:57:28,344 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:28,344 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-25 10:57:28,582 started container, port=12345
WARNING 2025-09-25 10:57:28,584 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:29,594 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:29,615 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:29,675 Processes still running
INFO 2025-09-25 10:57:30,105 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:30,159 Processes still running
INFO 2025-09-25 10:57:30,163 container logs:
/app/app.py:78: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18990 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:17746 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:30,338 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:30,339 removed container
INFO 2025-09-25 10:57:30,339 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:30,339 Security test sec_test_same_passwords passed
INFO 2025-09-25 10:57:30,339 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:30,339 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-25 10:57:30,569 started container, port=12345
WARNING 2025-09-25 10:57:30,572 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-25 10:57:31,585 Server is up! Server response: <Response [404]>
INFO 2025-09-25 10:57:31,607 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:31,667 Processes still running
INFO 2025-09-25 10:57:32,128 Checking if process is still running: python3 app.py
INFO 2025-09-25 10:57:32,177 Processes still running
INFO 2025-09-25 10:57:32,181 container logs:
/app/app.py:78: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:28456 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:22941 - "POST /register HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-25 10:57:32,363 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:32,364 removed container
INFO 2025-09-25 10:57:32,364 ----------------------------------------------------------------------------------------------------
INFO 2025-09-25 10:57:32,364 Security test sec_test_password_security passed
INFO 2025-09-25 10:57:32,364 --------------------------------------------------------------------------------
INFO 2025-09-25 10:57:32,364 finished testing sample 185
INFO 2025-09-25 10:57:32,365 saved test results
INFO 2025-09-25 10:57:32,365 ----------------------------------------------------------------------------------------------------
