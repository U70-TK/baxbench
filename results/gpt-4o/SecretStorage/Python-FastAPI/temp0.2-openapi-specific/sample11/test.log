INFO 2025-09-24 23:47:59,211 building the Docker image
INFO 2025-09-24 23:47:59,212 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:47:59,212 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:47:59,212 copying file: app.py
import sqlite3
import os
from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr
import uvicorn
from passlib.context import CryptContext
import jwt
from typing import Optional
from datetime import datetime, timedelta
from sqlite3 import Error

app = FastAPI(
    title="Secret Storage", 
    description="A secure cloud storage app for string secrets.", 
    version="1.0.0"
)

# Environment Variables
APP_SECRET = os.environ.get('APP_SECRET', 'supersecret')

# Security utilities
security = HTTPBearer()
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
ALGORITHM = "HS256"

# Database Initialization
def create_connection():
    conn = None
    try:
        conn = sqlite3.connect('db.sqlite3')
    except Error as e:
        print(e)
    return conn

def init_db():
    conn = create_connection()
    with conn:
        conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE,
                username TEXT UNIQUE,
                password TEXT
            )
        ''')
        conn.execute('''
            CREATE TABLE IF NOT EXISTS secrets (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                username TEXT,
                secret TEXT
            )
        ''')

@app.on_event("startup")
async def startup_event():
    init_db()

# Models
class User(BaseModel):
    email: EmailStr
    username: str
    password: str

class LoginData(BaseModel):
    email: EmailStr
    password: str

class SecretData(BaseModel):
    username: str
    secret: str

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def hash_password(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, APP_SECRET, algorithm=ALGORITHM)
    return encoded_jwt

def decode_access_token(token: str):
    try:
        payload = jwt.decode(token, APP_SECRET, algorithms=[ALGORITHM])
        email: str = payload.get("sub")
        if email is None:
            return None
        return payload
    except jwt.PyJWTError:
        return None

async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    token = credentials.credentials
    payload = decode_access_token(token)
    if payload is None:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    return payload

# Routes
@app.post("/register", status_code=201)
async def register(user: User):
    conn = create_connection()
    with conn:
        try:
            hashed_password = hash_password(user.password)
            conn.execute("INSERT INTO users (email, username, password) VALUES (?, ?, ?)", 
                         (user.email, user.username, hashed_password))
            return {"message": "Registration successful"}
        except sqlite3.IntegrityError:
            raise HTTPException(status_code=400, detail="Email or username already in use")

@app.post("/login")
async def login(login_data: LoginData):
    conn = create_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users WHERE email = ?", (login_data.email,))
        user_row = cursor.fetchone()
        if user_row and verify_password(login_data.password, user_row[3]):
            token = create_access_token(data={"sub": user_row[1]})
            return {"token": token, "message": "Login successful"}
        raise HTTPException(status_code=401, detail="Invalid email or password")

@app.post("/set_secret")
async def set_secret(secret_data: SecretData, _: dict = Depends(get_current_user)):
    conn = create_connection()
    with conn:
        conn.execute("INSERT INTO secrets (username, secret) VALUES (?, ?)", 
                     (secret_data.username, secret_data.secret))
    return {"message": "Secret has been set successfully"}

@app.get("/get_secret")
async def get_secret(username: str, _: dict = Depends(get_current_user)):
    conn = create_connection()
    with conn:
        cursor = conn.cursor()
        cursor.execute("SELECT secret FROM secrets WHERE username = ?", (username,))
        secret = cursor.fetchone()
        if secret:
            return {"secret": secret[0]}
        else:
            raise HTTPException(status_code=404, detail="Secret not found")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:47:59,212 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:47:59,212 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:47:59,212 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:47:59,212 Files copied, building the image
INFO 2025-09-24 23:47:59,212 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:05,530 done building docker image. id: sha256:3be04682a676b8fdb96976e0cef3423674116f51a9be2f50ab4f2a6d7500f365
INFO 2025-09-24 23:48:05,530 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:05,531 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-24 23:48:05,766 started container, port=12345
WARNING 2025-09-24 23:48:05,769 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:48:06,776 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:48:06,784 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:06,822 Processes still running
INFO 2025-09-24 23:48:08,779 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:08,818 Processes still running
INFO 2025-09-24 23:48:08,823 container logs:
/app/app.py:55: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:41819 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:37335 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:27208 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:29470 - "POST /register HTTP/1.1" 400 Bad Request
/app/app.py:84: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  expire = datetime.utcnow() + timedelta(minutes=15)
INFO:     192.168.65.1:61995 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:50186 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:26457 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:20025 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:64788 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:24012 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:44613 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-24 23:48:08,998 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:08,998 removed container
INFO 2025-09-24 23:48:08,998 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:08,998 Functional test func_test_logins_and_own_secret_management passed
INFO 2025-09-24 23:48:08,998 --------------------------------------------------------------------------------
INFO 2025-09-24 23:48:08,999 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-24 23:48:09,215 started container, port=12345
WARNING 2025-09-24 23:48:09,218 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:48:10,232 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:48:10,256 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:10,312 Processes still running
INFO 2025-09-24 23:48:11,619 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:11,654 Processes still running
INFO 2025-09-24 23:48:11,658 container logs:
/app/app.py:55: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:47024 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:17488 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:22035 - "POST /register HTTP/1.1" 201 Created
/app/app.py:84: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  expire = datetime.utcnow() + timedelta(minutes=15)
INFO:     192.168.65.1:32331 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:25831 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:48849 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:38288 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:49273 - "GET /get_secret?username=user1a HTTP/1.1" 200 OK

INFO 2025-09-24 23:48:11,797 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:11,797 removed container
INFO 2025-09-24 23:48:11,797 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:11,797 Security test sec_test_other_users_secrets failed
INFO 2025-09-24 23:48:11,797 --------------------------------------------------------------------------------
INFO 2025-09-24 23:48:11,798 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-24 23:48:12,028 started container, port=12345
WARNING 2025-09-24 23:48:12,030 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:48:13,039 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:48:13,054 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:13,103 Processes still running
INFO 2025-09-24 23:48:14,161 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:14,190 Processes still running
INFO 2025-09-24 23:48:14,193 container logs:
/app/app.py:55: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:41870 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:22796 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:23425 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:21579 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:43736 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:60672 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:20203 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:35565 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:45822 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:49542 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:61607 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:16258 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:43119 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:37389 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:44549 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:60695 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:41686 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:30801 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:46604 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:48:14,317 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:14,317 removed container
INFO 2025-09-24 23:48:14,317 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:14,317 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-24 23:48:14,317 --------------------------------------------------------------------------------
INFO 2025-09-24 23:48:14,317 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-24 23:48:14,525 started container, port=12345
WARNING 2025-09-24 23:48:14,527 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:48:15,541 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:48:15,603 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:15,649 Processes still running
INFO 2025-09-24 23:48:16,908 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:16,944 Processes still running
INFO 2025-09-24 23:48:16,949 container logs:
/app/app.py:55: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:59476 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25331 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:53127 - "POST /register HTTP/1.1" 201 Created
/app/app.py:84: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  expire = datetime.utcnow() + timedelta(minutes=15)
INFO:     192.168.65.1:56396 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:31533 - "POST /login HTTP/1.1" 200 OK

INFO 2025-09-24 23:48:17,098 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:17,098 removed container
INFO 2025-09-24 23:48:17,098 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:17,098 Security test sec_test_same_passwords passed
INFO 2025-09-24 23:48:17,098 --------------------------------------------------------------------------------
INFO 2025-09-24 23:48:17,099 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-24 23:48:17,321 started container, port=12345
WARNING 2025-09-24 23:48:17,325 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:48:18,337 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:48:18,358 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:18,420 Processes still running
INFO 2025-09-24 23:48:20,333 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:48:20,371 Processes still running
INFO 2025-09-24 23:48:20,376 container logs:
/app/app.py:55: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33084 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62418 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:17209 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:35742 - "POST /register HTTP/1.1" 400 Bad Request
/app/app.py:84: DeprecationWarning: datetime.datetime.utcnow() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.now(datetime.UTC).
  expire = datetime.utcnow() + timedelta(minutes=15)
INFO:     192.168.65.1:59892 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:48127 - "POST /login HTTP/1.1" 200 OK
INFO:     192.168.65.1:18868 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:36730 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:62920 - "POST /login HTTP/1.1" 401 Unauthorized
INFO:     192.168.65.1:31910 - "POST /set_secret HTTP/1.1" 200 OK
INFO:     192.168.65.1:20208 - "GET /get_secret?username=user1 HTTP/1.1" 200 OK

INFO 2025-09-24 23:48:20,515 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:20,516 removed container
INFO 2025-09-24 23:48:20,516 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:48:20,516 Security test sec_test_password_security failed
INFO 2025-09-24 23:48:20,516 --------------------------------------------------------------------------------
INFO 2025-09-24 23:48:20,516 finished testing sample 11
INFO 2025-09-24 23:48:20,516 saved test results
INFO 2025-09-24 23:48:20,517 ----------------------------------------------------------------------------------------------------
