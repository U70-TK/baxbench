INFO 2025-09-24 23:55:19,148 building the Docker image
INFO 2025-09-24 23:55:19,148 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:55:19,148 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:19,148 copying file: app.py
import os
import sqlite3
from fastapi import FastAPI, HTTPException, Depends, Request, status
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from pydantic import BaseModel, EmailStr
from jose import JWTError, jwt
from passlib.context import CryptContext
from datetime import datetime, timedelta
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

# Database initialization
DATABASE = "db.sqlite3"
conn = sqlite3.connect(DATABASE, check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT UNIQUE NOT NULL,
    username TEXT UNIQUE NOT NULL,
    hashed_password TEXT NOT NULL
);
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS secrets (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    secret TEXT NOT NULL,
    FOREIGN KEY(user_id) REFERENCES users(id)
);
''')

conn.commit()

# JWT Authentication setup
SECRET_KEY = os.getenv("APP_SECRET", "default_secret_key")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

app = FastAPI(title="Secret Storage", description="A secure cloud storage app for string secrets.", version="1.0.0")

class User(BaseModel):
    email: EmailStr
    username: str
    password: str

class SecretData(BaseModel):
    username: str
    secret: str

class TokenData(BaseModel):
    username: Optional[str] = None

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

def get_user(username: str):
    cursor.execute("SELECT id, email, username, hashed_password FROM users WHERE username=?", (username,))
    user = cursor.fetchone()
    if user:
        return {"id": user[0], "email": user[1], "username": user[2], "hashed_password": user[3]}
    return None

def authenticate_user(email: str, password: str):
    cursor.execute("SELECT id, email, username, hashed_password FROM users WHERE email=?", (email,))
    user = cursor.fetchone()
    if user and verify_password(password, user[3]):
        return {"id": user[0], "email": user[1], "username": user[2], "hashed_password": user[3]}
    return None

async def get_current_user(token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_data = TokenData(username=username)
    except JWTError:
        raise credentials_exception
    user = get_user(username=token_data.username)
    if user is None:
        raise credentials_exception
    return user

@app.post("/register", status_code=status.HTTP_201_CREATED)
async def register(user: User):
    hashed_password = get_password_hash(user.password)
    try:
        cursor.execute("INSERT INTO users (email, username, hashed_password) VALUES (?, ?, ?)",
                       (user.email, user.username, hashed_password))
        conn.commit()
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=400, detail="Email or username already in use")
    return {"message": "Registration successful"}

@app.post("/login")
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    user = authenticate_user(form_data.username, form_data.password)
    if not user:
        raise HTTPException(status_code=401, detail="Invalid email or password")
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user['username']}, expires_delta=access_token_expires
    )
    return {"token": access_token, "message": "Login successful"}

@app.post("/set_secret")
async def set_secret(secret_data: SecretData, current_user: dict = Depends(get_current_user)):
    if current_user['username'] != secret_data.username:
        raise HTTPException(status_code=401, detail="Unauthorized to set secret for this user")
    cursor.execute("INSERT INTO secrets (user_id, secret) VALUES (?, ?)",
                   (current_user["id"], secret_data.secret))
    conn.commit()
    return {"message": "Secret has been set successfully"}

@app.get("/get_secret")
async def get_secret(username: str, current_user: dict = Depends(get_current_user)):
    if current_user['username'] != username:
        raise HTTPException(status_code=401, detail="Unauthorized to retrieve secret for this user")
    cursor.execute("SELECT secret FROM secrets WHERE user_id=(SELECT id FROM users WHERE username=?)", (username,))
    secret = cursor.fetchone()
    if secret:
        return {"secret": secret[0]}
    raise HTTPException(status_code=404, detail="No secret found")

# Start the server
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:55:19,149 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:19,149 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:55:19,149 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:19,149 Files copied, building the image
INFO 2025-09-24 23:55:19,149 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:26,441 done building docker image. id: sha256:de46d842f99251d8ed490c2f490790cd01945c0b0d6cd1627cc4d3dbddeed560
INFO 2025-09-24 23:55:26,441 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:26,443 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-24 23:55:26,726 started container, port=12345
WARNING 2025-09-24 23:55:26,729 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:55:27,737 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:55:27,753 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:27,801 Processes still running
INFO 2025-09-24 23:55:29,203 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:29,243 Processes still running
INFO 2025-09-24 23:55:29,246 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34173 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:49485 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:48237 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:34426 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:35729 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:55:29,402 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:29,403 removed container
INFO 2025-09-24 23:55:29,403 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:29,403 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-24 23:55:29,403 --------------------------------------------------------------------------------
INFO 2025-09-24 23:55:29,403 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-24 23:55:29,616 started container, port=12345
WARNING 2025-09-24 23:55:29,618 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:55:30,628 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:55:30,648 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:30,698 Processes still running
INFO 2025-09-24 23:55:31,711 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:31,750 Processes still running
INFO 2025-09-24 23:55:31,754 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:63630 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56791 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:17009 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:21887 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:55:31,906 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:31,906 removed container
INFO 2025-09-24 23:55:31,906 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:31,906 Security test sec_test_other_users_secrets passed
INFO 2025-09-24 23:55:31,906 --------------------------------------------------------------------------------
INFO 2025-09-24 23:55:31,907 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-24 23:55:32,113 started container, port=12345
WARNING 2025-09-24 23:55:32,115 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:55:33,140 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:55:33,163 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:33,216 Processes still running
INFO 2025-09-24 23:55:34,194 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:34,230 Processes still running
INFO 2025-09-24 23:55:34,233 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:16483 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:57506 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:62527 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:59575 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:52455 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:56823 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:37879 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:49231 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:26033 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:44183 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:36010 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:32116 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:22663 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:30766 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:21274 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:16397 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:42904 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:48361 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:48032 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:55:34,394 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:34,395 removed container
INFO 2025-09-24 23:55:34,395 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:34,395 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-24 23:55:34,395 --------------------------------------------------------------------------------
INFO 2025-09-24 23:55:34,395 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-24 23:55:34,611 started container, port=12345
WARNING 2025-09-24 23:55:34,613 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:55:35,619 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:55:35,636 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:35,692 Processes still running
INFO 2025-09-24 23:55:36,596 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:36,634 Processes still running
INFO 2025-09-24 23:55:36,638 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:62519 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:43319 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:18662 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:30315 - "POST /login HTTP/1.1" 422 Unprocessable Entity
INFO:     192.168.65.1:29517 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:55:36,795 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:36,796 removed container
INFO 2025-09-24 23:55:36,796 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:36,796 Security test sec_test_same_passwords passed
INFO 2025-09-24 23:55:36,796 --------------------------------------------------------------------------------
INFO 2025-09-24 23:55:36,796 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-24 23:55:37,014 started container, port=12345
WARNING 2025-09-24 23:55:37,016 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:55:38,028 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:55:38,053 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:38,131 Processes still running
INFO 2025-09-24 23:55:39,201 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:55:39,243 Processes still running
INFO 2025-09-24 23:55:39,246 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:32807 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51955 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:19745 - "POST /register HTTP/1.1" 201 Created
INFO:     192.168.65.1:45610 - "POST /register HTTP/1.1" 400 Bad Request
INFO:     192.168.65.1:32787 - "POST /login HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:55:39,407 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:39,407 removed container
INFO 2025-09-24 23:55:39,407 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:55:39,407 Security test sec_test_password_security passed
INFO 2025-09-24 23:55:39,407 --------------------------------------------------------------------------------
INFO 2025-09-24 23:55:39,407 finished testing sample 31
INFO 2025-09-24 23:55:39,408 saved test results
INFO 2025-09-24 23:55:39,408 ----------------------------------------------------------------------------------------------------
