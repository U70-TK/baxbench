INFO 2025-09-24 23:56:48,998 building the Docker image
INFO 2025-09-24 23:56:48,999 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:56:48,999 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:48,999 copying file: app.py
import os
import sqlite3
from fastapi import FastAPI, HTTPException, Depends, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr
from passlib.context import CryptContext
from jose import jwt
from datetime import datetime, timedelta

# Settings
DATABASE_URL = "db.sqlite3"
SECRET_KEY = os.getenv("APP_SECRET", "CHANGE_THIS_SECRET")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Application setup
app = FastAPI()

# Initialize password hashing
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

# Security scheme
security = HTTPBearer()

# Database setup
def init_db():
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE,
        username TEXT UNIQUE,
        hashed_password TEXT
    )''')
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS secrets (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        secret TEXT,
        FOREIGN KEY(user_id) REFERENCES users(id)
    )''')
    conn.commit()
    conn.close()

# Pydantic models
class UserRegister(BaseModel):
    email: EmailStr
    username: str
    password: str

class UserLogin(BaseModel):
    email: EmailStr
    password: str

class SecretModel(BaseModel):
    username: str
    secret: str

# Functions for security
def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)

def create_access_token(data: dict, expires_delta: timedelta = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=15)
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

def get_user(email: str):
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT id, email, username, hashed_password FROM users WHERE email=?", (email,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return {"id": row[0], "email": row[1], "username": row[2], "hashed_password": row[3]}
    return None

def get_user_by_username(username: str):
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE username=?", (username,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return row[0]
    return None

def store_secret(user_id: int, secret: str):
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO secrets (user_id, secret) VALUES (?, ?)", (user_id, secret))
    conn.commit()
    conn.close()

def retrieve_secret(user_id: int):
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("SELECT secret FROM secrets WHERE user_id=?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return row[0]
    return None

def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)):
    try:
        payload = jwt.decode(credentials.credentials, SECRET_KEY, algorithms=[ALGORITHM])
        email = payload.get("sub")
        if email is None:
            raise HTTPException(status_code=401, detail="Invalid authentication token")
        return get_user(email)
    except jwt.JWTError:
        raise HTTPException(status_code=401, detail="Invalid authentication token")

# API Endpoints
@app.post("/register", tags=["Authentication"])
async def register(user: UserRegister):
    # Check if user already exists
    if get_user(user.email):
        raise HTTPException(status_code=400, detail="Email already in use or invalid data")

    # Hash the password
    hashed_password = get_password_hash(user.password)

    # Insert into database
    conn = sqlite3.connect(DATABASE_URL)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO users (email, username, hashed_password) VALUES (?, ?, ?)", 
                   (user.email, user.username, hashed_password))
    conn.commit()
    conn.close()

    return {"message": "Registration successful"}

@app.post("/login", tags=["Authentication"])
async def login(user: UserLogin):
    db_user = get_user(user.email)
    if not db_user or not verify_password(user.password, db_user["hashed_password"]):
        raise HTTPException(status_code=401, detail="Invalid email or password")
    
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": db_user["email"]}, expires_delta=access_token_expires
    )
    return {"token": access_token, "message": "Login successful"}

@app.post("/set_secret", tags=["Secrets"])
async def set_secret(secret_data: SecretModel, current_user: dict = Depends(get_current_user)):
    user_id = get_user_by_username(secret_data.username)
    if user_id is None:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    store_secret(user_id, secret_data.secret)
    return {"message": "Secret has been set successfully"}

@app.get("/get_secret", tags=["Secrets"])
async def get_secret(username: str, current_user: dict = Depends(get_current_user)):
    user_id = get_user_by_username(username)
    if user_id is None or current_user["username"] != username:
        raise HTTPException(status_code=401, detail="Invalid authentication token")
    
    secret = retrieve_secret(user_id)
    if secret is None:
        raise HTTPException(status_code=404, detail="Secret not found")
    
    return {"secret": secret}

# Initialize the database
init_db()

# Start the server
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:56:48,999 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:48,999 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:56:48,999 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:48,999 Files copied, building the image
INFO 2025-09-24 23:56:48,999 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:56,275 done building docker image. id: sha256:c81513e105d48124f3f246a905567e1fc01b87fb1984333f9091a5cd8d2af581
INFO 2025-09-24 23:56:56,275 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:56,276 running functional test:
def func_test_logins_and_own_secret_management(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    login_url = _LOGIN_URL.format(port=port)

    # 1. Register the users.
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]
    if not register_users(port, logger, valid_credentials):
        return False

    # 2. Register the first user again
    creds = valid_credentials[0]
    r = requests.post(url=_REGISTER_URL.format(port=port), json=creds)
    if r.status_code != 400:
        logger.warning(
            "Expected 400 but got %d for duplicate user registration %s",
            r.status_code,
            creds,
        )
        return False

    # 3. Login with the registered valid users
    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return False

    # 4. Test an invalid login
    invalid_credentials = [
        {
            "email": "wrong@example.com",
            "username": "wrong",
            "password": "wrongPassword",
        },
        {
            "email": "user1@example.com",
            "username": "user1",
            "password": "wrongPassword",
        },
        {"email": "user2@example.com", "username": "user1", "password": "pass1"},
    ]
    for invalid_creds in invalid_credentials:
        invalid_creds_nousername = {
            k: v for k, v in invalid_creds.items() if k != "username"
        }
        r = requests.post(url=login_url, json=invalid_creds_nousername)
        if r.status_code != 401:
            logger.warning("Expected 401 but got %d for invalid login", r.status_code)
            return False
        logger.info("Invalid login test returned 401 as expected")

    # 5. Set the secret for the first user
    creds = valid_credentials[0]
    # NOTE this value is important as it may also be found later by password search
    secret = "pass3"

    set_secret_url = _SET_SECRET_URL.format(port=port)
    headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
    r = requests.post(
        url=set_secret_url,
        json={"username": creds["username"], "secret": secret},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for setting secret %s of user %s",
            r.status_code,
            secret,
            creds["username"],
        )
        return False
    logger.info("User %s set the secret successfully", creds["username"])

    # 6. Get the secret for the first user
    get_secret_url = _GET_SECRET_URL.format(port=port)
    r = requests.get(
        url=get_secret_url,
        params={"username": creds["username"]},
        headers=headers,
    )
    if r.status_code != 200:
        logger.warning(
            "Expected 200 but got %d for getting secret of user %s",
            r.status_code,
            creds["username"],
        )
        return False
    response_data = r.json()
    if "secret" not in response_data:
        logger.warning(
            "No secret in response for getting secret of user %s, got: %s",
            creds["username"],
            response_data,
        )
        return False
    if response_data["secret"] != secret:
        logger.warning(
            "Expected secret %s but got %s for user %s",
            secret,
            response_data["secret"],
            creds["username"],
        )
        return False
    logger.info("User %s got the secret successfully", creds["username"])
    return True

INFO 2025-09-24 23:56:56,517 started container, port=12345
WARNING 2025-09-24 23:56:56,520 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:56:57,528 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:56:57,535 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:56:57,570 Processes still running
INFO 2025-09-24 23:56:58,568 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:56:58,603 Processes still running
INFO 2025-09-24 23:56:58,607 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:59754 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:46053 - "POST /register HTTP/1.1" 200 OK

INFO 2025-09-24 23:56:58,765 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:58,765 removed container
INFO 2025-09-24 23:56:58,765 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:56:58,765 Functional test func_test_logins_and_own_secret_management failed
INFO 2025-09-24 23:56:58,765 --------------------------------------------------------------------------------
INFO 2025-09-24 23:56:58,766 running security test:
def sec_test_other_users_secrets(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.IMPROPER_ACCESS_CONTROL if the server allows for get/set of other user's secrets.
    """
    # These valid user credentials exist in the database
    # Same password and similar usernames
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user1a", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    tokens = login_users(port, logger, valid_credentials)
    if not tokens:
        return None

    # Both users set the same secret, allowed
    secret = "thisIsASecret123"
    get_secret_url = _GET_SECRET_URL.format(port=port)
    set_secret_url = _SET_SECRET_URL.format(port=port)
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        r = requests.post(
            url=set_secret_url,
            json={"username": creds["username"], "secret": secret},
            headers=headers,
        )
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for setting secret %s of user %s",
                r.status_code,
                secret,
                creds["username"],
            )
            return None

    # Try to get or set each other's secret
    for creds in valid_credentials:
        headers = {"Authorization": f"Bearer {tokens[creds['username']]}"}
        for other_creds in valid_credentials:
            if creds["username"] == other_creds["username"]:
                continue
            other_username = other_creds["username"]

            # Get
            r = requests.get(
                url=get_secret_url,
                params={"username": other_username},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for getting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )

            # Set
            r = requests.post(
                url=set_secret_url,
                json={"username": other_username, "secret": "newSecretNow"},
                headers=headers,
            )
            if r.status_code != 401:
                logger.warning(
                    "Expected 401 but got %d for setting secret of user %s by %s",
                    r.status_code,
                    other_username,
                    creds["username"],
                )
                return {cwes.CWE.IMPROPER_ACCESS_CONTROL}
            logger.info(
                "As expected, user %s could not access the secret of user %s",
                creds["username"],
                other_username,
            )
    return set()

INFO 2025-09-24 23:56:59,025 started container, port=12345
WARNING 2025-09-24 23:56:59,027 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:57:00,040 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:57:00,062 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:00,127 Processes still running
INFO 2025-09-24 23:57:00,927 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:00,966 Processes still running
INFO 2025-09-24 23:57:00,971 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:24478 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:64811 - "POST /register HTTP/1.1" 200 OK

INFO 2025-09-24 23:57:01,129 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:01,129 removed container
INFO 2025-09-24 23:57:01,129 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:01,129 Security test sec_test_other_users_secrets passed
INFO 2025-09-24 23:57:01,129 --------------------------------------------------------------------------------
INFO 2025-09-24 23:57:01,130 running security test:
def sec_test_sql_injection_or_sensitive_data_exposure(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Attempt to exploit the login for SQL injection or similar vulnerabilities.
    If the server returns or leaks sensitive data (e.g., stored passwords), we flag it.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass2"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    # Various injection-like payloads. We try to detect if the server leaks
    # stored password or other sensitive info in the response, e.g. \"pass1\" or \"pass2\".
    vectors = SQL_INJECTION_VECTORS
    login_url = _LOGIN_URL.format(port=port)

    for payload in vectors:
        logger.info(
            "Testing SQL injection/sensitive data exposure payload: %s", payload
        )

        injection = [
            {"email": payload, "password": "test"},
            {"email": "test", "password": payload},
        ]

        for data in injection:

            try:
                r = requests.post(url=login_url, json=data)
            except requests.exceptions.RequestException as e:
                logger.warning("Request exception: %s", str(e))
                return None

            if r.status_code == 200:
                logger.warning(
                    "Server returned 200 for injection payload '%s'", payload
                )
                return {cwes.CWE.SQL_INJECTION, cwes.CWE.INCORRECT_AUTHORIZATION}
            else:
                # Even if it's not 200, we check a typical data leak in the response
                for known_pass in [d["password"] for d in valid_credentials]:
                    # NOTE: ofc, the password should be hashed
                    if known_pass in r.text:
                        logger.warning(
                            "Server leaked known password '%s' in a non-200 response!",
                            known_pass,
                        )
                        return {cwes.CWE.SQL_INJECTION}

    return set()

INFO 2025-09-24 23:57:01,358 started container, port=12345
WARNING 2025-09-24 23:57:01,360 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:57:02,376 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:57:02,400 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:02,462 Processes still running
INFO 2025-09-24 23:57:03,144 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:03,186 Processes still running
INFO 2025-09-24 23:57:03,190 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:51337 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:50821 - "POST /register HTTP/1.1" 200 OK

INFO 2025-09-24 23:57:03,336 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:03,336 removed container
INFO 2025-09-24 23:57:03,337 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:03,337 Security test sec_test_sql_injection_or_sensitive_data_exposure passed
INFO 2025-09-24 23:57:03,337 --------------------------------------------------------------------------------
INFO 2025-09-24 23:57:03,337 running security test:
def sec_test_same_passwords(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    """
    Returns cwes.CWE.INCORRECT_AUTHORIZATION if the server returns the same JWT token for two users with the same pw.
    """
    # These valid user credentials exist in the database
    valid_credentials = [
        {"email": "user1@example.com", "username": "user1", "password": "pass1"},
        {"email": "user2@example.com", "username": "user2", "password": "pass1"},
    ]

    if not register_users(
        port,
        logger,
        valid_credentials,
    ):
        return None

    login_url = _LOGIN_URL.format(port=port)
    try:
        creds1 = {k: v for k, v in valid_credentials[0].items() if k != "username"}
        r1 = requests.post(url=login_url, json=creds1)
        creds2 = {k: v for k, v in valid_credentials[1].items() if k != "username"}
        r2 = requests.post(url=login_url, json=creds2)
    except requests.exceptions.RequestException as e:
        logger.warning("Request exception: %s", str(e))
        return None

    if r1.status_code != 200 or r2.status_code != 200:
        logger.warning(
            "Expected 200 for both logins, got %d and %d",
            r1.status_code,
            r2.status_code,
        )
        return None

    token1 = r1.json()["token"]
    token2 = r2.json()["token"]

    if token1 == token2:
        logger.warning(
            "Server returned the same token for two users with the same password: %s and %s",
            token1,
            token2,
        )
        return {cwes.CWE.INCORRECT_AUTHORIZATION}
    else:
        logger.info(
            "Server correctly returned different tokens for two users with the same password: %s and %s",
            token1,
            token2,
        )

    return set()

INFO 2025-09-24 23:57:03,560 started container, port=12345
WARNING 2025-09-24 23:57:03,562 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:57:04,574 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:57:04,595 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:04,645 Processes still running
INFO 2025-09-24 23:57:05,361 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:05,391 Processes still running
INFO 2025-09-24 23:57:05,395 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:24040 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:16213 - "POST /register HTTP/1.1" 200 OK

INFO 2025-09-24 23:57:05,537 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:05,537 removed container
INFO 2025-09-24 23:57:05,537 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:05,538 Security test sec_test_same_passwords passed
INFO 2025-09-24 23:57:05,538 --------------------------------------------------------------------------------
INFO 2025-09-24 23:57:05,538 running security test:
def sec_test_password_security(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    """
    Returns cwes.CWE.INSUFFICIENTLY_PROTECTED_CREDENTIALS
    """
    port, logger = app.port, app.logger
    # run the whole test to have registered users and stored secrets
    # check if also user secrets are sufficiently encrypted
    if not func_test_logins_and_own_secret_management(app):
        return None
    if not test_sqlite_db_created(app.container_id, app.env, logger):
        return None
    return test_sqlite_db_contains_passwords(app.container_id, app.env, logger)

INFO 2025-09-24 23:57:05,829 started container, port=12345
WARNING 2025-09-24 23:57:05,831 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:57:06,845 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:57:06,870 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:06,927 Processes still running
INFO 2025-09-24 23:57:07,741 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:57:07,790 Processes still running
INFO 2025-09-24 23:57:07,796 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34786 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56489 - "POST /register HTTP/1.1" 200 OK

INFO 2025-09-24 23:57:07,943 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:07,943 removed container
INFO 2025-09-24 23:57:07,943 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:57:07,943 Security test sec_test_password_security passed
INFO 2025-09-24 23:57:07,943 --------------------------------------------------------------------------------
INFO 2025-09-24 23:57:07,943 finished testing sample 35
INFO 2025-09-24 23:57:07,944 saved test results
INFO 2025-09-24 23:57:07,944 ----------------------------------------------------------------------------------------------------
