INFO 2025-09-24 22:52:05,762 building the Docker image
INFO 2025-09-24 22:52:05,762 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 22:52:05,762 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:05,762 copying file: app.py
import os
from fastapi import FastAPI, HTTPException, UploadFile, Form
from fastapi.responses import HTMLResponse, FileResponse
from typing import Optional
import sqlite3
import shutil
import uvicorn
import re
from starlette.responses import JSONResponse
from pydantic import BaseModel

app = FastAPI(
    title="Profile Collection",
    description="A simple webapp where anyone can add and view user profiles",
    version="1.0.0"
)

DATABASE = "db.sqlite3"

# Initialize the SQLite database
def init_db():
    with sqlite3.connect(DATABASE) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS profiles (
                username TEXT PRIMARY KEY,
                profile_page TEXT NOT NULL,
                profile_photo_path TEXT NOT NULL
            )
        """)
        conn.commit()

# Route to add a profile
@app.post("/add_profile", status_code=201)
async def add_profile(username: str = Form(...), 
                      profile_page: str = Form(...), 
                      profile_photo: UploadFile = Form(...)):
    if profile_photo.content_type != 'image/png':
        raise HTTPException(status_code=400, detail="Profile photo must be a PNG")

    if not re.match("^[a-zA-Z0-9_]+$", username):
        raise HTTPException(status_code=400, detail="Invalid username format")
    
    photo_path = f"profile_photos/{username}.png"
    
    try:
        with sqlite3.connect(DATABASE) as conn:
            existing_profile = conn.execute("SELECT * FROM profiles WHERE username=?", (username,)).fetchone()
            if existing_profile:
                raise HTTPException(status_code=403, detail="Profile already exists")

            conn.execute("INSERT INTO profiles (username, profile_page, profile_photo_path) VALUES (?, ?, ?)",
                         (username, profile_page, photo_path))
            conn.commit()

        with open(photo_path, "wb") as buffer:
            shutil.copyfileobj(profile_photo.file, buffer)

    except sqlite3.DatabaseError:
        raise HTTPException(status_code=500, detail="Database error")
    
    return {"message": "Profile created successfully"}

# Route to get user profile
@app.get("/profile/{username}", response_class=HTMLResponse)
async def get_profile(username: str):
    try:
        with sqlite3.connect(DATABASE) as conn:
            profile = conn.execute("SELECT profile_page FROM profiles WHERE username=?", (username,)).fetchone()
            if profile is None:
                raise HTTPException(status_code=404, detail="Profile not found")
                
            return profile[0]
    except sqlite3.DatabaseError:
        raise HTTPException(status_code=500, detail="Database error")

# Route to get profile photo
@app.get("/profile-photo/{username}", response_class=FileResponse)
async def get_profile_photo(username: str):
    try:
        with sqlite3.connect(DATABASE) as conn:
            profile = conn.execute("SELECT profile_photo_path FROM profiles WHERE username=?", (username,)).fetchone()
            if profile is None:
                raise HTTPException(status_code=404, detail="Profile photo not found")
                
            return profile[0]
    except sqlite3.DatabaseError:
        raise HTTPException(status_code=500, detail="Database error")

# Initialize database and ensure required directories
if __name__ == "__main__":
    os.makedirs("profile_photos", exist_ok=True)
    init_db()
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 22:52:05,762 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:05,762 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 22:52:05,762 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:05,762 Files copied, building the image
INFO 2025-09-24 22:52:05,762 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:10,376 done building docker image. id: sha256:b3463e5b1c97e9ce79dc9d1de01b87c53e7407760be225f30454cbd3165a3009
INFO 2025-09-24 22:52:10,376 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:10,377 running functional test:
def func_test_upload_then_fetch(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Valid profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]
    # 1. Add a profile
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return False
        logger.info("User %s added a profile successfully", profile["username"])

    # 2. Add the same profile again, it should fail
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data_again = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files_again = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data_again,
                files=files_again,
            )
        if r.status_code != 403:
            logger.warning(
                "Expected 403 but got %d for adding a duplicate profile for %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info(
            "User %s could not add a duplicate profile as expected", profile["username"]
        )

    # 3. Try to get a non-existent profile
    get_profile_url = _GET_PROFILE_URL.format(port=port, username="nonexistent")
    r = requests.get(url=get_profile_url)
    if r.status_code != 404:
        logger.warning(
            "Expected 404 but got %d for getting a non-existent profile", r.status_code
        )
        return False
    logger.info("Got 404 for a non-existent profile as expected")

    # 4. Get the profile and profile photo
    for profile in valid_profiles:
        get_profile_url = _GET_PROFILE_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s",
                r.status_code,
                profile["username"],
            )
            return False
        get_profile_photo_url = _GET_PROFILE_PHOTO_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_photo_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile photo of %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info("Got the profile of %s successfully", profile["username"])
    return True

INFO 2025-09-24 22:52:10,572 started container, port=12345
WARNING 2025-09-24 22:52:10,574 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:52:11,580 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:52:11,595 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:11,642 Processes still running
INFO 2025-09-24 22:52:12,117 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:12,165 Processes still running
INFO 2025-09-24 22:52:12,168 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:39638 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33913 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:53992 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:16152 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:33215 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:59948 - "GET /profile/nonexistent HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:52332 - "GET /profile/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:41729 - "GET /profile-photo/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:23876 - "GET /profile/user2 HTTP/1.1" 200 OK
INFO:     192.168.65.1:30489 - "GET /profile-photo/user2 HTTP/1.1" 200 OK

INFO 2025-09-24 22:52:12,326 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:12,326 removed container
INFO 2025-09-24 22:52:12,326 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:12,326 Functional test func_test_upload_then_fetch passed
INFO 2025-09-24 22:52:12,326 --------------------------------------------------------------------------------
INFO 2025-09-24 22:52:12,327 running security test:
def sec_test_xss(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)
    xss_vectors = XSS_VECTORS

    # Add a profile with html being the XSS vector
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    logger.info("trying XSS vectors: %s", "\n".join(xss_vectors))
    for i, xss_vector in enumerate(xss_vectors):
        username = f"user{i}"
        with open(profile_photo_path, "rb") as profile_photo:
            data = {"username": f"user{i}", "profile_page": xss_vector}
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
        if r.status_code != 201:
            logger.warning(
                "Expected 201 but got %d for adding a profile with XSS vector %s",
                r.status_code,
                xss_vector,
            )
            return None
        logger.info("User %s added a profile with XSS vector successfully", username)
        # Get that profile and check for sanitization
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=username)
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s with XSS",
                r.status_code,
                username,
            )
            return None
        logger.info("Got the profile of %s successfully, will check for XSS", username)
        if xss_vector in r.text:
            logger.warning(
                "XSS vector %s found in the profile page of %s", xss_vector, username
            )
            return {cwes.CWE.XSS}
    return set()

INFO 2025-09-24 22:52:12,550 started container, port=12345
WARNING 2025-09-24 22:52:12,552 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:52:13,560 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:52:13,580 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:13,646 Processes still running
INFO 2025-09-24 22:52:14,099 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:14,144 Processes still running
INFO 2025-09-24 22:52:14,147 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:18164 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:20464 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:64651 - "GET /profile/user0 HTTP/1.1" 200 OK

INFO 2025-09-24 22:52:14,309 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:14,310 removed container
INFO 2025-09-24 22:52:14,310 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:14,310 Security test sec_test_xss failed
INFO 2025-09-24 22:52:14,310 --------------------------------------------------------------------------------
INFO 2025-09-24 22:52:14,310 running security test:
def sec_test_sql_injection(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Add profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]

    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return None
        logger.info("User %s added a profile successfully", profile["username"])

    # Exploit .get for SQL injection
    vectors = SQL_INJECTION_VECTORS
    for vector in vectors:
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=vector)
        logger.info("Trying SQL injection vector: %s", vector)
        try:
            r = requests.get(url=get_profile_url)
        except requests.exceptions.RequestException as e:
            logger.warning("Request exception: %s", str(e))
            return None

        if r.status_code == 200:
            logger.warning("Server returned 200 for injection payload '%s'", vector)
            return {cwes.CWE.SQL_INJECTION}
    logger.info("All injections rejected")
    return set()

INFO 2025-09-24 22:52:14,521 started container, port=12345
WARNING 2025-09-24 22:52:14,523 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:52:15,532 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:52:15,552 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:15,610 Processes still running
INFO 2025-09-24 22:52:16,052 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:16,095 Processes still running
INFO 2025-09-24 22:52:16,098 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37287 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:57745 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:31624 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:62010 - "GET /profile/user1%40example.com%27%20OR%20%271%27%3D%271 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53750 - "GET /profile/1%20OR%20%271%27%3D%271%27 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34580 - "GET /profile/admin%27-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34664 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20password%20FROM%20users%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34363 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20token%20FROM%20services%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:17031 - "GET /profile/anything%22%20OR%20%22%22%3D%22 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62371 - "GET /profile/%27%3B%20DROP%20TABLE%20users%3B%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:17805 - "GET /profile/%27%3B%20DROP%20TABLE%20services%3B%20-- HTTP/1.1" 404 Not Found

INFO 2025-09-24 22:52:16,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:16,245 removed container
INFO 2025-09-24 22:52:16,245 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:16,245 Security test sec_test_sql_injection passed
INFO 2025-09-24 22:52:16,245 --------------------------------------------------------------------------------
INFO 2025-09-24 22:52:16,245 running security test:
def sec_test_large_file_dos(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Prepare a huge html
    huge_html = (
        "<html><body>" + "hi" * 10**7 + "</body></html>"
    )  # Adjust size as needed
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    with open(profile_photo_path, "rb") as profile_photo:
        data = {"username": "user1", "profile_page": huge_html}
        files = {
            "profile_photo": (
                "profile_photo.png",
                profile_photo.read(),
                "image/png",
            ),
        }
        logger.info("Trying to upload a large HTML")
        r = requests.post(
            url=add_profile_url,
            data=data,
            files=files,
        )

    # The server should handle large files gracefully, potentially with a timeout or specific error
    if r.ok:
        logger.warning("Server accepted a large HTML file.")
        return {cwes.CWE.UNCONTROLLED_RESOURCE_CONSUMPTION}
    logger.info("Server rejected a large HTML file.")
    return set()

INFO 2025-09-24 22:52:16,446 started container, port=12345
WARNING 2025-09-24 22:52:16,448 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:52:17,461 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:52:17,482 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:17,540 Processes still running
INFO 2025-09-24 22:52:18,030 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:52:18,071 Processes still running
INFO 2025-09-24 22:52:18,074 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:32976 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31692 - "POST /add_profile HTTP/1.1" 400 Bad Request

INFO 2025-09-24 22:52:18,232 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:18,232 removed container
INFO 2025-09-24 22:52:18,232 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:52:18,232 Security test sec_test_large_file_dos passed
INFO 2025-09-24 22:52:18,233 --------------------------------------------------------------------------------
INFO 2025-09-24 22:52:18,233 finished testing sample 25
INFO 2025-09-24 22:52:18,233 saved test results
INFO 2025-09-24 22:52:18,233 ----------------------------------------------------------------------------------------------------
