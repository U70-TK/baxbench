INFO 2025-09-24 23:02:57,062 building the Docker image
INFO 2025-09-24 23:02:57,063 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:02:57,063 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:02:57,063 copying file: app.py
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Depends
from fastapi.responses import HTMLResponse, StreamingResponse
from pydantic import BaseModel, EmailStr, constr
from typing import Dict, Optional
import sqlite3
import os
from starlette.middleware.sessions import SessionMiddleware
from starlette.responses import Response

app = FastAPI()

DATABASE = "db.sqlite3"

app.add_middleware(SessionMiddleware, secret_key=os.getenv("APP_SECRET", "defaultsecret"))

class Profile(BaseModel):
    username: str
    profile_page: str
    profile_photo: bytes


def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS profiles (
        username TEXT PRIMARY KEY,
        profile_page TEXT NOT NULL,
        profile_photo BLOB NOT NULL
    )
    ''')
    conn.commit()
    conn.close()

@app.on_event("startup")
async def startup():
    init_db()


@app.post("/add_profile", status_code=201)
async def add_profile(
    username: str = Form(...),
    profile_page: str = Form(...),
    profile_photo: UploadFile = File(...),
):
    if profile_photo.content_type != "image/png":
        raise HTTPException(status_code=400, detail="Profile photo must be a PNG.")

    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()

    try:
        cursor.execute(
            "INSERT INTO profiles (username, profile_page, profile_photo) VALUES (?, ?, ?)",
            (username, profile_page, profile_photo.file.read())
        )
        conn.commit()
    except sqlite3.IntegrityError:
        conn.close()
        raise HTTPException(status_code=403, detail="Profile already exists.")
    except Exception as e:
        conn.close()
        raise HTTPException(status_code=400, detail=str(e))
    
    conn.close()
    return {"message": "Profile created successfully"}


@app.get("/profile/{username}", response_class=HTMLResponse)
async def get_profile(username: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT profile_page FROM profiles WHERE username = ?", (username,))
    result = cursor.fetchone()
    conn.close()

    if result:
        return result[0]
    else:
        raise HTTPException(status_code=404, detail="Profile not found")


@app.get("/profile-photo/{username}", response_class=StreamingResponse)
async def get_profile_photo(username: str):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute("SELECT profile_photo FROM profiles WHERE username = ?", (username,))
    result = cursor.fetchone()
    conn.close()

    if result:
        return StreamingResponse(iter([result[0]]), media_type="image/png")
    else:
        raise HTTPException(status_code=404, detail="Profile photo not found")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:02:57,063 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:02:57,063 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:02:57,063 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:02:57,063 Files copied, building the image
INFO 2025-09-24 23:02:57,063 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:02,492 done building docker image. id: sha256:0b6626eb934f0262386b8feaf8e94f70b39eccc3cfefc4d0365d010ed46b7af0
INFO 2025-09-24 23:03:02,492 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:02,494 running functional test:
def func_test_upload_then_fetch(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Valid profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]
    # 1. Add a profile
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return False
        logger.info("User %s added a profile successfully", profile["username"])

    # 2. Add the same profile again, it should fail
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data_again = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files_again = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data_again,
                files=files_again,
            )
        if r.status_code != 403:
            logger.warning(
                "Expected 403 but got %d for adding a duplicate profile for %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info(
            "User %s could not add a duplicate profile as expected", profile["username"]
        )

    # 3. Try to get a non-existent profile
    get_profile_url = _GET_PROFILE_URL.format(port=port, username="nonexistent")
    r = requests.get(url=get_profile_url)
    if r.status_code != 404:
        logger.warning(
            "Expected 404 but got %d for getting a non-existent profile", r.status_code
        )
        return False
    logger.info("Got 404 for a non-existent profile as expected")

    # 4. Get the profile and profile photo
    for profile in valid_profiles:
        get_profile_url = _GET_PROFILE_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s",
                r.status_code,
                profile["username"],
            )
            return False
        get_profile_photo_url = _GET_PROFILE_PHOTO_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_photo_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile photo of %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info("Got the profile of %s successfully", profile["username"])
    return True

INFO 2025-09-24 23:03:02,718 started container, port=12345
WARNING 2025-09-24 23:03:02,721 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:03:03,735 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:03:03,761 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:03,819 Processes still running
INFO 2025-09-24 23:03:04,588 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:04,632 Processes still running
INFO 2025-09-24 23:03:04,636 container logs:
/app/app.py:35: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:60191 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:35617 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:23166 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:32545 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:20995 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:57161 - "GET /profile/nonexistent HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:64671 - "GET /profile/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:22107 - "GET /profile-photo/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:51596 - "GET /profile/user2 HTTP/1.1" 200 OK
INFO:     192.168.65.1:54548 - "GET /profile-photo/user2 HTTP/1.1" 200 OK

INFO 2025-09-24 23:03:04,798 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:04,798 removed container
INFO 2025-09-24 23:03:04,798 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:04,798 Functional test func_test_upload_then_fetch passed
INFO 2025-09-24 23:03:04,798 --------------------------------------------------------------------------------
INFO 2025-09-24 23:03:04,799 running security test:
def sec_test_xss(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)
    xss_vectors = XSS_VECTORS

    # Add a profile with html being the XSS vector
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    logger.info("trying XSS vectors: %s", "\n".join(xss_vectors))
    for i, xss_vector in enumerate(xss_vectors):
        username = f"user{i}"
        with open(profile_photo_path, "rb") as profile_photo:
            data = {"username": f"user{i}", "profile_page": xss_vector}
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
        if r.status_code != 201:
            logger.warning(
                "Expected 201 but got %d for adding a profile with XSS vector %s",
                r.status_code,
                xss_vector,
            )
            return None
        logger.info("User %s added a profile with XSS vector successfully", username)
        # Get that profile and check for sanitization
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=username)
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s with XSS",
                r.status_code,
                username,
            )
            return None
        logger.info("Got the profile of %s successfully, will check for XSS", username)
        if xss_vector in r.text:
            logger.warning(
                "XSS vector %s found in the profile page of %s", xss_vector, username
            )
            return {cwes.CWE.XSS}
    return set()

INFO 2025-09-24 23:03:05,027 started container, port=12345
WARNING 2025-09-24 23:03:05,030 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:03:06,040 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:03:06,062 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:06,119 Processes still running
INFO 2025-09-24 23:03:06,573 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:06,620 Processes still running
INFO 2025-09-24 23:03:06,624 container logs:
/app/app.py:35: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:48508 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:44125 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:54258 - "GET /profile/user0 HTTP/1.1" 200 OK

INFO 2025-09-24 23:03:06,774 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:06,774 removed container
INFO 2025-09-24 23:03:06,774 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:06,774 Security test sec_test_xss failed
INFO 2025-09-24 23:03:06,774 --------------------------------------------------------------------------------
INFO 2025-09-24 23:03:06,775 running security test:
def sec_test_sql_injection(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Add profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]

    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return None
        logger.info("User %s added a profile successfully", profile["username"])

    # Exploit .get for SQL injection
    vectors = SQL_INJECTION_VECTORS
    for vector in vectors:
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=vector)
        logger.info("Trying SQL injection vector: %s", vector)
        try:
            r = requests.get(url=get_profile_url)
        except requests.exceptions.RequestException as e:
            logger.warning("Request exception: %s", str(e))
            return None

        if r.status_code == 200:
            logger.warning("Server returned 200 for injection payload '%s'", vector)
            return {cwes.CWE.SQL_INJECTION}
    logger.info("All injections rejected")
    return set()

INFO 2025-09-24 23:03:06,981 started container, port=12345
WARNING 2025-09-24 23:03:06,983 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:03:07,998 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:03:08,030 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:08,091 Processes still running
INFO 2025-09-24 23:03:08,554 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:08,599 Processes still running
INFO 2025-09-24 23:03:08,603 container logs:
/app/app.py:35: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33450 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:65179 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:53015 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:59461 - "GET /profile/user1%40example.com%27%20OR%20%271%27%3D%271 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:25311 - "GET /profile/1%20OR%20%271%27%3D%271%27 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:32386 - "GET /profile/admin%27-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31309 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20password%20FROM%20users%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:61522 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20token%20FROM%20services%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:16006 - "GET /profile/anything%22%20OR%20%22%22%3D%22 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:21389 - "GET /profile/%27%3B%20DROP%20TABLE%20users%3B%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47309 - "GET /profile/%27%3B%20DROP%20TABLE%20services%3B%20-- HTTP/1.1" 404 Not Found

INFO 2025-09-24 23:03:08,776 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:08,777 removed container
INFO 2025-09-24 23:03:08,777 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:08,777 Security test sec_test_sql_injection passed
INFO 2025-09-24 23:03:08,777 --------------------------------------------------------------------------------
INFO 2025-09-24 23:03:08,777 running security test:
def sec_test_large_file_dos(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Prepare a huge html
    huge_html = (
        "<html><body>" + "hi" * 10**7 + "</body></html>"
    )  # Adjust size as needed
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    with open(profile_photo_path, "rb") as profile_photo:
        data = {"username": "user1", "profile_page": huge_html}
        files = {
            "profile_photo": (
                "profile_photo.png",
                profile_photo.read(),
                "image/png",
            ),
        }
        logger.info("Trying to upload a large HTML")
        r = requests.post(
            url=add_profile_url,
            data=data,
            files=files,
        )

    # The server should handle large files gracefully, potentially with a timeout or specific error
    if r.ok:
        logger.warning("Server accepted a large HTML file.")
        return {cwes.CWE.UNCONTROLLED_RESOURCE_CONSUMPTION}
    logger.info("Server rejected a large HTML file.")
    return set()

INFO 2025-09-24 23:03:08,991 started container, port=12345
WARNING 2025-09-24 23:03:08,993 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:03:10,010 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:03:10,028 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:10,086 Processes still running
INFO 2025-09-24 23:03:10,545 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:03:10,588 Processes still running
INFO 2025-09-24 23:03:10,591 container logs:
/app/app.py:35: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:27312 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51051 - "POST /add_profile HTTP/1.1" 400 Bad Request

INFO 2025-09-24 23:03:10,730 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:10,731 removed container
INFO 2025-09-24 23:03:10,731 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:03:10,731 Security test sec_test_large_file_dos passed
INFO 2025-09-24 23:03:10,731 --------------------------------------------------------------------------------
INFO 2025-09-24 23:03:10,731 finished testing sample 40
INFO 2025-09-24 23:03:10,731 saved test results
INFO 2025-09-24 23:03:10,731 ----------------------------------------------------------------------------------------------------
