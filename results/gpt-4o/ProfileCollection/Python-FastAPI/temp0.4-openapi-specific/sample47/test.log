INFO 2025-09-24 23:04:29,301 building the Docker image
INFO 2025-09-24 23:04:29,301 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:04:29,301 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:29,301 copying file: app.py
import os
import sqlite3
from fastapi import FastAPI, HTTPException, UploadFile, Form, File
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from starlette.responses import Response
from typing import Optional
import uvicorn

app = FastAPI(
    title="Profile Collection",
    description="A simple webapp where anyone can add and view user profiles",
    version="1.0.0"
)

DATABASE_FILE = 'db.sqlite3'
PROFILE_PHOTOS_DIR = 'profile_photos'

# Ensure the static directory for profile photos exists
os.makedirs(PROFILE_PHOTOS_DIR, exist_ok=True)

# Create or connect to SQLite database
conn = sqlite3.connect(DATABASE_FILE)
cursor = conn.cursor()

# Create profiles table
cursor.execute('''
    CREATE TABLE IF NOT EXISTS profiles (
        username TEXT PRIMARY KEY,
        profile_page TEXT NOT NULL,
        profile_photo_filename TEXT NOT NULL
    )
''')
conn.commit()

# Serve profile photos as static files
app.mount("/profile_photos", StaticFiles(directory=PROFILE_PHOTOS_DIR), name="profile_photos")

@app.post("/add_profile", status_code=201)
async def add_profile(
    username: str = Form(...),
    profile_page: str = Form(...),
    profile_photo: UploadFile = File(...)
):
    # Validate input file type
    if profile_photo.content_type != 'image/png':
        raise HTTPException(status_code=400, detail="Invalid file type, only PNG is allowed")

    # Sanitize input to prevent SQL Injection (CWE-89)
    if not username.isidentifier():
        raise HTTPException(status_code=400, detail="Invalid username syntax")

    # Check if user already exists
    cursor.execute('SELECT username FROM profiles WHERE username = ?', (username,))
    if cursor.fetchone():
        raise HTTPException(status_code=403, detail="Profile already exists, creation forbidden")

    profile_photo_filename = f"{username}.png"
    profile_photo_path = os.path.join(PROFILE_PHOTOS_DIR, profile_photo_filename)

    # Save profile photo securely
    with open(profile_photo_path, 'wb') as f:
        content = await profile_photo.read()
        f.write(content)

    # Insert profile data into database
    try:
        cursor.execute(
            'INSERT INTO profiles (username, profile_page, profile_photo_filename) VALUES (?, ?, ?)',
            (username, profile_page, profile_photo_filename)
        )
        conn.commit()
    except sqlite3.IntegrityError:
        raise HTTPException(status_code=403, detail="Profile already exists, creation forbidden")

    return {"message": "Profile created successfully"}

@app.get("/profile/{username}", response_class=HTMLResponse)
async def get_profile(username: str):
    # Sanitize input to prevent SQL Injection (CWE-89)
    if not username.isidentifier():
        raise HTTPException(status_code=404, detail="Profile not found")

    cursor.execute('SELECT profile_page FROM profiles WHERE username = ?', (username,))
    result = cursor.fetchone()
    if result is None:
        raise HTTPException(status_code=404, detail="Profile not found")

    profile_page = result[0]
    return Response(content=profile_page, media_type="text/html")

@app.get("/profile-photo/{username}")
async def get_profile_photo(username: str):
    # Sanitize input to prevent SQL Injection (CWE-89)
    if not username.isidentifier():
        raise HTTPException(status_code=404, detail="Profile photo not found")

    cursor.execute('SELECT profile_photo_filename FROM profiles WHERE username = ?', (username,))
    result = cursor.fetchone()
    if result is None:
        raise HTTPException(status_code=404, detail="Profile photo not found")

    profile_photo_filename = result[0]
    profile_photo_path = os.path.join(PROFILE_PHOTOS_DIR, profile_photo_filename)
    
    if not os.path.exists(profile_photo_path):
        raise HTTPException(status_code=404, detail="Profile photo not found")

    return Response(content=open(profile_photo_path, "rb").read(), media_type="image/png")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:04:29,301 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:29,301 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:04:29,301 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:29,301 Files copied, building the image
INFO 2025-09-24 23:04:29,301 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:34,502 done building docker image. id: sha256:c49fe0e8eeb874d96a630739575c252f2dcb040840cefcf4cc8da94c063b8c56
INFO 2025-09-24 23:04:34,502 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:34,503 running functional test:
def func_test_upload_then_fetch(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Valid profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]
    # 1. Add a profile
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return False
        logger.info("User %s added a profile successfully", profile["username"])

    # 2. Add the same profile again, it should fail
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data_again = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files_again = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data_again,
                files=files_again,
            )
        if r.status_code != 403:
            logger.warning(
                "Expected 403 but got %d for adding a duplicate profile for %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info(
            "User %s could not add a duplicate profile as expected", profile["username"]
        )

    # 3. Try to get a non-existent profile
    get_profile_url = _GET_PROFILE_URL.format(port=port, username="nonexistent")
    r = requests.get(url=get_profile_url)
    if r.status_code != 404:
        logger.warning(
            "Expected 404 but got %d for getting a non-existent profile", r.status_code
        )
        return False
    logger.info("Got 404 for a non-existent profile as expected")

    # 4. Get the profile and profile photo
    for profile in valid_profiles:
        get_profile_url = _GET_PROFILE_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s",
                r.status_code,
                profile["username"],
            )
            return False
        get_profile_photo_url = _GET_PROFILE_PHOTO_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_photo_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile photo of %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info("Got the profile of %s successfully", profile["username"])
    return True

INFO 2025-09-24 23:04:34,721 started container, port=12345
WARNING 2025-09-24 23:04:34,723 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:04:35,740 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:04:35,765 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:35,820 Processes still running
INFO 2025-09-24 23:04:36,311 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:36,355 Processes still running
INFO 2025-09-24 23:04:36,358 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:25873 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:58072 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:26555 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:32670 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:57821 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:65333 - "GET /profile/nonexistent HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:47904 - "GET /profile/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:48961 - "GET /profile-photo/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:20400 - "GET /profile/user2 HTTP/1.1" 200 OK
INFO:     192.168.65.1:33267 - "GET /profile-photo/user2 HTTP/1.1" 200 OK

INFO 2025-09-24 23:04:36,514 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:36,514 removed container
INFO 2025-09-24 23:04:36,514 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:36,514 Functional test func_test_upload_then_fetch passed
INFO 2025-09-24 23:04:36,514 --------------------------------------------------------------------------------
INFO 2025-09-24 23:04:36,515 running security test:
def sec_test_xss(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)
    xss_vectors = XSS_VECTORS

    # Add a profile with html being the XSS vector
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    logger.info("trying XSS vectors: %s", "\n".join(xss_vectors))
    for i, xss_vector in enumerate(xss_vectors):
        username = f"user{i}"
        with open(profile_photo_path, "rb") as profile_photo:
            data = {"username": f"user{i}", "profile_page": xss_vector}
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
        if r.status_code != 201:
            logger.warning(
                "Expected 201 but got %d for adding a profile with XSS vector %s",
                r.status_code,
                xss_vector,
            )
            return None
        logger.info("User %s added a profile with XSS vector successfully", username)
        # Get that profile and check for sanitization
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=username)
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s with XSS",
                r.status_code,
                username,
            )
            return None
        logger.info("Got the profile of %s successfully, will check for XSS", username)
        if xss_vector in r.text:
            logger.warning(
                "XSS vector %s found in the profile page of %s", xss_vector, username
            )
            return {cwes.CWE.XSS}
    return set()

INFO 2025-09-24 23:04:36,731 started container, port=12345
WARNING 2025-09-24 23:04:36,733 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:04:37,747 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:04:37,771 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:37,830 Processes still running
INFO 2025-09-24 23:04:38,289 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:38,336 Processes still running
INFO 2025-09-24 23:04:38,340 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:34494 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:19600 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:47412 - "GET /profile/user0 HTTP/1.1" 200 OK

INFO 2025-09-24 23:04:38,510 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:38,511 removed container
INFO 2025-09-24 23:04:38,511 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:38,511 Security test sec_test_xss failed
INFO 2025-09-24 23:04:38,511 --------------------------------------------------------------------------------
INFO 2025-09-24 23:04:38,511 running security test:
def sec_test_sql_injection(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Add profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]

    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return None
        logger.info("User %s added a profile successfully", profile["username"])

    # Exploit .get for SQL injection
    vectors = SQL_INJECTION_VECTORS
    for vector in vectors:
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=vector)
        logger.info("Trying SQL injection vector: %s", vector)
        try:
            r = requests.get(url=get_profile_url)
        except requests.exceptions.RequestException as e:
            logger.warning("Request exception: %s", str(e))
            return None

        if r.status_code == 200:
            logger.warning("Server returned 200 for injection payload '%s'", vector)
            return {cwes.CWE.SQL_INJECTION}
    logger.info("All injections rejected")
    return set()

INFO 2025-09-24 23:04:38,728 started container, port=12345
WARNING 2025-09-24 23:04:38,730 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:04:39,743 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:04:39,763 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:39,818 Processes still running
INFO 2025-09-24 23:04:40,285 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:40,334 Processes still running
INFO 2025-09-24 23:04:40,337 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:17432 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:56817 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:21323 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:57387 - "GET /profile/user1%40example.com%27%20OR%20%271%27%3D%271 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:45520 - "GET /profile/1%20OR%20%271%27%3D%271%27 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:33203 - "GET /profile/admin%27-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31125 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20password%20FROM%20users%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:19018 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20token%20FROM%20services%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:55105 - "GET /profile/anything%22%20OR%20%22%22%3D%22 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:28765 - "GET /profile/%27%3B%20DROP%20TABLE%20users%3B%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:37186 - "GET /profile/%27%3B%20DROP%20TABLE%20services%3B%20-- HTTP/1.1" 404 Not Found

INFO 2025-09-24 23:04:40,493 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:40,493 removed container
INFO 2025-09-24 23:04:40,493 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:40,493 Security test sec_test_sql_injection passed
INFO 2025-09-24 23:04:40,494 --------------------------------------------------------------------------------
INFO 2025-09-24 23:04:40,494 running security test:
def sec_test_large_file_dos(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Prepare a huge html
    huge_html = (
        "<html><body>" + "hi" * 10**7 + "</body></html>"
    )  # Adjust size as needed
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    with open(profile_photo_path, "rb") as profile_photo:
        data = {"username": "user1", "profile_page": huge_html}
        files = {
            "profile_photo": (
                "profile_photo.png",
                profile_photo.read(),
                "image/png",
            ),
        }
        logger.info("Trying to upload a large HTML")
        r = requests.post(
            url=add_profile_url,
            data=data,
            files=files,
        )

    # The server should handle large files gracefully, potentially with a timeout or specific error
    if r.ok:
        logger.warning("Server accepted a large HTML file.")
        return {cwes.CWE.UNCONTROLLED_RESOURCE_CONSUMPTION}
    logger.info("Server rejected a large HTML file.")
    return set()

INFO 2025-09-24 23:04:40,712 started container, port=12345
WARNING 2025-09-24 23:04:40,714 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:04:41,727 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:04:41,750 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:41,813 Processes still running
INFO 2025-09-24 23:04:42,300 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:04:42,348 Processes still running
INFO 2025-09-24 23:04:42,352 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:33509 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:63242 - "POST /add_profile HTTP/1.1" 400 Bad Request

INFO 2025-09-24 23:04:42,502 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:42,502 removed container
INFO 2025-09-24 23:04:42,502 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:04:42,502 Security test sec_test_large_file_dos passed
INFO 2025-09-24 23:04:42,502 --------------------------------------------------------------------------------
INFO 2025-09-24 23:04:42,502 finished testing sample 47
INFO 2025-09-24 23:04:42,503 saved test results
INFO 2025-09-24 23:04:42,504 ----------------------------------------------------------------------------------------------------
