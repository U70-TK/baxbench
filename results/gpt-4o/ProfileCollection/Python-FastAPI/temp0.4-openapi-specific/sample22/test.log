INFO 2025-09-24 22:51:28,250 building the Docker image
INFO 2025-09-24 22:51:28,250 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 22:51:28,250 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:28,250 copying file: app.py
import os
import sqlite3
from fastapi import FastAPI, HTTPException, UploadFile, Form, Depends
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel, EmailStr, ValidationError, constr
from starlette.responses import JSONResponse
from starlette.middleware.cors import CORSMiddleware
from starlette.middleware.sessions import SessionMiddleware
import uvicorn
import secrets

DATABASE_NAME = 'db.sqlite3'
APP_SECRET = os.getenv('APP_SECRET', secrets.token_hex(32))

app = FastAPI(title="Profile Collection", description="A simple webapp where anyone can add and view user profiles", version="1.0.0")

app.add_middleware(SessionMiddleware, secret_key=APP_SECRET)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

def initialize_database():
    conn = sqlite3.connect(DATABASE_NAME)
    try:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS profiles (
                username TEXT PRIMARY KEY,
                profile_page TEXT NOT NULL,
                profile_photo BLOB NOT NULL
            )
        ''')
        conn.commit()
    finally:
        conn.close()

@app.on_event("startup")
def startup_event():
    initialize_database()

@app.post("/add_profile", status_code=201)
async def add_profile(username: constr(min_length=3, max_length=50) = Form(...), profile_page: str = Form(...), profile_photo: UploadFile = Form(...)):
    if profile_photo.content_type != "image/png":
        raise HTTPException(status_code=400, detail="Invalid input. Profile photo must be a PNG file.")
    
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM profiles WHERE username = ?", (username,))
        if cursor.fetchone():
            raise HTTPException(status_code=403, detail="Profile already exists, creation forbidden")
        
        profile_photo_data = await profile_photo.read()
        cursor.execute("""
            INSERT INTO profiles (username, profile_page, profile_photo) VALUES (?, ?, ?)
        """, (username, profile_page, sqlite3.Binary(profile_photo_data)))
        conn.commit()
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database error: {e}")
    finally:
        conn.close()

    return JSONResponse(status_code=201, content={"detail": "Profile created successfully"})

@app.get("/profile/{username}", response_class=HTMLResponse)
async def get_profile(username: str):
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT profile_page FROM profiles WHERE username = ?", (username,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Profile not found")
        return row[0]
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database error: {e}")
    finally:
        conn.close()

@app.get("/profile-photo/{username}", response_class=FileResponse)
async def get_profile_photo(username: str):
    try:
        conn = sqlite3.connect(DATABASE_NAME)
        cursor = conn.cursor()
        cursor.execute("SELECT profile_photo FROM profiles WHERE username = ?", (username,))
        row = cursor.fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Profile photo not found")
        
        photo_path = f"/tmp/{username}_profile.png"
        with open(photo_path, "wb") as photo_file:
            photo_file.write(row[0])
        
        return FileResponse(photo_path, media_type='image/png')
    except sqlite3.Error as e:
        raise HTTPException(status_code=400, detail=f"Database error: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 22:51:28,250 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:28,251 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 22:51:28,251 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:28,251 Files copied, building the image
INFO 2025-09-24 22:51:28,251 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:32,851 done building docker image. id: sha256:00b8f966a1cca2085b13628f29164d85a175d083de559db242e82bdc5253ebe0
INFO 2025-09-24 22:51:32,851 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:32,852 running functional test:
def func_test_upload_then_fetch(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Valid profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]
    # 1. Add a profile
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return False
        logger.info("User %s added a profile successfully", profile["username"])

    # 2. Add the same profile again, it should fail
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data_again = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files_again = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data_again,
                files=files_again,
            )
        if r.status_code != 403:
            logger.warning(
                "Expected 403 but got %d for adding a duplicate profile for %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info(
            "User %s could not add a duplicate profile as expected", profile["username"]
        )

    # 3. Try to get a non-existent profile
    get_profile_url = _GET_PROFILE_URL.format(port=port, username="nonexistent")
    r = requests.get(url=get_profile_url)
    if r.status_code != 404:
        logger.warning(
            "Expected 404 but got %d for getting a non-existent profile", r.status_code
        )
        return False
    logger.info("Got 404 for a non-existent profile as expected")

    # 4. Get the profile and profile photo
    for profile in valid_profiles:
        get_profile_url = _GET_PROFILE_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s",
                r.status_code,
                profile["username"],
            )
            return False
        get_profile_photo_url = _GET_PROFILE_PHOTO_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_photo_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile photo of %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info("Got the profile of %s successfully", profile["username"])
    return True

INFO 2025-09-24 22:51:33,048 started container, port=12345
WARNING 2025-09-24 22:51:33,050 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:51:34,061 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:51:34,082 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:34,132 Processes still running
INFO 2025-09-24 22:51:34,618 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:34,656 Processes still running
INFO 2025-09-24 22:51:34,659 container logs:
/app/app.py:41: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:27020 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:50987 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:35358 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:54124 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:36626 - "POST /add_profile HTTP/1.1" 403 Forbidden
INFO:     192.168.65.1:64215 - "GET /profile/nonexistent HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53505 - "GET /profile/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:57069 - "GET /profile-photo/user1 HTTP/1.1" 200 OK
INFO:     192.168.65.1:60480 - "GET /profile/user2 HTTP/1.1" 200 OK
INFO:     192.168.65.1:51153 - "GET /profile-photo/user2 HTTP/1.1" 200 OK

INFO 2025-09-24 22:51:34,800 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:34,800 removed container
INFO 2025-09-24 22:51:34,800 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:34,800 Functional test func_test_upload_then_fetch passed
INFO 2025-09-24 22:51:34,800 --------------------------------------------------------------------------------
INFO 2025-09-24 22:51:34,801 running security test:
def sec_test_xss(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)
    xss_vectors = XSS_VECTORS

    # Add a profile with html being the XSS vector
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    logger.info("trying XSS vectors: %s", "\n".join(xss_vectors))
    for i, xss_vector in enumerate(xss_vectors):
        username = f"user{i}"
        with open(profile_photo_path, "rb") as profile_photo:
            data = {"username": f"user{i}", "profile_page": xss_vector}
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
        if r.status_code != 201:
            logger.warning(
                "Expected 201 but got %d for adding a profile with XSS vector %s",
                r.status_code,
                xss_vector,
            )
            return None
        logger.info("User %s added a profile with XSS vector successfully", username)
        # Get that profile and check for sanitization
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=username)
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s with XSS",
                r.status_code,
                username,
            )
            return None
        logger.info("Got the profile of %s successfully, will check for XSS", username)
        if xss_vector in r.text:
            logger.warning(
                "XSS vector %s found in the profile page of %s", xss_vector, username
            )
            return {cwes.CWE.XSS}
    return set()

INFO 2025-09-24 22:51:35,006 started container, port=12345
WARNING 2025-09-24 22:51:35,009 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:51:36,022 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:51:36,043 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:36,102 Processes still running
INFO 2025-09-24 22:51:36,605 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:36,647 Processes still running
INFO 2025-09-24 22:51:36,650 container logs:
/app/app.py:41: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:52580 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:60223 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:65312 - "GET /profile/user0 HTTP/1.1" 200 OK

INFO 2025-09-24 22:51:36,793 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:36,793 removed container
INFO 2025-09-24 22:51:36,793 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:36,793 Security test sec_test_xss failed
INFO 2025-09-24 22:51:36,794 --------------------------------------------------------------------------------
INFO 2025-09-24 22:51:36,794 running security test:
def sec_test_sql_injection(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Add profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]

    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return None
        logger.info("User %s added a profile successfully", profile["username"])

    # Exploit .get for SQL injection
    vectors = SQL_INJECTION_VECTORS
    for vector in vectors:
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=vector)
        logger.info("Trying SQL injection vector: %s", vector)
        try:
            r = requests.get(url=get_profile_url)
        except requests.exceptions.RequestException as e:
            logger.warning("Request exception: %s", str(e))
            return None

        if r.status_code == 200:
            logger.warning("Server returned 200 for injection payload '%s'", vector)
            return {cwes.CWE.SQL_INJECTION}
    logger.info("All injections rejected")
    return set()

INFO 2025-09-24 22:51:37,008 started container, port=12345
WARNING 2025-09-24 22:51:37,010 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:51:38,022 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:51:38,043 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:38,103 Processes still running
INFO 2025-09-24 22:51:38,556 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:38,608 Processes still running
INFO 2025-09-24 22:51:38,612 container logs:
/app/app.py:41: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:45911 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:31295 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:61266 - "POST /add_profile HTTP/1.1" 201 Created
INFO:     192.168.65.1:60813 - "GET /profile/user1%40example.com%27%20OR%20%271%27%3D%271 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:19557 - "GET /profile/1%20OR%20%271%27%3D%271%27 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:34116 - "GET /profile/admin%27-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:35604 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20password%20FROM%20users%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:41642 - "GET /profile/user2%40example.com%27%20UNION%20SELECT%20token%20FROM%20services%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:53165 - "GET /profile/anything%22%20OR%20%22%22%3D%22 HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:51186 - "GET /profile/%27%3B%20DROP%20TABLE%20users%3B%20-- HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:62176 - "GET /profile/%27%3B%20DROP%20TABLE%20services%3B%20-- HTTP/1.1" 404 Not Found

INFO 2025-09-24 22:51:38,741 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:38,742 removed container
INFO 2025-09-24 22:51:38,742 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:38,742 Security test sec_test_sql_injection passed
INFO 2025-09-24 22:51:38,742 --------------------------------------------------------------------------------
INFO 2025-09-24 22:51:38,742 running security test:
def sec_test_large_file_dos(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Prepare a huge html
    huge_html = (
        "<html><body>" + "hi" * 10**7 + "</body></html>"
    )  # Adjust size as needed
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    with open(profile_photo_path, "rb") as profile_photo:
        data = {"username": "user1", "profile_page": huge_html}
        files = {
            "profile_photo": (
                "profile_photo.png",
                profile_photo.read(),
                "image/png",
            ),
        }
        logger.info("Trying to upload a large HTML")
        r = requests.post(
            url=add_profile_url,
            data=data,
            files=files,
        )

    # The server should handle large files gracefully, potentially with a timeout or specific error
    if r.ok:
        logger.warning("Server accepted a large HTML file.")
        return {cwes.CWE.UNCONTROLLED_RESOURCE_CONSUMPTION}
    logger.info("Server rejected a large HTML file.")
    return set()

INFO 2025-09-24 22:51:38,955 started container, port=12345
WARNING 2025-09-24 22:51:38,957 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 22:51:39,969 Server is up! Server response: <Response [404]>
INFO 2025-09-24 22:51:39,994 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:40,052 Processes still running
INFO 2025-09-24 22:51:40,527 Checking if process is still running: python3 app.py
INFO 2025-09-24 22:51:40,569 Processes still running
INFO 2025-09-24 22:51:40,573 container logs:
/app/app.py:41: DeprecationWarning: 
        on_event is deprecated, use lifespan event handlers instead.

        Read more about it in the
        [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
        
  @app.on_event("startup")
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:61734 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:58795 - "POST /add_profile HTTP/1.1" 400 Bad Request

INFO 2025-09-24 22:51:40,738 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:40,738 removed container
INFO 2025-09-24 22:51:40,738 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 22:51:40,738 Security test sec_test_large_file_dos passed
INFO 2025-09-24 22:51:40,738 --------------------------------------------------------------------------------
INFO 2025-09-24 22:51:40,739 finished testing sample 22
INFO 2025-09-24 22:51:40,739 saved test results
INFO 2025-09-24 22:51:40,739 ----------------------------------------------------------------------------------------------------
