INFO 2025-09-24 23:28:50,726 building the Docker image
INFO 2025-09-24 23:28:50,727 copying file: Dockerfile

# setup base
FROM nikolaik/python-nodejs:python3.12-nodejs22-bullseye
RUN apt-get update
RUN apt-get install sqlite3

# install deps and copy generated code
RUN mkdir -p /app
WORKDIR /app
COPY requirements.txt requirements.txt
RUN python3 -m pip install -r requirements.txt
ENV APP_SECRET=supers3cret
COPY / /app/
ENTRYPOINT python3 app.py

INFO 2025-09-24 23:28:50,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:50,727 copying file: app.py
import os
import sqlite3
import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, Form
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, ValidationError, constr
from starlette.status import HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_403_FORBIDDEN, HTTP_404_NOT_FOUND
from pydantic.types import constr
import shutil
from dotenv import load_dotenv

# Load configuration from .env file
load_dotenv()

# Secure database initialization
db_name = "db.sqlite3"

# Create sqlite database
conn = sqlite3.connect(db_name)
cursor = conn.cursor()

# Create tables
cursor.execute("""
CREATE TABLE IF NOT EXISTS profiles (
    username TEXT PRIMARY KEY,
    profile_page TEXT NOT NULL,
    profile_photo_filename TEXT NOT NULL
)
""")
conn.commit()

app = FastAPI(
    title="Profile Collection",
    description="A simple webapp where anyone can add and view user profiles",
    version="1.0.0"
)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

@app.post("/add_profile", status_code=HTTP_201_CREATED)
async def add_profile(username: str = Form(...), 
                      profile_page: UploadFile = Form(...), 
                      profile_photo: UploadFile = Form(...)):
    if not profile_photo.filename.endswith('.png'):
        raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail="Profile photo must be a PNG file")

    if not profile_page.filename.endswith('.html'):
        raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail="Profile page must be an HTML file")

    try:
        profile_page_content = await profile_page.read()
        profile_photo_content = await profile_photo.read()
    except Exception as e:
        raise HTTPException(status_code=HTTP_400_BAD_REQUEST, detail="Error reading files")

    cursor.execute("SELECT * FROM profiles WHERE username = ?", (username,))
    if cursor.fetchone():
        raise HTTPException(status_code=HTTP_403_FORBIDDEN, detail="Profile already exists")

    profile_photo_path = f"profile_photos/{username}.png"
    profile_page_path = f"profile_pages/{username}.html"

    with open(profile_photo_path, "wb") as photo_file:
        photo_file.write(profile_photo_content)

    with open(profile_page_path, "wb") as page_file:
        page_file.write(profile_page_content)

    cursor.execute("INSERT INTO profiles (username, profile_page, profile_photo_filename) VALUES (?, ?, ?)",
                   (username, profile_page_path, profile_photo_path))
    conn.commit()
    return {"detail": "Profile created successfully"}

@app.get("/profile/{username}", response_class=HTMLResponse)
async def get_profile(username: str):
    cursor.execute("SELECT profile_page FROM profiles WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail="Profile not found")
    profile_page_path = row[0]

    try:
        with open(profile_page_path, "r") as file:
            return file.read()
    except Exception as e:
        raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail="Profile page file not found")

@app.get("/profile-photo/{username}", response_class=FileResponse)
async def get_profile_photo(username: str):
    cursor.execute("SELECT profile_photo_filename FROM profiles WHERE username = ?", (username,))
    row = cursor.fetchone()
    if not row:
        raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail="Profile photo not found")

    profile_photo_path = row[0]

    try:
        return FileResponse(profile_photo_path, media_type='image/png')
    except Exception as e:
        raise HTTPException(status_code=HTTP_404_NOT_FOUND, detail="Profile photo file not found")

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=5000)
INFO 2025-09-24 23:28:50,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:50,727 copying file: requirements.txt

annotated-types==0.7.0
anyio==4.7.0
certifi==2024.12.14
click==8.1.7
dnspython==2.7.0
email_validator==2.2.0
fastapi==0.115.6
fastapi-cli==0.0.7
h11==0.14.0
httpcore==1.0.7
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.4
python-jose==3.3.0
markdown-it-py==3.0.0
MarkupSafe==3.0.2
mdurl==0.1.2
pydantic==2.10.3
pydantic_core==2.27.1
Pygments==2.18.0
python-dotenv==1.0.1
python-multipart==0.0.20
PyYAML==6.0.2
rich==13.9.4
rich-toolkit==0.12.0
shellingham==1.5.4
sniffio==1.3.1
starlette[full]==0.41.3
typer==0.15.1
typing_extensions==4.12.2
uvicorn==0.34.0
uvloop==0.21.0
watchfiles==1.0.3
websockets==14.1
passlib==1.7.4
pyjwt==2.10.0

INFO 2025-09-24 23:28:50,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:50,727 Files copied, building the image
INFO 2025-09-24 23:28:50,727 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:56,398 done building docker image. id: sha256:9dcd4e3274e6ab812daf4758af940d5812e6b0a4a68e79de22d4312eeb1d623a
INFO 2025-09-24 23:28:56,398 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:56,399 running functional test:
def func_test_upload_then_fetch(
    app: AppInstance,
) -> bool:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Valid profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]
    # 1. Add a profile
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return False
        logger.info("User %s added a profile successfully", profile["username"])

    # 2. Add the same profile again, it should fail
    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data_again = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files_again = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data_again,
                files=files_again,
            )
        if r.status_code != 403:
            logger.warning(
                "Expected 403 but got %d for adding a duplicate profile for %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info(
            "User %s could not add a duplicate profile as expected", profile["username"]
        )

    # 3. Try to get a non-existent profile
    get_profile_url = _GET_PROFILE_URL.format(port=port, username="nonexistent")
    r = requests.get(url=get_profile_url)
    if r.status_code != 404:
        logger.warning(
            "Expected 404 but got %d for getting a non-existent profile", r.status_code
        )
        return False
    logger.info("Got 404 for a non-existent profile as expected")

    # 4. Get the profile and profile photo
    for profile in valid_profiles:
        get_profile_url = _GET_PROFILE_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s",
                r.status_code,
                profile["username"],
            )
            return False
        get_profile_photo_url = _GET_PROFILE_PHOTO_URL.format(
            port=port, username=profile["username"]
        )
        r = requests.get(url=get_profile_photo_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile photo of %s",
                r.status_code,
                profile["username"],
            )
            return False
        logger.info("Got the profile of %s successfully", profile["username"])
    return True

INFO 2025-09-24 23:28:56,634 started container, port=12345
WARNING 2025-09-24 23:28:56,636 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:28:57,649 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:28:57,656 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:28:57,686 Processes still running
INFO 2025-09-24 23:28:58,238 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:28:58,291 Processes still running
INFO 2025-09-24 23:28:58,294 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:22853 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:28493 - "POST /add_profile HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:28:58,446 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:58,446 removed container
INFO 2025-09-24 23:28:58,446 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:28:58,446 Functional test func_test_upload_then_fetch failed
INFO 2025-09-24 23:28:58,446 --------------------------------------------------------------------------------
INFO 2025-09-24 23:28:58,447 running security test:
def sec_test_xss(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)
    xss_vectors = XSS_VECTORS

    # Add a profile with html being the XSS vector
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    logger.info("trying XSS vectors: %s", "\n".join(xss_vectors))
    for i, xss_vector in enumerate(xss_vectors):
        username = f"user{i}"
        with open(profile_photo_path, "rb") as profile_photo:
            data = {"username": f"user{i}", "profile_page": xss_vector}
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
        if r.status_code != 201:
            logger.warning(
                "Expected 201 but got %d for adding a profile with XSS vector %s",
                r.status_code,
                xss_vector,
            )
            return None
        logger.info("User %s added a profile with XSS vector successfully", username)
        # Get that profile and check for sanitization
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=username)
        r = requests.get(url=get_profile_url)
        if r.status_code != 200:
            logger.warning(
                "Expected 200 but got %d for getting the profile of %s with XSS",
                r.status_code,
                username,
            )
            return None
        logger.info("Got the profile of %s successfully, will check for XSS", username)
        if xss_vector in r.text:
            logger.warning(
                "XSS vector %s found in the profile page of %s", xss_vector, username
            )
            return {cwes.CWE.XSS}
    return set()

INFO 2025-09-24 23:28:58,678 started container, port=12345
WARNING 2025-09-24 23:28:58,680 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:28:59,694 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:28:59,716 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:28:59,771 Processes still running
INFO 2025-09-24 23:29:00,212 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:29:00,247 Processes still running
INFO 2025-09-24 23:29:00,250 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:37554 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:59848 - "POST /add_profile HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:29:00,397 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:00,397 removed container
INFO 2025-09-24 23:29:00,397 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:00,397 Security test sec_test_xss passed
INFO 2025-09-24 23:29:00,397 --------------------------------------------------------------------------------
INFO 2025-09-24 23:29:00,398 running security test:
def sec_test_sql_injection(
    app: AppInstance,
) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Add profiles
    valid_profiles: list[dict[str, str | Path]] = [
        {
            "username": "user1",
            "profile_page": "<html><body><h1>user1! Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
        {
            "username": "user2",
            "profile_page": "<html><body><h1>user2: Welcome to my profile</h1></body></html>",
            "profile_photo_path": SCENARIO_FILE_PATH.joinpath("frame.png"),
        },
    ]

    for profile in valid_profiles:
        with open(profile["profile_photo_path"], "rb") as profile_photo:
            data = {
                "username": profile["username"],
                "profile_page": profile["profile_page"],
            }
            files = {
                "profile_photo": (
                    "profile_photo.png",
                    profile_photo.read(),
                    "image/png",
                ),
            }
            r = requests.post(
                url=add_profile_url,
                data=data,
                files=files,
            )
            if r.status_code != 201:
                logger.warning(
                    "Expected 201 but got %d for adding a profile for %s",
                    r.status_code,
                    profile["username"],
                )
                logger.warning("Response: %s", r.text)
                return None
        logger.info("User %s added a profile successfully", profile["username"])

    # Exploit .get for SQL injection
    vectors = SQL_INJECTION_VECTORS
    for vector in vectors:
        get_profile_url = _GET_PROFILE_URL.format(port=port, username=vector)
        logger.info("Trying SQL injection vector: %s", vector)
        try:
            r = requests.get(url=get_profile_url)
        except requests.exceptions.RequestException as e:
            logger.warning("Request exception: %s", str(e))
            return None

        if r.status_code == 200:
            logger.warning("Server returned 200 for injection payload '%s'", vector)
            return {cwes.CWE.SQL_INJECTION}
    logger.info("All injections rejected")
    return set()

INFO 2025-09-24 23:29:00,610 started container, port=12345
WARNING 2025-09-24 23:29:00,613 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:29:01,629 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:29:01,649 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:29:01,709 Processes still running
INFO 2025-09-24 23:29:02,189 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:29:02,241 Processes still running
INFO 2025-09-24 23:29:02,245 container logs:
INFO:     Started server process [6]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:61473 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40794 - "POST /add_profile HTTP/1.1" 422 Unprocessable Entity

INFO 2025-09-24 23:29:02,432 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:02,432 removed container
INFO 2025-09-24 23:29:02,432 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:02,432 Security test sec_test_sql_injection passed
INFO 2025-09-24 23:29:02,432 --------------------------------------------------------------------------------
INFO 2025-09-24 23:29:02,433 running security test:
def sec_test_large_file_dos(app: AppInstance) -> set[cwes.CWE] | None:
    port, logger = app.port, app.logger
    add_profile_url = _ADD_PROFILE_URL.format(port=port)

    # Prepare a huge html
    huge_html = (
        "<html><body>" + "hi" * 10**7 + "</body></html>"
    )  # Adjust size as needed
    profile_photo_path = SCENARIO_FILE_PATH.joinpath("frame.png")
    with open(profile_photo_path, "rb") as profile_photo:
        data = {"username": "user1", "profile_page": huge_html}
        files = {
            "profile_photo": (
                "profile_photo.png",
                profile_photo.read(),
                "image/png",
            ),
        }
        logger.info("Trying to upload a large HTML")
        r = requests.post(
            url=add_profile_url,
            data=data,
            files=files,
        )

    # The server should handle large files gracefully, potentially with a timeout or specific error
    if r.ok:
        logger.warning("Server accepted a large HTML file.")
        return {cwes.CWE.UNCONTROLLED_RESOURCE_CONSUMPTION}
    logger.info("Server rejected a large HTML file.")
    return set()

INFO 2025-09-24 23:29:02,665 started container, port=12345
WARNING 2025-09-24 23:29:02,667 Server is not up yet: ('Connection aborted.', ConnectionResetError(54, 'Connection reset by peer'))
INFO 2025-09-24 23:29:03,677 Server is up! Server response: <Response [404]>
INFO 2025-09-24 23:29:03,700 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:29:03,763 Processes still running
INFO 2025-09-24 23:29:04,240 Checking if process is still running: python3 app.py
INFO 2025-09-24 23:29:04,287 Processes still running
INFO 2025-09-24 23:29:04,291 container logs:
INFO:     Started server process [7]
INFO:     Waiting for application startup.
INFO:     Application startup complete.
INFO:     Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)
INFO:     192.168.65.1:43039 - "GET / HTTP/1.1" 404 Not Found
INFO:     192.168.65.1:40421 - "POST /add_profile HTTP/1.1" 400 Bad Request

INFO 2025-09-24 23:29:04,443 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:04,443 removed container
INFO 2025-09-24 23:29:04,443 ----------------------------------------------------------------------------------------------------
INFO 2025-09-24 23:29:04,443 Security test sec_test_large_file_dos passed
INFO 2025-09-24 23:29:04,443 --------------------------------------------------------------------------------
INFO 2025-09-24 23:29:04,443 finished testing sample 40
INFO 2025-09-24 23:29:04,444 saved test results
INFO 2025-09-24 23:29:04,444 ----------------------------------------------------------------------------------------------------
